Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     empty -> <empty>
Rule 2     program -> function
Rule 3     type -> Int
Rule 4     function -> type Identifier LParen RParen LBrace block RBrace
Rule 5     block -> block block_item
Rule 6     block -> empty
Rule 7     block_item -> statement
Rule 8     block_item -> declaration Semi
Rule 9     statement -> statement_matched
Rule 10    statement -> statement_unmatched
Rule 11    statement_matched -> If LParen expression RParen statement_matched Else statement_matched
Rule 12    statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched
Rule 13    statement_unmatched -> If LParen expression RParen statement
Rule 14    statement_matched -> While LParen expression RParen statement_matched
Rule 15    statement_unmatched -> While LParen expression RParen statement_unmatched
Rule 16    statement -> Do statement While LParen expression RParen
Rule 17    statement -> For LParen block_item block_item opt_expression RParen statement
Rule 18    statement_matched -> Return expression Semi
Rule 19    statement_matched -> opt_expression Semi
Rule 20    statement_matched -> LBrace block RBrace
Rule 21    statement_matched -> Break Semi
Rule 22    statement_matched -> Continue Semi
Rule 23    opt_expression -> expression
Rule 24    opt_expression -> empty
Rule 25    declaration -> type Identifier
Rule 26    declaration -> type Identifier Assign expression
Rule 27    expression -> assignment
Rule 28    assignment -> conditional
Rule 29    conditional -> logical_or
Rule 30    logical_or -> logical_and
Rule 31    logical_and -> bit_or
Rule 32    bit_or -> xor
Rule 33    xor -> bit_and
Rule 34    bit_and -> equality
Rule 35    equality -> relational
Rule 36    relational -> additive
Rule 37    additive -> multiplicative
Rule 38    multiplicative -> unary
Rule 39    unary -> postfix
Rule 40    postfix -> primary
Rule 41    unary -> Minus unary
Rule 42    unary -> BitNot unary
Rule 43    unary -> Not unary
Rule 44    assignment -> Identifier Assign expression
Rule 45    logical_or -> logical_or Or logical_and
Rule 46    logical_and -> logical_and And bit_or
Rule 47    bit_or -> bit_or BitOr xor
Rule 48    xor -> xor Xor bit_and
Rule 49    bit_and -> bit_and BitAnd equality
Rule 50    equality -> equality NotEqual relational
Rule 51    equality -> equality Equal relational
Rule 52    relational -> relational Less additive
Rule 53    relational -> relational Greater additive
Rule 54    relational -> relational LessEqual additive
Rule 55    relational -> relational GreaterEqual additive
Rule 56    additive -> additive Plus multiplicative
Rule 57    additive -> additive Minus multiplicative
Rule 58    multiplicative -> multiplicative Mul unary
Rule 59    multiplicative -> multiplicative Div unary
Rule 60    multiplicative -> multiplicative Mod unary
Rule 61    conditional -> logical_or Question expression Colon conditional
Rule 62    primary -> Integer
Rule 63    primary -> Identifier
Rule 64    primary -> LParen expression RParen

Terminals, with rules where they appear

And                  : 46
Assign               : 26 44
BitAnd               : 49
BitNot               : 42
BitOr                : 47
Break                : 21
Colon                : 61
Continue             : 22
Div                  : 59
Do                   : 16
Else                 : 11 12
Equal                : 51
For                  : 17
Greater              : 53
GreaterEqual         : 55
Identifier           : 4 25 26 44 63
If                   : 11 12 13
Int                  : 3
Integer              : 62
LBrace               : 4 20
LParen               : 4 11 12 13 14 15 16 17 64
Less                 : 52
LessEqual            : 54
Minus                : 41 57
Mod                  : 60
Mul                  : 58
Not                  : 43
NotEqual             : 50
Or                   : 45
Plus                 : 56
Question             : 61
RBrace               : 4 20
RParen               : 4 11 12 13 14 15 16 17 64
Return               : 18
Semi                 : 8 18 19 21 22
While                : 14 15 16
Xor                  : 48
error                : 

Nonterminals, with rules where they appear

additive             : 36 52 53 54 55 56 57
assignment           : 27
bit_and              : 33 48 49
bit_or               : 31 46 47
block                : 4 5 20
block_item           : 5 17 17
conditional          : 28 61
declaration          : 8
empty                : 6 24
equality             : 34 49 50 51
expression           : 11 12 13 14 15 16 18 23 26 44 61 64
function             : 2
logical_and          : 30 45 46
logical_or           : 29 45 61
multiplicative       : 37 56 57 58 59 60
opt_expression       : 17 19
postfix              : 39
primary              : 40
program              : 0
relational           : 35 50 51 52 53 54 55
statement            : 7 13 16 17
statement_matched    : 9 11 11 12 14
statement_unmatched  : 10 12 15
type                 : 4 25 26
unary                : 38 41 42 43 58 59 60
xor                  : 32 47 48

Parsing method: LALR

state 0

    (0) S' -> . program
    (2) program -> . function
    (4) function -> . type Identifier LParen RParen LBrace block RBrace
    (3) type -> . Int

    Int             shift and go to state 4

    program                        shift and go to state 1
    function                       shift and go to state 2
    type                           shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (2) program -> function .

    $end            reduce using rule 2 (program -> function .)


state 3

    (4) function -> type . Identifier LParen RParen LBrace block RBrace

    Identifier      shift and go to state 5


state 4

    (3) type -> Int .

    Identifier      reduce using rule 3 (type -> Int .)


state 5

    (4) function -> type Identifier . LParen RParen LBrace block RBrace

    LParen          shift and go to state 6


state 6

    (4) function -> type Identifier LParen . RParen LBrace block RBrace

    RParen          shift and go to state 7


state 7

    (4) function -> type Identifier LParen RParen . LBrace block RBrace

    LBrace          shift and go to state 8


state 8

    (4) function -> type Identifier LParen RParen LBrace . block RBrace
    (5) block -> . block block_item
    (6) block -> . empty
    (1) empty -> .

    RBrace          reduce using rule 1 (empty -> .)
    Do              reduce using rule 1 (empty -> .)
    For             reduce using rule 1 (empty -> .)
    If              reduce using rule 1 (empty -> .)
    While           reduce using rule 1 (empty -> .)
    Return          reduce using rule 1 (empty -> .)
    LBrace          reduce using rule 1 (empty -> .)
    Break           reduce using rule 1 (empty -> .)
    Continue        reduce using rule 1 (empty -> .)
    Int             reduce using rule 1 (empty -> .)
    Identifier      reduce using rule 1 (empty -> .)
    Minus           reduce using rule 1 (empty -> .)
    BitNot          reduce using rule 1 (empty -> .)
    Not             reduce using rule 1 (empty -> .)
    Integer         reduce using rule 1 (empty -> .)
    LParen          reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)

    block                          shift and go to state 9
    empty                          shift and go to state 10

state 9

    (4) function -> type Identifier LParen RParen LBrace block . RBrace
    (5) block -> block . block_item
    (7) block_item -> . statement
    (8) block_item -> . declaration Semi
    (9) statement -> . statement_matched
    (10) statement -> . statement_unmatched
    (16) statement -> . Do statement While LParen expression RParen
    (17) statement -> . For LParen block_item block_item opt_expression RParen statement
    (25) declaration -> . type Identifier
    (26) declaration -> . type Identifier Assign expression
    (11) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (14) statement_matched -> . While LParen expression RParen statement_matched
    (18) statement_matched -> . Return expression Semi
    (19) statement_matched -> . opt_expression Semi
    (20) statement_matched -> . LBrace block RBrace
    (21) statement_matched -> . Break Semi
    (22) statement_matched -> . Continue Semi
    (12) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (13) statement_unmatched -> . If LParen expression RParen statement
    (15) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (3) type -> . Int
    (23) opt_expression -> . expression
    (24) opt_expression -> . empty
    (27) expression -> . assignment
    (1) empty -> .
    (28) assignment -> . conditional
    (44) assignment -> . Identifier Assign expression
    (29) conditional -> . logical_or
    (61) conditional -> . logical_or Question expression Colon conditional
    (30) logical_or -> . logical_and
    (45) logical_or -> . logical_or Or logical_and
    (31) logical_and -> . bit_or
    (46) logical_and -> . logical_and And bit_or
    (32) bit_or -> . xor
    (47) bit_or -> . bit_or BitOr xor
    (33) xor -> . bit_and
    (48) xor -> . xor Xor bit_and
    (34) bit_and -> . equality
    (49) bit_and -> . bit_and BitAnd equality
    (35) equality -> . relational
    (50) equality -> . equality NotEqual relational
    (51) equality -> . equality Equal relational
    (36) relational -> . additive
    (52) relational -> . relational Less additive
    (53) relational -> . relational Greater additive
    (54) relational -> . relational LessEqual additive
    (55) relational -> . relational GreaterEqual additive
    (37) additive -> . multiplicative
    (56) additive -> . additive Plus multiplicative
    (57) additive -> . additive Minus multiplicative
    (38) multiplicative -> . unary
    (58) multiplicative -> . multiplicative Mul unary
    (59) multiplicative -> . multiplicative Div unary
    (60) multiplicative -> . multiplicative Mod unary
    (39) unary -> . postfix
    (41) unary -> . Minus unary
    (42) unary -> . BitNot unary
    (43) unary -> . Not unary
    (40) postfix -> . primary
    (62) primary -> . Integer
    (63) primary -> . Identifier
    (64) primary -> . LParen expression RParen

    RBrace          shift and go to state 15
    Do              shift and go to state 21
    For             shift and go to state 24
    If              shift and go to state 26
    While           shift and go to state 22
    Return          shift and go to state 27
    LBrace          shift and go to state 14
    Break           shift and go to state 28
    Continue        shift and go to state 29
    Int             shift and go to state 4
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    type                           shift and go to state 11
    block_item                     shift and go to state 16
    statement                      shift and go to state 17
    declaration                    shift and go to state 18
    statement_matched              shift and go to state 19
    statement_unmatched            shift and go to state 20
    expression                     shift and go to state 23
    opt_expression                 shift and go to state 25
    empty                          shift and go to state 30
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 10

    (6) block -> empty .

    RBrace          reduce using rule 6 (block -> empty .)
    Do              reduce using rule 6 (block -> empty .)
    For             reduce using rule 6 (block -> empty .)
    If              reduce using rule 6 (block -> empty .)
    While           reduce using rule 6 (block -> empty .)
    Return          reduce using rule 6 (block -> empty .)
    LBrace          reduce using rule 6 (block -> empty .)
    Break           reduce using rule 6 (block -> empty .)
    Continue        reduce using rule 6 (block -> empty .)
    Int             reduce using rule 6 (block -> empty .)
    Identifier      reduce using rule 6 (block -> empty .)
    Minus           reduce using rule 6 (block -> empty .)
    BitNot          reduce using rule 6 (block -> empty .)
    Not             reduce using rule 6 (block -> empty .)
    Integer         reduce using rule 6 (block -> empty .)
    LParen          reduce using rule 6 (block -> empty .)
    Semi            reduce using rule 6 (block -> empty .)


state 11

    (25) declaration -> type . Identifier
    (26) declaration -> type . Identifier Assign expression

    Identifier      shift and go to state 49


state 12

    (44) assignment -> Identifier . Assign expression
    (63) primary -> Identifier .

    Assign          shift and go to state 50
    Mul             reduce using rule 63 (primary -> Identifier .)
    Div             reduce using rule 63 (primary -> Identifier .)
    Mod             reduce using rule 63 (primary -> Identifier .)
    Plus            reduce using rule 63 (primary -> Identifier .)
    Minus           reduce using rule 63 (primary -> Identifier .)
    Less            reduce using rule 63 (primary -> Identifier .)
    Greater         reduce using rule 63 (primary -> Identifier .)
    LessEqual       reduce using rule 63 (primary -> Identifier .)
    GreaterEqual    reduce using rule 63 (primary -> Identifier .)
    NotEqual        reduce using rule 63 (primary -> Identifier .)
    Equal           reduce using rule 63 (primary -> Identifier .)
    BitAnd          reduce using rule 63 (primary -> Identifier .)
    Xor             reduce using rule 63 (primary -> Identifier .)
    BitOr           reduce using rule 63 (primary -> Identifier .)
    And             reduce using rule 63 (primary -> Identifier .)
    Question        reduce using rule 63 (primary -> Identifier .)
    Or              reduce using rule 63 (primary -> Identifier .)
    Semi            reduce using rule 63 (primary -> Identifier .)
    RParen          reduce using rule 63 (primary -> Identifier .)
    Colon           reduce using rule 63 (primary -> Identifier .)


state 13

    (64) primary -> LParen . expression RParen
    (27) expression -> . assignment
    (28) assignment -> . conditional
    (44) assignment -> . Identifier Assign expression
    (29) conditional -> . logical_or
    (61) conditional -> . logical_or Question expression Colon conditional
    (30) logical_or -> . logical_and
    (45) logical_or -> . logical_or Or logical_and
    (31) logical_and -> . bit_or
    (46) logical_and -> . logical_and And bit_or
    (32) bit_or -> . xor
    (47) bit_or -> . bit_or BitOr xor
    (33) xor -> . bit_and
    (48) xor -> . xor Xor bit_and
    (34) bit_and -> . equality
    (49) bit_and -> . bit_and BitAnd equality
    (35) equality -> . relational
    (50) equality -> . equality NotEqual relational
    (51) equality -> . equality Equal relational
    (36) relational -> . additive
    (52) relational -> . relational Less additive
    (53) relational -> . relational Greater additive
    (54) relational -> . relational LessEqual additive
    (55) relational -> . relational GreaterEqual additive
    (37) additive -> . multiplicative
    (56) additive -> . additive Plus multiplicative
    (57) additive -> . additive Minus multiplicative
    (38) multiplicative -> . unary
    (58) multiplicative -> . multiplicative Mul unary
    (59) multiplicative -> . multiplicative Div unary
    (60) multiplicative -> . multiplicative Mod unary
    (39) unary -> . postfix
    (41) unary -> . Minus unary
    (42) unary -> . BitNot unary
    (43) unary -> . Not unary
    (40) postfix -> . primary
    (62) primary -> . Integer
    (63) primary -> . Identifier
    (64) primary -> . LParen expression RParen

    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    expression                     shift and go to state 51
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 14

    (20) statement_matched -> LBrace . block RBrace
    (5) block -> . block block_item
    (6) block -> . empty
    (1) empty -> .

    RBrace          reduce using rule 1 (empty -> .)
    Do              reduce using rule 1 (empty -> .)
    For             reduce using rule 1 (empty -> .)
    If              reduce using rule 1 (empty -> .)
    While           reduce using rule 1 (empty -> .)
    Return          reduce using rule 1 (empty -> .)
    LBrace          reduce using rule 1 (empty -> .)
    Break           reduce using rule 1 (empty -> .)
    Continue        reduce using rule 1 (empty -> .)
    Int             reduce using rule 1 (empty -> .)
    Identifier      reduce using rule 1 (empty -> .)
    Minus           reduce using rule 1 (empty -> .)
    BitNot          reduce using rule 1 (empty -> .)
    Not             reduce using rule 1 (empty -> .)
    Integer         reduce using rule 1 (empty -> .)
    LParen          reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)

    block                          shift and go to state 52
    empty                          shift and go to state 10

state 15

    (4) function -> type Identifier LParen RParen LBrace block RBrace .

    $end            reduce using rule 4 (function -> type Identifier LParen RParen LBrace block RBrace .)


state 16

    (5) block -> block block_item .

    RBrace          reduce using rule 5 (block -> block block_item .)
    Do              reduce using rule 5 (block -> block block_item .)
    For             reduce using rule 5 (block -> block block_item .)
    If              reduce using rule 5 (block -> block block_item .)
    While           reduce using rule 5 (block -> block block_item .)
    Return          reduce using rule 5 (block -> block block_item .)
    LBrace          reduce using rule 5 (block -> block block_item .)
    Break           reduce using rule 5 (block -> block block_item .)
    Continue        reduce using rule 5 (block -> block block_item .)
    Int             reduce using rule 5 (block -> block block_item .)
    Identifier      reduce using rule 5 (block -> block block_item .)
    Minus           reduce using rule 5 (block -> block block_item .)
    BitNot          reduce using rule 5 (block -> block block_item .)
    Not             reduce using rule 5 (block -> block block_item .)
    Integer         reduce using rule 5 (block -> block block_item .)
    LParen          reduce using rule 5 (block -> block block_item .)
    Semi            reduce using rule 5 (block -> block block_item .)


state 17

    (7) block_item -> statement .

    RBrace          reduce using rule 7 (block_item -> statement .)
    Do              reduce using rule 7 (block_item -> statement .)
    For             reduce using rule 7 (block_item -> statement .)
    If              reduce using rule 7 (block_item -> statement .)
    While           reduce using rule 7 (block_item -> statement .)
    Return          reduce using rule 7 (block_item -> statement .)
    LBrace          reduce using rule 7 (block_item -> statement .)
    Break           reduce using rule 7 (block_item -> statement .)
    Continue        reduce using rule 7 (block_item -> statement .)
    Int             reduce using rule 7 (block_item -> statement .)
    Identifier      reduce using rule 7 (block_item -> statement .)
    Minus           reduce using rule 7 (block_item -> statement .)
    BitNot          reduce using rule 7 (block_item -> statement .)
    Not             reduce using rule 7 (block_item -> statement .)
    Integer         reduce using rule 7 (block_item -> statement .)
    LParen          reduce using rule 7 (block_item -> statement .)
    Semi            reduce using rule 7 (block_item -> statement .)
    RParen          reduce using rule 7 (block_item -> statement .)


state 18

    (8) block_item -> declaration . Semi

    Semi            shift and go to state 53


state 19

    (9) statement -> statement_matched .

    RBrace          reduce using rule 9 (statement -> statement_matched .)
    Do              reduce using rule 9 (statement -> statement_matched .)
    For             reduce using rule 9 (statement -> statement_matched .)
    If              reduce using rule 9 (statement -> statement_matched .)
    While           reduce using rule 9 (statement -> statement_matched .)
    Return          reduce using rule 9 (statement -> statement_matched .)
    LBrace          reduce using rule 9 (statement -> statement_matched .)
    Break           reduce using rule 9 (statement -> statement_matched .)
    Continue        reduce using rule 9 (statement -> statement_matched .)
    Int             reduce using rule 9 (statement -> statement_matched .)
    Identifier      reduce using rule 9 (statement -> statement_matched .)
    Minus           reduce using rule 9 (statement -> statement_matched .)
    BitNot          reduce using rule 9 (statement -> statement_matched .)
    Not             reduce using rule 9 (statement -> statement_matched .)
    Integer         reduce using rule 9 (statement -> statement_matched .)
    LParen          reduce using rule 9 (statement -> statement_matched .)
    Semi            reduce using rule 9 (statement -> statement_matched .)
    RParen          reduce using rule 9 (statement -> statement_matched .)


state 20

    (10) statement -> statement_unmatched .

    RBrace          reduce using rule 10 (statement -> statement_unmatched .)
    Do              reduce using rule 10 (statement -> statement_unmatched .)
    For             reduce using rule 10 (statement -> statement_unmatched .)
    If              reduce using rule 10 (statement -> statement_unmatched .)
    While           reduce using rule 10 (statement -> statement_unmatched .)
    Return          reduce using rule 10 (statement -> statement_unmatched .)
    LBrace          reduce using rule 10 (statement -> statement_unmatched .)
    Break           reduce using rule 10 (statement -> statement_unmatched .)
    Continue        reduce using rule 10 (statement -> statement_unmatched .)
    Int             reduce using rule 10 (statement -> statement_unmatched .)
    Identifier      reduce using rule 10 (statement -> statement_unmatched .)
    Minus           reduce using rule 10 (statement -> statement_unmatched .)
    BitNot          reduce using rule 10 (statement -> statement_unmatched .)
    Not             reduce using rule 10 (statement -> statement_unmatched .)
    Integer         reduce using rule 10 (statement -> statement_unmatched .)
    LParen          reduce using rule 10 (statement -> statement_unmatched .)
    Semi            reduce using rule 10 (statement -> statement_unmatched .)
    RParen          reduce using rule 10 (statement -> statement_unmatched .)


state 21

    (16) statement -> Do . statement While LParen expression RParen
    (9) statement -> . statement_matched
    (10) statement -> . statement_unmatched
    (16) statement -> . Do statement While LParen expression RParen
    (17) statement -> . For LParen block_item block_item opt_expression RParen statement
    (11) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (14) statement_matched -> . While LParen expression RParen statement_matched
    (18) statement_matched -> . Return expression Semi
    (19) statement_matched -> . opt_expression Semi
    (20) statement_matched -> . LBrace block RBrace
    (21) statement_matched -> . Break Semi
    (22) statement_matched -> . Continue Semi
    (12) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (13) statement_unmatched -> . If LParen expression RParen statement
    (15) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (23) opt_expression -> . expression
    (24) opt_expression -> . empty
    (27) expression -> . assignment
    (1) empty -> .
    (28) assignment -> . conditional
    (44) assignment -> . Identifier Assign expression
    (29) conditional -> . logical_or
    (61) conditional -> . logical_or Question expression Colon conditional
    (30) logical_or -> . logical_and
    (45) logical_or -> . logical_or Or logical_and
    (31) logical_and -> . bit_or
    (46) logical_and -> . logical_and And bit_or
    (32) bit_or -> . xor
    (47) bit_or -> . bit_or BitOr xor
    (33) xor -> . bit_and
    (48) xor -> . xor Xor bit_and
    (34) bit_and -> . equality
    (49) bit_and -> . bit_and BitAnd equality
    (35) equality -> . relational
    (50) equality -> . equality NotEqual relational
    (51) equality -> . equality Equal relational
    (36) relational -> . additive
    (52) relational -> . relational Less additive
    (53) relational -> . relational Greater additive
    (54) relational -> . relational LessEqual additive
    (55) relational -> . relational GreaterEqual additive
    (37) additive -> . multiplicative
    (56) additive -> . additive Plus multiplicative
    (57) additive -> . additive Minus multiplicative
    (38) multiplicative -> . unary
    (58) multiplicative -> . multiplicative Mul unary
    (59) multiplicative -> . multiplicative Div unary
    (60) multiplicative -> . multiplicative Mod unary
    (39) unary -> . postfix
    (41) unary -> . Minus unary
    (42) unary -> . BitNot unary
    (43) unary -> . Not unary
    (40) postfix -> . primary
    (62) primary -> . Integer
    (63) primary -> . Identifier
    (64) primary -> . LParen expression RParen

    Do              shift and go to state 21
    For             shift and go to state 24
    If              shift and go to state 26
    While           shift and go to state 22
    Return          shift and go to state 27
    LBrace          shift and go to state 14
    Break           shift and go to state 28
    Continue        shift and go to state 29
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    statement                      shift and go to state 54
    expression                     shift and go to state 23
    statement_matched              shift and go to state 19
    statement_unmatched            shift and go to state 20
    opt_expression                 shift and go to state 25
    empty                          shift and go to state 30
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 22

    (14) statement_matched -> While . LParen expression RParen statement_matched
    (15) statement_unmatched -> While . LParen expression RParen statement_unmatched

    LParen          shift and go to state 55


state 23

    (23) opt_expression -> expression .

    Semi            reduce using rule 23 (opt_expression -> expression .)
    RParen          reduce using rule 23 (opt_expression -> expression .)


state 24

    (17) statement -> For . LParen block_item block_item opt_expression RParen statement

    LParen          shift and go to state 56


state 25

    (19) statement_matched -> opt_expression . Semi

    Semi            shift and go to state 57


state 26

    (11) statement_matched -> If . LParen expression RParen statement_matched Else statement_matched
    (12) statement_unmatched -> If . LParen expression RParen statement_matched Else statement_unmatched
    (13) statement_unmatched -> If . LParen expression RParen statement

    LParen          shift and go to state 58


state 27

    (18) statement_matched -> Return . expression Semi
    (27) expression -> . assignment
    (28) assignment -> . conditional
    (44) assignment -> . Identifier Assign expression
    (29) conditional -> . logical_or
    (61) conditional -> . logical_or Question expression Colon conditional
    (30) logical_or -> . logical_and
    (45) logical_or -> . logical_or Or logical_and
    (31) logical_and -> . bit_or
    (46) logical_and -> . logical_and And bit_or
    (32) bit_or -> . xor
    (47) bit_or -> . bit_or BitOr xor
    (33) xor -> . bit_and
    (48) xor -> . xor Xor bit_and
    (34) bit_and -> . equality
    (49) bit_and -> . bit_and BitAnd equality
    (35) equality -> . relational
    (50) equality -> . equality NotEqual relational
    (51) equality -> . equality Equal relational
    (36) relational -> . additive
    (52) relational -> . relational Less additive
    (53) relational -> . relational Greater additive
    (54) relational -> . relational LessEqual additive
    (55) relational -> . relational GreaterEqual additive
    (37) additive -> . multiplicative
    (56) additive -> . additive Plus multiplicative
    (57) additive -> . additive Minus multiplicative
    (38) multiplicative -> . unary
    (58) multiplicative -> . multiplicative Mul unary
    (59) multiplicative -> . multiplicative Div unary
    (60) multiplicative -> . multiplicative Mod unary
    (39) unary -> . postfix
    (41) unary -> . Minus unary
    (42) unary -> . BitNot unary
    (43) unary -> . Not unary
    (40) postfix -> . primary
    (62) primary -> . Integer
    (63) primary -> . Identifier
    (64) primary -> . LParen expression RParen

    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    expression                     shift and go to state 59
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 28

    (21) statement_matched -> Break . Semi

    Semi            shift and go to state 60


state 29

    (22) statement_matched -> Continue . Semi

    Semi            shift and go to state 61


state 30

    (24) opt_expression -> empty .

    Semi            reduce using rule 24 (opt_expression -> empty .)
    RParen          reduce using rule 24 (opt_expression -> empty .)


state 31

    (27) expression -> assignment .

    Semi            reduce using rule 27 (expression -> assignment .)
    RParen          reduce using rule 27 (expression -> assignment .)
    Colon           reduce using rule 27 (expression -> assignment .)


state 32

    (28) assignment -> conditional .

    Semi            reduce using rule 28 (assignment -> conditional .)
    RParen          reduce using rule 28 (assignment -> conditional .)
    Colon           reduce using rule 28 (assignment -> conditional .)


state 33

    (29) conditional -> logical_or .
    (61) conditional -> logical_or . Question expression Colon conditional
    (45) logical_or -> logical_or . Or logical_and

    Semi            reduce using rule 29 (conditional -> logical_or .)
    RParen          reduce using rule 29 (conditional -> logical_or .)
    Colon           reduce using rule 29 (conditional -> logical_or .)
    Question        shift and go to state 62
    Or              shift and go to state 63


state 34

    (30) logical_or -> logical_and .
    (46) logical_and -> logical_and . And bit_or

    Question        reduce using rule 30 (logical_or -> logical_and .)
    Or              reduce using rule 30 (logical_or -> logical_and .)
    Semi            reduce using rule 30 (logical_or -> logical_and .)
    RParen          reduce using rule 30 (logical_or -> logical_and .)
    Colon           reduce using rule 30 (logical_or -> logical_and .)
    And             shift and go to state 64


state 35

    (31) logical_and -> bit_or .
    (47) bit_or -> bit_or . BitOr xor

    And             reduce using rule 31 (logical_and -> bit_or .)
    Question        reduce using rule 31 (logical_and -> bit_or .)
    Or              reduce using rule 31 (logical_and -> bit_or .)
    Semi            reduce using rule 31 (logical_and -> bit_or .)
    RParen          reduce using rule 31 (logical_and -> bit_or .)
    Colon           reduce using rule 31 (logical_and -> bit_or .)
    BitOr           shift and go to state 65


state 36

    (32) bit_or -> xor .
    (48) xor -> xor . Xor bit_and

    BitOr           reduce using rule 32 (bit_or -> xor .)
    And             reduce using rule 32 (bit_or -> xor .)
    Question        reduce using rule 32 (bit_or -> xor .)
    Or              reduce using rule 32 (bit_or -> xor .)
    Semi            reduce using rule 32 (bit_or -> xor .)
    RParen          reduce using rule 32 (bit_or -> xor .)
    Colon           reduce using rule 32 (bit_or -> xor .)
    Xor             shift and go to state 66


state 37

    (33) xor -> bit_and .
    (49) bit_and -> bit_and . BitAnd equality

    Xor             reduce using rule 33 (xor -> bit_and .)
    BitOr           reduce using rule 33 (xor -> bit_and .)
    And             reduce using rule 33 (xor -> bit_and .)
    Question        reduce using rule 33 (xor -> bit_and .)
    Or              reduce using rule 33 (xor -> bit_and .)
    Semi            reduce using rule 33 (xor -> bit_and .)
    RParen          reduce using rule 33 (xor -> bit_and .)
    Colon           reduce using rule 33 (xor -> bit_and .)
    BitAnd          shift and go to state 67


state 38

    (34) bit_and -> equality .
    (50) equality -> equality . NotEqual relational
    (51) equality -> equality . Equal relational

    BitAnd          reduce using rule 34 (bit_and -> equality .)
    Xor             reduce using rule 34 (bit_and -> equality .)
    BitOr           reduce using rule 34 (bit_and -> equality .)
    And             reduce using rule 34 (bit_and -> equality .)
    Question        reduce using rule 34 (bit_and -> equality .)
    Or              reduce using rule 34 (bit_and -> equality .)
    Semi            reduce using rule 34 (bit_and -> equality .)
    RParen          reduce using rule 34 (bit_and -> equality .)
    Colon           reduce using rule 34 (bit_and -> equality .)
    NotEqual        shift and go to state 68
    Equal           shift and go to state 69


state 39

    (35) equality -> relational .
    (52) relational -> relational . Less additive
    (53) relational -> relational . Greater additive
    (54) relational -> relational . LessEqual additive
    (55) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 35 (equality -> relational .)
    Equal           reduce using rule 35 (equality -> relational .)
    BitAnd          reduce using rule 35 (equality -> relational .)
    Xor             reduce using rule 35 (equality -> relational .)
    BitOr           reduce using rule 35 (equality -> relational .)
    And             reduce using rule 35 (equality -> relational .)
    Question        reduce using rule 35 (equality -> relational .)
    Or              reduce using rule 35 (equality -> relational .)
    Semi            reduce using rule 35 (equality -> relational .)
    RParen          reduce using rule 35 (equality -> relational .)
    Colon           reduce using rule 35 (equality -> relational .)
    Less            shift and go to state 70
    Greater         shift and go to state 71
    LessEqual       shift and go to state 72
    GreaterEqual    shift and go to state 73


state 40

    (36) relational -> additive .
    (56) additive -> additive . Plus multiplicative
    (57) additive -> additive . Minus multiplicative

    Less            reduce using rule 36 (relational -> additive .)
    Greater         reduce using rule 36 (relational -> additive .)
    LessEqual       reduce using rule 36 (relational -> additive .)
    GreaterEqual    reduce using rule 36 (relational -> additive .)
    NotEqual        reduce using rule 36 (relational -> additive .)
    Equal           reduce using rule 36 (relational -> additive .)
    BitAnd          reduce using rule 36 (relational -> additive .)
    Xor             reduce using rule 36 (relational -> additive .)
    BitOr           reduce using rule 36 (relational -> additive .)
    And             reduce using rule 36 (relational -> additive .)
    Question        reduce using rule 36 (relational -> additive .)
    Or              reduce using rule 36 (relational -> additive .)
    Semi            reduce using rule 36 (relational -> additive .)
    RParen          reduce using rule 36 (relational -> additive .)
    Colon           reduce using rule 36 (relational -> additive .)
    Plus            shift and go to state 74
    Minus           shift and go to state 75


state 41

    (37) additive -> multiplicative .
    (58) multiplicative -> multiplicative . Mul unary
    (59) multiplicative -> multiplicative . Div unary
    (60) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 37 (additive -> multiplicative .)
    Minus           reduce using rule 37 (additive -> multiplicative .)
    Less            reduce using rule 37 (additive -> multiplicative .)
    Greater         reduce using rule 37 (additive -> multiplicative .)
    LessEqual       reduce using rule 37 (additive -> multiplicative .)
    GreaterEqual    reduce using rule 37 (additive -> multiplicative .)
    NotEqual        reduce using rule 37 (additive -> multiplicative .)
    Equal           reduce using rule 37 (additive -> multiplicative .)
    BitAnd          reduce using rule 37 (additive -> multiplicative .)
    Xor             reduce using rule 37 (additive -> multiplicative .)
    BitOr           reduce using rule 37 (additive -> multiplicative .)
    And             reduce using rule 37 (additive -> multiplicative .)
    Question        reduce using rule 37 (additive -> multiplicative .)
    Or              reduce using rule 37 (additive -> multiplicative .)
    Semi            reduce using rule 37 (additive -> multiplicative .)
    RParen          reduce using rule 37 (additive -> multiplicative .)
    Colon           reduce using rule 37 (additive -> multiplicative .)
    Mul             shift and go to state 76
    Div             shift and go to state 77
    Mod             shift and go to state 78


state 42

    (41) unary -> Minus . unary
    (39) unary -> . postfix
    (41) unary -> . Minus unary
    (42) unary -> . BitNot unary
    (43) unary -> . Not unary
    (40) postfix -> . primary
    (62) primary -> . Integer
    (63) primary -> . Identifier
    (64) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 80
    LParen          shift and go to state 13

    unary                          shift and go to state 79
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 43

    (38) multiplicative -> unary .

    Mul             reduce using rule 38 (multiplicative -> unary .)
    Div             reduce using rule 38 (multiplicative -> unary .)
    Mod             reduce using rule 38 (multiplicative -> unary .)
    Plus            reduce using rule 38 (multiplicative -> unary .)
    Minus           reduce using rule 38 (multiplicative -> unary .)
    Less            reduce using rule 38 (multiplicative -> unary .)
    Greater         reduce using rule 38 (multiplicative -> unary .)
    LessEqual       reduce using rule 38 (multiplicative -> unary .)
    GreaterEqual    reduce using rule 38 (multiplicative -> unary .)
    NotEqual        reduce using rule 38 (multiplicative -> unary .)
    Equal           reduce using rule 38 (multiplicative -> unary .)
    BitAnd          reduce using rule 38 (multiplicative -> unary .)
    Xor             reduce using rule 38 (multiplicative -> unary .)
    BitOr           reduce using rule 38 (multiplicative -> unary .)
    And             reduce using rule 38 (multiplicative -> unary .)
    Question        reduce using rule 38 (multiplicative -> unary .)
    Or              reduce using rule 38 (multiplicative -> unary .)
    Semi            reduce using rule 38 (multiplicative -> unary .)
    RParen          reduce using rule 38 (multiplicative -> unary .)
    Colon           reduce using rule 38 (multiplicative -> unary .)


state 44

    (39) unary -> postfix .

    Mul             reduce using rule 39 (unary -> postfix .)
    Div             reduce using rule 39 (unary -> postfix .)
    Mod             reduce using rule 39 (unary -> postfix .)
    Plus            reduce using rule 39 (unary -> postfix .)
    Minus           reduce using rule 39 (unary -> postfix .)
    Less            reduce using rule 39 (unary -> postfix .)
    Greater         reduce using rule 39 (unary -> postfix .)
    LessEqual       reduce using rule 39 (unary -> postfix .)
    GreaterEqual    reduce using rule 39 (unary -> postfix .)
    NotEqual        reduce using rule 39 (unary -> postfix .)
    Equal           reduce using rule 39 (unary -> postfix .)
    BitAnd          reduce using rule 39 (unary -> postfix .)
    Xor             reduce using rule 39 (unary -> postfix .)
    BitOr           reduce using rule 39 (unary -> postfix .)
    And             reduce using rule 39 (unary -> postfix .)
    Question        reduce using rule 39 (unary -> postfix .)
    Or              reduce using rule 39 (unary -> postfix .)
    Semi            reduce using rule 39 (unary -> postfix .)
    RParen          reduce using rule 39 (unary -> postfix .)
    Colon           reduce using rule 39 (unary -> postfix .)


state 45

    (42) unary -> BitNot . unary
    (39) unary -> . postfix
    (41) unary -> . Minus unary
    (42) unary -> . BitNot unary
    (43) unary -> . Not unary
    (40) postfix -> . primary
    (62) primary -> . Integer
    (63) primary -> . Identifier
    (64) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 80
    LParen          shift and go to state 13

    unary                          shift and go to state 81
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 46

    (43) unary -> Not . unary
    (39) unary -> . postfix
    (41) unary -> . Minus unary
    (42) unary -> . BitNot unary
    (43) unary -> . Not unary
    (40) postfix -> . primary
    (62) primary -> . Integer
    (63) primary -> . Identifier
    (64) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 80
    LParen          shift and go to state 13

    unary                          shift and go to state 82
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 47

    (40) postfix -> primary .

    Mul             reduce using rule 40 (postfix -> primary .)
    Div             reduce using rule 40 (postfix -> primary .)
    Mod             reduce using rule 40 (postfix -> primary .)
    Plus            reduce using rule 40 (postfix -> primary .)
    Minus           reduce using rule 40 (postfix -> primary .)
    Less            reduce using rule 40 (postfix -> primary .)
    Greater         reduce using rule 40 (postfix -> primary .)
    LessEqual       reduce using rule 40 (postfix -> primary .)
    GreaterEqual    reduce using rule 40 (postfix -> primary .)
    NotEqual        reduce using rule 40 (postfix -> primary .)
    Equal           reduce using rule 40 (postfix -> primary .)
    BitAnd          reduce using rule 40 (postfix -> primary .)
    Xor             reduce using rule 40 (postfix -> primary .)
    BitOr           reduce using rule 40 (postfix -> primary .)
    And             reduce using rule 40 (postfix -> primary .)
    Question        reduce using rule 40 (postfix -> primary .)
    Or              reduce using rule 40 (postfix -> primary .)
    Semi            reduce using rule 40 (postfix -> primary .)
    RParen          reduce using rule 40 (postfix -> primary .)
    Colon           reduce using rule 40 (postfix -> primary .)


state 48

    (62) primary -> Integer .

    Mul             reduce using rule 62 (primary -> Integer .)
    Div             reduce using rule 62 (primary -> Integer .)
    Mod             reduce using rule 62 (primary -> Integer .)
    Plus            reduce using rule 62 (primary -> Integer .)
    Minus           reduce using rule 62 (primary -> Integer .)
    Less            reduce using rule 62 (primary -> Integer .)
    Greater         reduce using rule 62 (primary -> Integer .)
    LessEqual       reduce using rule 62 (primary -> Integer .)
    GreaterEqual    reduce using rule 62 (primary -> Integer .)
    NotEqual        reduce using rule 62 (primary -> Integer .)
    Equal           reduce using rule 62 (primary -> Integer .)
    BitAnd          reduce using rule 62 (primary -> Integer .)
    Xor             reduce using rule 62 (primary -> Integer .)
    BitOr           reduce using rule 62 (primary -> Integer .)
    And             reduce using rule 62 (primary -> Integer .)
    Question        reduce using rule 62 (primary -> Integer .)
    Or              reduce using rule 62 (primary -> Integer .)
    Semi            reduce using rule 62 (primary -> Integer .)
    RParen          reduce using rule 62 (primary -> Integer .)
    Colon           reduce using rule 62 (primary -> Integer .)


state 49

    (25) declaration -> type Identifier .
    (26) declaration -> type Identifier . Assign expression

    Semi            reduce using rule 25 (declaration -> type Identifier .)
    Assign          shift and go to state 83


state 50

    (44) assignment -> Identifier Assign . expression
    (27) expression -> . assignment
    (28) assignment -> . conditional
    (44) assignment -> . Identifier Assign expression
    (29) conditional -> . logical_or
    (61) conditional -> . logical_or Question expression Colon conditional
    (30) logical_or -> . logical_and
    (45) logical_or -> . logical_or Or logical_and
    (31) logical_and -> . bit_or
    (46) logical_and -> . logical_and And bit_or
    (32) bit_or -> . xor
    (47) bit_or -> . bit_or BitOr xor
    (33) xor -> . bit_and
    (48) xor -> . xor Xor bit_and
    (34) bit_and -> . equality
    (49) bit_and -> . bit_and BitAnd equality
    (35) equality -> . relational
    (50) equality -> . equality NotEqual relational
    (51) equality -> . equality Equal relational
    (36) relational -> . additive
    (52) relational -> . relational Less additive
    (53) relational -> . relational Greater additive
    (54) relational -> . relational LessEqual additive
    (55) relational -> . relational GreaterEqual additive
    (37) additive -> . multiplicative
    (56) additive -> . additive Plus multiplicative
    (57) additive -> . additive Minus multiplicative
    (38) multiplicative -> . unary
    (58) multiplicative -> . multiplicative Mul unary
    (59) multiplicative -> . multiplicative Div unary
    (60) multiplicative -> . multiplicative Mod unary
    (39) unary -> . postfix
    (41) unary -> . Minus unary
    (42) unary -> . BitNot unary
    (43) unary -> . Not unary
    (40) postfix -> . primary
    (62) primary -> . Integer
    (63) primary -> . Identifier
    (64) primary -> . LParen expression RParen

    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    expression                     shift and go to state 84
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 51

    (64) primary -> LParen expression . RParen

    RParen          shift and go to state 85


state 52

    (20) statement_matched -> LBrace block . RBrace
    (5) block -> block . block_item
    (7) block_item -> . statement
    (8) block_item -> . declaration Semi
    (9) statement -> . statement_matched
    (10) statement -> . statement_unmatched
    (16) statement -> . Do statement While LParen expression RParen
    (17) statement -> . For LParen block_item block_item opt_expression RParen statement
    (25) declaration -> . type Identifier
    (26) declaration -> . type Identifier Assign expression
    (11) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (14) statement_matched -> . While LParen expression RParen statement_matched
    (18) statement_matched -> . Return expression Semi
    (19) statement_matched -> . opt_expression Semi
    (20) statement_matched -> . LBrace block RBrace
    (21) statement_matched -> . Break Semi
    (22) statement_matched -> . Continue Semi
    (12) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (13) statement_unmatched -> . If LParen expression RParen statement
    (15) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (3) type -> . Int
    (23) opt_expression -> . expression
    (24) opt_expression -> . empty
    (27) expression -> . assignment
    (1) empty -> .
    (28) assignment -> . conditional
    (44) assignment -> . Identifier Assign expression
    (29) conditional -> . logical_or
    (61) conditional -> . logical_or Question expression Colon conditional
    (30) logical_or -> . logical_and
    (45) logical_or -> . logical_or Or logical_and
    (31) logical_and -> . bit_or
    (46) logical_and -> . logical_and And bit_or
    (32) bit_or -> . xor
    (47) bit_or -> . bit_or BitOr xor
    (33) xor -> . bit_and
    (48) xor -> . xor Xor bit_and
    (34) bit_and -> . equality
    (49) bit_and -> . bit_and BitAnd equality
    (35) equality -> . relational
    (50) equality -> . equality NotEqual relational
    (51) equality -> . equality Equal relational
    (36) relational -> . additive
    (52) relational -> . relational Less additive
    (53) relational -> . relational Greater additive
    (54) relational -> . relational LessEqual additive
    (55) relational -> . relational GreaterEqual additive
    (37) additive -> . multiplicative
    (56) additive -> . additive Plus multiplicative
    (57) additive -> . additive Minus multiplicative
    (38) multiplicative -> . unary
    (58) multiplicative -> . multiplicative Mul unary
    (59) multiplicative -> . multiplicative Div unary
    (60) multiplicative -> . multiplicative Mod unary
    (39) unary -> . postfix
    (41) unary -> . Minus unary
    (42) unary -> . BitNot unary
    (43) unary -> . Not unary
    (40) postfix -> . primary
    (62) primary -> . Integer
    (63) primary -> . Identifier
    (64) primary -> . LParen expression RParen

    RBrace          shift and go to state 86
    Do              shift and go to state 21
    For             shift and go to state 24
    If              shift and go to state 26
    While           shift and go to state 22
    Return          shift and go to state 27
    LBrace          shift and go to state 14
    Break           shift and go to state 28
    Continue        shift and go to state 29
    Int             shift and go to state 4
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    block_item                     shift and go to state 16
    statement                      shift and go to state 17
    declaration                    shift and go to state 18
    statement_matched              shift and go to state 19
    statement_unmatched            shift and go to state 20
    expression                     shift and go to state 23
    opt_expression                 shift and go to state 25
    type                           shift and go to state 11
    empty                          shift and go to state 30
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 53

    (8) block_item -> declaration Semi .

    RBrace          reduce using rule 8 (block_item -> declaration Semi .)
    Do              reduce using rule 8 (block_item -> declaration Semi .)
    For             reduce using rule 8 (block_item -> declaration Semi .)
    If              reduce using rule 8 (block_item -> declaration Semi .)
    While           reduce using rule 8 (block_item -> declaration Semi .)
    Return          reduce using rule 8 (block_item -> declaration Semi .)
    LBrace          reduce using rule 8 (block_item -> declaration Semi .)
    Break           reduce using rule 8 (block_item -> declaration Semi .)
    Continue        reduce using rule 8 (block_item -> declaration Semi .)
    Int             reduce using rule 8 (block_item -> declaration Semi .)
    Identifier      reduce using rule 8 (block_item -> declaration Semi .)
    Minus           reduce using rule 8 (block_item -> declaration Semi .)
    BitNot          reduce using rule 8 (block_item -> declaration Semi .)
    Not             reduce using rule 8 (block_item -> declaration Semi .)
    Integer         reduce using rule 8 (block_item -> declaration Semi .)
    LParen          reduce using rule 8 (block_item -> declaration Semi .)
    Semi            reduce using rule 8 (block_item -> declaration Semi .)
    RParen          reduce using rule 8 (block_item -> declaration Semi .)


state 54

    (16) statement -> Do statement . While LParen expression RParen

    While           shift and go to state 87


state 55

    (14) statement_matched -> While LParen . expression RParen statement_matched
    (15) statement_unmatched -> While LParen . expression RParen statement_unmatched
    (27) expression -> . assignment
    (28) assignment -> . conditional
    (44) assignment -> . Identifier Assign expression
    (29) conditional -> . logical_or
    (61) conditional -> . logical_or Question expression Colon conditional
    (30) logical_or -> . logical_and
    (45) logical_or -> . logical_or Or logical_and
    (31) logical_and -> . bit_or
    (46) logical_and -> . logical_and And bit_or
    (32) bit_or -> . xor
    (47) bit_or -> . bit_or BitOr xor
    (33) xor -> . bit_and
    (48) xor -> . xor Xor bit_and
    (34) bit_and -> . equality
    (49) bit_and -> . bit_and BitAnd equality
    (35) equality -> . relational
    (50) equality -> . equality NotEqual relational
    (51) equality -> . equality Equal relational
    (36) relational -> . additive
    (52) relational -> . relational Less additive
    (53) relational -> . relational Greater additive
    (54) relational -> . relational LessEqual additive
    (55) relational -> . relational GreaterEqual additive
    (37) additive -> . multiplicative
    (56) additive -> . additive Plus multiplicative
    (57) additive -> . additive Minus multiplicative
    (38) multiplicative -> . unary
    (58) multiplicative -> . multiplicative Mul unary
    (59) multiplicative -> . multiplicative Div unary
    (60) multiplicative -> . multiplicative Mod unary
    (39) unary -> . postfix
    (41) unary -> . Minus unary
    (42) unary -> . BitNot unary
    (43) unary -> . Not unary
    (40) postfix -> . primary
    (62) primary -> . Integer
    (63) primary -> . Identifier
    (64) primary -> . LParen expression RParen

    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    expression                     shift and go to state 88
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 56

    (17) statement -> For LParen . block_item block_item opt_expression RParen statement
    (7) block_item -> . statement
    (8) block_item -> . declaration Semi
    (9) statement -> . statement_matched
    (10) statement -> . statement_unmatched
    (16) statement -> . Do statement While LParen expression RParen
    (17) statement -> . For LParen block_item block_item opt_expression RParen statement
    (25) declaration -> . type Identifier
    (26) declaration -> . type Identifier Assign expression
    (11) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (14) statement_matched -> . While LParen expression RParen statement_matched
    (18) statement_matched -> . Return expression Semi
    (19) statement_matched -> . opt_expression Semi
    (20) statement_matched -> . LBrace block RBrace
    (21) statement_matched -> . Break Semi
    (22) statement_matched -> . Continue Semi
    (12) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (13) statement_unmatched -> . If LParen expression RParen statement
    (15) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (3) type -> . Int
    (23) opt_expression -> . expression
    (24) opt_expression -> . empty
    (27) expression -> . assignment
    (1) empty -> .
    (28) assignment -> . conditional
    (44) assignment -> . Identifier Assign expression
    (29) conditional -> . logical_or
    (61) conditional -> . logical_or Question expression Colon conditional
    (30) logical_or -> . logical_and
    (45) logical_or -> . logical_or Or logical_and
    (31) logical_and -> . bit_or
    (46) logical_and -> . logical_and And bit_or
    (32) bit_or -> . xor
    (47) bit_or -> . bit_or BitOr xor
    (33) xor -> . bit_and
    (48) xor -> . xor Xor bit_and
    (34) bit_and -> . equality
    (49) bit_and -> . bit_and BitAnd equality
    (35) equality -> . relational
    (50) equality -> . equality NotEqual relational
    (51) equality -> . equality Equal relational
    (36) relational -> . additive
    (52) relational -> . relational Less additive
    (53) relational -> . relational Greater additive
    (54) relational -> . relational LessEqual additive
    (55) relational -> . relational GreaterEqual additive
    (37) additive -> . multiplicative
    (56) additive -> . additive Plus multiplicative
    (57) additive -> . additive Minus multiplicative
    (38) multiplicative -> . unary
    (58) multiplicative -> . multiplicative Mul unary
    (59) multiplicative -> . multiplicative Div unary
    (60) multiplicative -> . multiplicative Mod unary
    (39) unary -> . postfix
    (41) unary -> . Minus unary
    (42) unary -> . BitNot unary
    (43) unary -> . Not unary
    (40) postfix -> . primary
    (62) primary -> . Integer
    (63) primary -> . Identifier
    (64) primary -> . LParen expression RParen

    Do              shift and go to state 21
    For             shift and go to state 24
    If              shift and go to state 26
    While           shift and go to state 22
    Return          shift and go to state 27
    LBrace          shift and go to state 14
    Break           shift and go to state 28
    Continue        shift and go to state 29
    Int             shift and go to state 4
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    block_item                     shift and go to state 89
    opt_expression                 shift and go to state 25
    statement                      shift and go to state 17
    declaration                    shift and go to state 18
    statement_matched              shift and go to state 19
    statement_unmatched            shift and go to state 20
    expression                     shift and go to state 23
    type                           shift and go to state 11
    empty                          shift and go to state 30
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 57

    (19) statement_matched -> opt_expression Semi .

    RBrace          reduce using rule 19 (statement_matched -> opt_expression Semi .)
    Do              reduce using rule 19 (statement_matched -> opt_expression Semi .)
    For             reduce using rule 19 (statement_matched -> opt_expression Semi .)
    If              reduce using rule 19 (statement_matched -> opt_expression Semi .)
    While           reduce using rule 19 (statement_matched -> opt_expression Semi .)
    Return          reduce using rule 19 (statement_matched -> opt_expression Semi .)
    LBrace          reduce using rule 19 (statement_matched -> opt_expression Semi .)
    Break           reduce using rule 19 (statement_matched -> opt_expression Semi .)
    Continue        reduce using rule 19 (statement_matched -> opt_expression Semi .)
    Int             reduce using rule 19 (statement_matched -> opt_expression Semi .)
    Identifier      reduce using rule 19 (statement_matched -> opt_expression Semi .)
    Minus           reduce using rule 19 (statement_matched -> opt_expression Semi .)
    BitNot          reduce using rule 19 (statement_matched -> opt_expression Semi .)
    Not             reduce using rule 19 (statement_matched -> opt_expression Semi .)
    Integer         reduce using rule 19 (statement_matched -> opt_expression Semi .)
    LParen          reduce using rule 19 (statement_matched -> opt_expression Semi .)
    Semi            reduce using rule 19 (statement_matched -> opt_expression Semi .)
    RParen          reduce using rule 19 (statement_matched -> opt_expression Semi .)
    Else            reduce using rule 19 (statement_matched -> opt_expression Semi .)


state 58

    (11) statement_matched -> If LParen . expression RParen statement_matched Else statement_matched
    (12) statement_unmatched -> If LParen . expression RParen statement_matched Else statement_unmatched
    (13) statement_unmatched -> If LParen . expression RParen statement
    (27) expression -> . assignment
    (28) assignment -> . conditional
    (44) assignment -> . Identifier Assign expression
    (29) conditional -> . logical_or
    (61) conditional -> . logical_or Question expression Colon conditional
    (30) logical_or -> . logical_and
    (45) logical_or -> . logical_or Or logical_and
    (31) logical_and -> . bit_or
    (46) logical_and -> . logical_and And bit_or
    (32) bit_or -> . xor
    (47) bit_or -> . bit_or BitOr xor
    (33) xor -> . bit_and
    (48) xor -> . xor Xor bit_and
    (34) bit_and -> . equality
    (49) bit_and -> . bit_and BitAnd equality
    (35) equality -> . relational
    (50) equality -> . equality NotEqual relational
    (51) equality -> . equality Equal relational
    (36) relational -> . additive
    (52) relational -> . relational Less additive
    (53) relational -> . relational Greater additive
    (54) relational -> . relational LessEqual additive
    (55) relational -> . relational GreaterEqual additive
    (37) additive -> . multiplicative
    (56) additive -> . additive Plus multiplicative
    (57) additive -> . additive Minus multiplicative
    (38) multiplicative -> . unary
    (58) multiplicative -> . multiplicative Mul unary
    (59) multiplicative -> . multiplicative Div unary
    (60) multiplicative -> . multiplicative Mod unary
    (39) unary -> . postfix
    (41) unary -> . Minus unary
    (42) unary -> . BitNot unary
    (43) unary -> . Not unary
    (40) postfix -> . primary
    (62) primary -> . Integer
    (63) primary -> . Identifier
    (64) primary -> . LParen expression RParen

    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    expression                     shift and go to state 90
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 59

    (18) statement_matched -> Return expression . Semi

    Semi            shift and go to state 91


state 60

    (21) statement_matched -> Break Semi .

    RBrace          reduce using rule 21 (statement_matched -> Break Semi .)
    Do              reduce using rule 21 (statement_matched -> Break Semi .)
    For             reduce using rule 21 (statement_matched -> Break Semi .)
    If              reduce using rule 21 (statement_matched -> Break Semi .)
    While           reduce using rule 21 (statement_matched -> Break Semi .)
    Return          reduce using rule 21 (statement_matched -> Break Semi .)
    LBrace          reduce using rule 21 (statement_matched -> Break Semi .)
    Break           reduce using rule 21 (statement_matched -> Break Semi .)
    Continue        reduce using rule 21 (statement_matched -> Break Semi .)
    Int             reduce using rule 21 (statement_matched -> Break Semi .)
    Identifier      reduce using rule 21 (statement_matched -> Break Semi .)
    Minus           reduce using rule 21 (statement_matched -> Break Semi .)
    BitNot          reduce using rule 21 (statement_matched -> Break Semi .)
    Not             reduce using rule 21 (statement_matched -> Break Semi .)
    Integer         reduce using rule 21 (statement_matched -> Break Semi .)
    LParen          reduce using rule 21 (statement_matched -> Break Semi .)
    Semi            reduce using rule 21 (statement_matched -> Break Semi .)
    RParen          reduce using rule 21 (statement_matched -> Break Semi .)
    Else            reduce using rule 21 (statement_matched -> Break Semi .)


state 61

    (22) statement_matched -> Continue Semi .

    RBrace          reduce using rule 22 (statement_matched -> Continue Semi .)
    Do              reduce using rule 22 (statement_matched -> Continue Semi .)
    For             reduce using rule 22 (statement_matched -> Continue Semi .)
    If              reduce using rule 22 (statement_matched -> Continue Semi .)
    While           reduce using rule 22 (statement_matched -> Continue Semi .)
    Return          reduce using rule 22 (statement_matched -> Continue Semi .)
    LBrace          reduce using rule 22 (statement_matched -> Continue Semi .)
    Break           reduce using rule 22 (statement_matched -> Continue Semi .)
    Continue        reduce using rule 22 (statement_matched -> Continue Semi .)
    Int             reduce using rule 22 (statement_matched -> Continue Semi .)
    Identifier      reduce using rule 22 (statement_matched -> Continue Semi .)
    Minus           reduce using rule 22 (statement_matched -> Continue Semi .)
    BitNot          reduce using rule 22 (statement_matched -> Continue Semi .)
    Not             reduce using rule 22 (statement_matched -> Continue Semi .)
    Integer         reduce using rule 22 (statement_matched -> Continue Semi .)
    LParen          reduce using rule 22 (statement_matched -> Continue Semi .)
    Semi            reduce using rule 22 (statement_matched -> Continue Semi .)
    RParen          reduce using rule 22 (statement_matched -> Continue Semi .)
    Else            reduce using rule 22 (statement_matched -> Continue Semi .)


state 62

    (61) conditional -> logical_or Question . expression Colon conditional
    (27) expression -> . assignment
    (28) assignment -> . conditional
    (44) assignment -> . Identifier Assign expression
    (29) conditional -> . logical_or
    (61) conditional -> . logical_or Question expression Colon conditional
    (30) logical_or -> . logical_and
    (45) logical_or -> . logical_or Or logical_and
    (31) logical_and -> . bit_or
    (46) logical_and -> . logical_and And bit_or
    (32) bit_or -> . xor
    (47) bit_or -> . bit_or BitOr xor
    (33) xor -> . bit_and
    (48) xor -> . xor Xor bit_and
    (34) bit_and -> . equality
    (49) bit_and -> . bit_and BitAnd equality
    (35) equality -> . relational
    (50) equality -> . equality NotEqual relational
    (51) equality -> . equality Equal relational
    (36) relational -> . additive
    (52) relational -> . relational Less additive
    (53) relational -> . relational Greater additive
    (54) relational -> . relational LessEqual additive
    (55) relational -> . relational GreaterEqual additive
    (37) additive -> . multiplicative
    (56) additive -> . additive Plus multiplicative
    (57) additive -> . additive Minus multiplicative
    (38) multiplicative -> . unary
    (58) multiplicative -> . multiplicative Mul unary
    (59) multiplicative -> . multiplicative Div unary
    (60) multiplicative -> . multiplicative Mod unary
    (39) unary -> . postfix
    (41) unary -> . Minus unary
    (42) unary -> . BitNot unary
    (43) unary -> . Not unary
    (40) postfix -> . primary
    (62) primary -> . Integer
    (63) primary -> . Identifier
    (64) primary -> . LParen expression RParen

    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    logical_or                     shift and go to state 33
    expression                     shift and go to state 92
    conditional                    shift and go to state 32
    assignment                     shift and go to state 31
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 63

    (45) logical_or -> logical_or Or . logical_and
    (31) logical_and -> . bit_or
    (46) logical_and -> . logical_and And bit_or
    (32) bit_or -> . xor
    (47) bit_or -> . bit_or BitOr xor
    (33) xor -> . bit_and
    (48) xor -> . xor Xor bit_and
    (34) bit_and -> . equality
    (49) bit_and -> . bit_and BitAnd equality
    (35) equality -> . relational
    (50) equality -> . equality NotEqual relational
    (51) equality -> . equality Equal relational
    (36) relational -> . additive
    (52) relational -> . relational Less additive
    (53) relational -> . relational Greater additive
    (54) relational -> . relational LessEqual additive
    (55) relational -> . relational GreaterEqual additive
    (37) additive -> . multiplicative
    (56) additive -> . additive Plus multiplicative
    (57) additive -> . additive Minus multiplicative
    (38) multiplicative -> . unary
    (58) multiplicative -> . multiplicative Mul unary
    (59) multiplicative -> . multiplicative Div unary
    (60) multiplicative -> . multiplicative Mod unary
    (39) unary -> . postfix
    (41) unary -> . Minus unary
    (42) unary -> . BitNot unary
    (43) unary -> . Not unary
    (40) postfix -> . primary
    (62) primary -> . Integer
    (63) primary -> . Identifier
    (64) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 80
    LParen          shift and go to state 13

    logical_and                    shift and go to state 93
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 64

    (46) logical_and -> logical_and And . bit_or
    (32) bit_or -> . xor
    (47) bit_or -> . bit_or BitOr xor
    (33) xor -> . bit_and
    (48) xor -> . xor Xor bit_and
    (34) bit_and -> . equality
    (49) bit_and -> . bit_and BitAnd equality
    (35) equality -> . relational
    (50) equality -> . equality NotEqual relational
    (51) equality -> . equality Equal relational
    (36) relational -> . additive
    (52) relational -> . relational Less additive
    (53) relational -> . relational Greater additive
    (54) relational -> . relational LessEqual additive
    (55) relational -> . relational GreaterEqual additive
    (37) additive -> . multiplicative
    (56) additive -> . additive Plus multiplicative
    (57) additive -> . additive Minus multiplicative
    (38) multiplicative -> . unary
    (58) multiplicative -> . multiplicative Mul unary
    (59) multiplicative -> . multiplicative Div unary
    (60) multiplicative -> . multiplicative Mod unary
    (39) unary -> . postfix
    (41) unary -> . Minus unary
    (42) unary -> . BitNot unary
    (43) unary -> . Not unary
    (40) postfix -> . primary
    (62) primary -> . Integer
    (63) primary -> . Identifier
    (64) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 80
    LParen          shift and go to state 13

    bit_or                         shift and go to state 94
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 65

    (47) bit_or -> bit_or BitOr . xor
    (33) xor -> . bit_and
    (48) xor -> . xor Xor bit_and
    (34) bit_and -> . equality
    (49) bit_and -> . bit_and BitAnd equality
    (35) equality -> . relational
    (50) equality -> . equality NotEqual relational
    (51) equality -> . equality Equal relational
    (36) relational -> . additive
    (52) relational -> . relational Less additive
    (53) relational -> . relational Greater additive
    (54) relational -> . relational LessEqual additive
    (55) relational -> . relational GreaterEqual additive
    (37) additive -> . multiplicative
    (56) additive -> . additive Plus multiplicative
    (57) additive -> . additive Minus multiplicative
    (38) multiplicative -> . unary
    (58) multiplicative -> . multiplicative Mul unary
    (59) multiplicative -> . multiplicative Div unary
    (60) multiplicative -> . multiplicative Mod unary
    (39) unary -> . postfix
    (41) unary -> . Minus unary
    (42) unary -> . BitNot unary
    (43) unary -> . Not unary
    (40) postfix -> . primary
    (62) primary -> . Integer
    (63) primary -> . Identifier
    (64) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 80
    LParen          shift and go to state 13

    xor                            shift and go to state 95
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 66

    (48) xor -> xor Xor . bit_and
    (34) bit_and -> . equality
    (49) bit_and -> . bit_and BitAnd equality
    (35) equality -> . relational
    (50) equality -> . equality NotEqual relational
    (51) equality -> . equality Equal relational
    (36) relational -> . additive
    (52) relational -> . relational Less additive
    (53) relational -> . relational Greater additive
    (54) relational -> . relational LessEqual additive
    (55) relational -> . relational GreaterEqual additive
    (37) additive -> . multiplicative
    (56) additive -> . additive Plus multiplicative
    (57) additive -> . additive Minus multiplicative
    (38) multiplicative -> . unary
    (58) multiplicative -> . multiplicative Mul unary
    (59) multiplicative -> . multiplicative Div unary
    (60) multiplicative -> . multiplicative Mod unary
    (39) unary -> . postfix
    (41) unary -> . Minus unary
    (42) unary -> . BitNot unary
    (43) unary -> . Not unary
    (40) postfix -> . primary
    (62) primary -> . Integer
    (63) primary -> . Identifier
    (64) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 80
    LParen          shift and go to state 13

    bit_and                        shift and go to state 96
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 67

    (49) bit_and -> bit_and BitAnd . equality
    (35) equality -> . relational
    (50) equality -> . equality NotEqual relational
    (51) equality -> . equality Equal relational
    (36) relational -> . additive
    (52) relational -> . relational Less additive
    (53) relational -> . relational Greater additive
    (54) relational -> . relational LessEqual additive
    (55) relational -> . relational GreaterEqual additive
    (37) additive -> . multiplicative
    (56) additive -> . additive Plus multiplicative
    (57) additive -> . additive Minus multiplicative
    (38) multiplicative -> . unary
    (58) multiplicative -> . multiplicative Mul unary
    (59) multiplicative -> . multiplicative Div unary
    (60) multiplicative -> . multiplicative Mod unary
    (39) unary -> . postfix
    (41) unary -> . Minus unary
    (42) unary -> . BitNot unary
    (43) unary -> . Not unary
    (40) postfix -> . primary
    (62) primary -> . Integer
    (63) primary -> . Identifier
    (64) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 80
    LParen          shift and go to state 13

    equality                       shift and go to state 97
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 68

    (50) equality -> equality NotEqual . relational
    (36) relational -> . additive
    (52) relational -> . relational Less additive
    (53) relational -> . relational Greater additive
    (54) relational -> . relational LessEqual additive
    (55) relational -> . relational GreaterEqual additive
    (37) additive -> . multiplicative
    (56) additive -> . additive Plus multiplicative
    (57) additive -> . additive Minus multiplicative
    (38) multiplicative -> . unary
    (58) multiplicative -> . multiplicative Mul unary
    (59) multiplicative -> . multiplicative Div unary
    (60) multiplicative -> . multiplicative Mod unary
    (39) unary -> . postfix
    (41) unary -> . Minus unary
    (42) unary -> . BitNot unary
    (43) unary -> . Not unary
    (40) postfix -> . primary
    (62) primary -> . Integer
    (63) primary -> . Identifier
    (64) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 80
    LParen          shift and go to state 13

    relational                     shift and go to state 98
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 69

    (51) equality -> equality Equal . relational
    (36) relational -> . additive
    (52) relational -> . relational Less additive
    (53) relational -> . relational Greater additive
    (54) relational -> . relational LessEqual additive
    (55) relational -> . relational GreaterEqual additive
    (37) additive -> . multiplicative
    (56) additive -> . additive Plus multiplicative
    (57) additive -> . additive Minus multiplicative
    (38) multiplicative -> . unary
    (58) multiplicative -> . multiplicative Mul unary
    (59) multiplicative -> . multiplicative Div unary
    (60) multiplicative -> . multiplicative Mod unary
    (39) unary -> . postfix
    (41) unary -> . Minus unary
    (42) unary -> . BitNot unary
    (43) unary -> . Not unary
    (40) postfix -> . primary
    (62) primary -> . Integer
    (63) primary -> . Identifier
    (64) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 80
    LParen          shift and go to state 13

    relational                     shift and go to state 99
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 70

    (52) relational -> relational Less . additive
    (37) additive -> . multiplicative
    (56) additive -> . additive Plus multiplicative
    (57) additive -> . additive Minus multiplicative
    (38) multiplicative -> . unary
    (58) multiplicative -> . multiplicative Mul unary
    (59) multiplicative -> . multiplicative Div unary
    (60) multiplicative -> . multiplicative Mod unary
    (39) unary -> . postfix
    (41) unary -> . Minus unary
    (42) unary -> . BitNot unary
    (43) unary -> . Not unary
    (40) postfix -> . primary
    (62) primary -> . Integer
    (63) primary -> . Identifier
    (64) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 80
    LParen          shift and go to state 13

    additive                       shift and go to state 100
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 71

    (53) relational -> relational Greater . additive
    (37) additive -> . multiplicative
    (56) additive -> . additive Plus multiplicative
    (57) additive -> . additive Minus multiplicative
    (38) multiplicative -> . unary
    (58) multiplicative -> . multiplicative Mul unary
    (59) multiplicative -> . multiplicative Div unary
    (60) multiplicative -> . multiplicative Mod unary
    (39) unary -> . postfix
    (41) unary -> . Minus unary
    (42) unary -> . BitNot unary
    (43) unary -> . Not unary
    (40) postfix -> . primary
    (62) primary -> . Integer
    (63) primary -> . Identifier
    (64) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 80
    LParen          shift and go to state 13

    additive                       shift and go to state 101
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 72

    (54) relational -> relational LessEqual . additive
    (37) additive -> . multiplicative
    (56) additive -> . additive Plus multiplicative
    (57) additive -> . additive Minus multiplicative
    (38) multiplicative -> . unary
    (58) multiplicative -> . multiplicative Mul unary
    (59) multiplicative -> . multiplicative Div unary
    (60) multiplicative -> . multiplicative Mod unary
    (39) unary -> . postfix
    (41) unary -> . Minus unary
    (42) unary -> . BitNot unary
    (43) unary -> . Not unary
    (40) postfix -> . primary
    (62) primary -> . Integer
    (63) primary -> . Identifier
    (64) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 80
    LParen          shift and go to state 13

    additive                       shift and go to state 102
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 73

    (55) relational -> relational GreaterEqual . additive
    (37) additive -> . multiplicative
    (56) additive -> . additive Plus multiplicative
    (57) additive -> . additive Minus multiplicative
    (38) multiplicative -> . unary
    (58) multiplicative -> . multiplicative Mul unary
    (59) multiplicative -> . multiplicative Div unary
    (60) multiplicative -> . multiplicative Mod unary
    (39) unary -> . postfix
    (41) unary -> . Minus unary
    (42) unary -> . BitNot unary
    (43) unary -> . Not unary
    (40) postfix -> . primary
    (62) primary -> . Integer
    (63) primary -> . Identifier
    (64) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 80
    LParen          shift and go to state 13

    additive                       shift and go to state 103
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 74

    (56) additive -> additive Plus . multiplicative
    (38) multiplicative -> . unary
    (58) multiplicative -> . multiplicative Mul unary
    (59) multiplicative -> . multiplicative Div unary
    (60) multiplicative -> . multiplicative Mod unary
    (39) unary -> . postfix
    (41) unary -> . Minus unary
    (42) unary -> . BitNot unary
    (43) unary -> . Not unary
    (40) postfix -> . primary
    (62) primary -> . Integer
    (63) primary -> . Identifier
    (64) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 80
    LParen          shift and go to state 13

    multiplicative                 shift and go to state 104
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 75

    (57) additive -> additive Minus . multiplicative
    (38) multiplicative -> . unary
    (58) multiplicative -> . multiplicative Mul unary
    (59) multiplicative -> . multiplicative Div unary
    (60) multiplicative -> . multiplicative Mod unary
    (39) unary -> . postfix
    (41) unary -> . Minus unary
    (42) unary -> . BitNot unary
    (43) unary -> . Not unary
    (40) postfix -> . primary
    (62) primary -> . Integer
    (63) primary -> . Identifier
    (64) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 80
    LParen          shift and go to state 13

    multiplicative                 shift and go to state 105
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 76

    (58) multiplicative -> multiplicative Mul . unary
    (39) unary -> . postfix
    (41) unary -> . Minus unary
    (42) unary -> . BitNot unary
    (43) unary -> . Not unary
    (40) postfix -> . primary
    (62) primary -> . Integer
    (63) primary -> . Identifier
    (64) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 80
    LParen          shift and go to state 13

    unary                          shift and go to state 106
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 77

    (59) multiplicative -> multiplicative Div . unary
    (39) unary -> . postfix
    (41) unary -> . Minus unary
    (42) unary -> . BitNot unary
    (43) unary -> . Not unary
    (40) postfix -> . primary
    (62) primary -> . Integer
    (63) primary -> . Identifier
    (64) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 80
    LParen          shift and go to state 13

    unary                          shift and go to state 107
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 78

    (60) multiplicative -> multiplicative Mod . unary
    (39) unary -> . postfix
    (41) unary -> . Minus unary
    (42) unary -> . BitNot unary
    (43) unary -> . Not unary
    (40) postfix -> . primary
    (62) primary -> . Integer
    (63) primary -> . Identifier
    (64) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 80
    LParen          shift and go to state 13

    unary                          shift and go to state 108
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 79

    (41) unary -> Minus unary .

    Mul             reduce using rule 41 (unary -> Minus unary .)
    Div             reduce using rule 41 (unary -> Minus unary .)
    Mod             reduce using rule 41 (unary -> Minus unary .)
    Plus            reduce using rule 41 (unary -> Minus unary .)
    Minus           reduce using rule 41 (unary -> Minus unary .)
    Less            reduce using rule 41 (unary -> Minus unary .)
    Greater         reduce using rule 41 (unary -> Minus unary .)
    LessEqual       reduce using rule 41 (unary -> Minus unary .)
    GreaterEqual    reduce using rule 41 (unary -> Minus unary .)
    NotEqual        reduce using rule 41 (unary -> Minus unary .)
    Equal           reduce using rule 41 (unary -> Minus unary .)
    BitAnd          reduce using rule 41 (unary -> Minus unary .)
    Xor             reduce using rule 41 (unary -> Minus unary .)
    BitOr           reduce using rule 41 (unary -> Minus unary .)
    And             reduce using rule 41 (unary -> Minus unary .)
    Question        reduce using rule 41 (unary -> Minus unary .)
    Or              reduce using rule 41 (unary -> Minus unary .)
    Semi            reduce using rule 41 (unary -> Minus unary .)
    RParen          reduce using rule 41 (unary -> Minus unary .)
    Colon           reduce using rule 41 (unary -> Minus unary .)


state 80

    (63) primary -> Identifier .

    Mul             reduce using rule 63 (primary -> Identifier .)
    Div             reduce using rule 63 (primary -> Identifier .)
    Mod             reduce using rule 63 (primary -> Identifier .)
    Plus            reduce using rule 63 (primary -> Identifier .)
    Minus           reduce using rule 63 (primary -> Identifier .)
    Less            reduce using rule 63 (primary -> Identifier .)
    Greater         reduce using rule 63 (primary -> Identifier .)
    LessEqual       reduce using rule 63 (primary -> Identifier .)
    GreaterEqual    reduce using rule 63 (primary -> Identifier .)
    NotEqual        reduce using rule 63 (primary -> Identifier .)
    Equal           reduce using rule 63 (primary -> Identifier .)
    BitAnd          reduce using rule 63 (primary -> Identifier .)
    Xor             reduce using rule 63 (primary -> Identifier .)
    BitOr           reduce using rule 63 (primary -> Identifier .)
    And             reduce using rule 63 (primary -> Identifier .)
    Question        reduce using rule 63 (primary -> Identifier .)
    Or              reduce using rule 63 (primary -> Identifier .)
    Semi            reduce using rule 63 (primary -> Identifier .)
    RParen          reduce using rule 63 (primary -> Identifier .)
    Colon           reduce using rule 63 (primary -> Identifier .)


state 81

    (42) unary -> BitNot unary .

    Mul             reduce using rule 42 (unary -> BitNot unary .)
    Div             reduce using rule 42 (unary -> BitNot unary .)
    Mod             reduce using rule 42 (unary -> BitNot unary .)
    Plus            reduce using rule 42 (unary -> BitNot unary .)
    Minus           reduce using rule 42 (unary -> BitNot unary .)
    Less            reduce using rule 42 (unary -> BitNot unary .)
    Greater         reduce using rule 42 (unary -> BitNot unary .)
    LessEqual       reduce using rule 42 (unary -> BitNot unary .)
    GreaterEqual    reduce using rule 42 (unary -> BitNot unary .)
    NotEqual        reduce using rule 42 (unary -> BitNot unary .)
    Equal           reduce using rule 42 (unary -> BitNot unary .)
    BitAnd          reduce using rule 42 (unary -> BitNot unary .)
    Xor             reduce using rule 42 (unary -> BitNot unary .)
    BitOr           reduce using rule 42 (unary -> BitNot unary .)
    And             reduce using rule 42 (unary -> BitNot unary .)
    Question        reduce using rule 42 (unary -> BitNot unary .)
    Or              reduce using rule 42 (unary -> BitNot unary .)
    Semi            reduce using rule 42 (unary -> BitNot unary .)
    RParen          reduce using rule 42 (unary -> BitNot unary .)
    Colon           reduce using rule 42 (unary -> BitNot unary .)


state 82

    (43) unary -> Not unary .

    Mul             reduce using rule 43 (unary -> Not unary .)
    Div             reduce using rule 43 (unary -> Not unary .)
    Mod             reduce using rule 43 (unary -> Not unary .)
    Plus            reduce using rule 43 (unary -> Not unary .)
    Minus           reduce using rule 43 (unary -> Not unary .)
    Less            reduce using rule 43 (unary -> Not unary .)
    Greater         reduce using rule 43 (unary -> Not unary .)
    LessEqual       reduce using rule 43 (unary -> Not unary .)
    GreaterEqual    reduce using rule 43 (unary -> Not unary .)
    NotEqual        reduce using rule 43 (unary -> Not unary .)
    Equal           reduce using rule 43 (unary -> Not unary .)
    BitAnd          reduce using rule 43 (unary -> Not unary .)
    Xor             reduce using rule 43 (unary -> Not unary .)
    BitOr           reduce using rule 43 (unary -> Not unary .)
    And             reduce using rule 43 (unary -> Not unary .)
    Question        reduce using rule 43 (unary -> Not unary .)
    Or              reduce using rule 43 (unary -> Not unary .)
    Semi            reduce using rule 43 (unary -> Not unary .)
    RParen          reduce using rule 43 (unary -> Not unary .)
    Colon           reduce using rule 43 (unary -> Not unary .)


state 83

    (26) declaration -> type Identifier Assign . expression
    (27) expression -> . assignment
    (28) assignment -> . conditional
    (44) assignment -> . Identifier Assign expression
    (29) conditional -> . logical_or
    (61) conditional -> . logical_or Question expression Colon conditional
    (30) logical_or -> . logical_and
    (45) logical_or -> . logical_or Or logical_and
    (31) logical_and -> . bit_or
    (46) logical_and -> . logical_and And bit_or
    (32) bit_or -> . xor
    (47) bit_or -> . bit_or BitOr xor
    (33) xor -> . bit_and
    (48) xor -> . xor Xor bit_and
    (34) bit_and -> . equality
    (49) bit_and -> . bit_and BitAnd equality
    (35) equality -> . relational
    (50) equality -> . equality NotEqual relational
    (51) equality -> . equality Equal relational
    (36) relational -> . additive
    (52) relational -> . relational Less additive
    (53) relational -> . relational Greater additive
    (54) relational -> . relational LessEqual additive
    (55) relational -> . relational GreaterEqual additive
    (37) additive -> . multiplicative
    (56) additive -> . additive Plus multiplicative
    (57) additive -> . additive Minus multiplicative
    (38) multiplicative -> . unary
    (58) multiplicative -> . multiplicative Mul unary
    (59) multiplicative -> . multiplicative Div unary
    (60) multiplicative -> . multiplicative Mod unary
    (39) unary -> . postfix
    (41) unary -> . Minus unary
    (42) unary -> . BitNot unary
    (43) unary -> . Not unary
    (40) postfix -> . primary
    (62) primary -> . Integer
    (63) primary -> . Identifier
    (64) primary -> . LParen expression RParen

    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    expression                     shift and go to state 109
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 84

    (44) assignment -> Identifier Assign expression .

    Semi            reduce using rule 44 (assignment -> Identifier Assign expression .)
    RParen          reduce using rule 44 (assignment -> Identifier Assign expression .)
    Colon           reduce using rule 44 (assignment -> Identifier Assign expression .)


state 85

    (64) primary -> LParen expression RParen .

    Mul             reduce using rule 64 (primary -> LParen expression RParen .)
    Div             reduce using rule 64 (primary -> LParen expression RParen .)
    Mod             reduce using rule 64 (primary -> LParen expression RParen .)
    Plus            reduce using rule 64 (primary -> LParen expression RParen .)
    Minus           reduce using rule 64 (primary -> LParen expression RParen .)
    Less            reduce using rule 64 (primary -> LParen expression RParen .)
    Greater         reduce using rule 64 (primary -> LParen expression RParen .)
    LessEqual       reduce using rule 64 (primary -> LParen expression RParen .)
    GreaterEqual    reduce using rule 64 (primary -> LParen expression RParen .)
    NotEqual        reduce using rule 64 (primary -> LParen expression RParen .)
    Equal           reduce using rule 64 (primary -> LParen expression RParen .)
    BitAnd          reduce using rule 64 (primary -> LParen expression RParen .)
    Xor             reduce using rule 64 (primary -> LParen expression RParen .)
    BitOr           reduce using rule 64 (primary -> LParen expression RParen .)
    And             reduce using rule 64 (primary -> LParen expression RParen .)
    Question        reduce using rule 64 (primary -> LParen expression RParen .)
    Or              reduce using rule 64 (primary -> LParen expression RParen .)
    Semi            reduce using rule 64 (primary -> LParen expression RParen .)
    RParen          reduce using rule 64 (primary -> LParen expression RParen .)
    Colon           reduce using rule 64 (primary -> LParen expression RParen .)


state 86

    (20) statement_matched -> LBrace block RBrace .

    RBrace          reduce using rule 20 (statement_matched -> LBrace block RBrace .)
    Do              reduce using rule 20 (statement_matched -> LBrace block RBrace .)
    For             reduce using rule 20 (statement_matched -> LBrace block RBrace .)
    If              reduce using rule 20 (statement_matched -> LBrace block RBrace .)
    While           reduce using rule 20 (statement_matched -> LBrace block RBrace .)
    Return          reduce using rule 20 (statement_matched -> LBrace block RBrace .)
    LBrace          reduce using rule 20 (statement_matched -> LBrace block RBrace .)
    Break           reduce using rule 20 (statement_matched -> LBrace block RBrace .)
    Continue        reduce using rule 20 (statement_matched -> LBrace block RBrace .)
    Int             reduce using rule 20 (statement_matched -> LBrace block RBrace .)
    Identifier      reduce using rule 20 (statement_matched -> LBrace block RBrace .)
    Minus           reduce using rule 20 (statement_matched -> LBrace block RBrace .)
    BitNot          reduce using rule 20 (statement_matched -> LBrace block RBrace .)
    Not             reduce using rule 20 (statement_matched -> LBrace block RBrace .)
    Integer         reduce using rule 20 (statement_matched -> LBrace block RBrace .)
    LParen          reduce using rule 20 (statement_matched -> LBrace block RBrace .)
    Semi            reduce using rule 20 (statement_matched -> LBrace block RBrace .)
    RParen          reduce using rule 20 (statement_matched -> LBrace block RBrace .)
    Else            reduce using rule 20 (statement_matched -> LBrace block RBrace .)


state 87

    (16) statement -> Do statement While . LParen expression RParen

    LParen          shift and go to state 110


state 88

    (14) statement_matched -> While LParen expression . RParen statement_matched
    (15) statement_unmatched -> While LParen expression . RParen statement_unmatched

    RParen          shift and go to state 111


state 89

    (17) statement -> For LParen block_item . block_item opt_expression RParen statement
    (7) block_item -> . statement
    (8) block_item -> . declaration Semi
    (9) statement -> . statement_matched
    (10) statement -> . statement_unmatched
    (16) statement -> . Do statement While LParen expression RParen
    (17) statement -> . For LParen block_item block_item opt_expression RParen statement
    (25) declaration -> . type Identifier
    (26) declaration -> . type Identifier Assign expression
    (11) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (14) statement_matched -> . While LParen expression RParen statement_matched
    (18) statement_matched -> . Return expression Semi
    (19) statement_matched -> . opt_expression Semi
    (20) statement_matched -> . LBrace block RBrace
    (21) statement_matched -> . Break Semi
    (22) statement_matched -> . Continue Semi
    (12) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (13) statement_unmatched -> . If LParen expression RParen statement
    (15) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (3) type -> . Int
    (23) opt_expression -> . expression
    (24) opt_expression -> . empty
    (27) expression -> . assignment
    (1) empty -> .
    (28) assignment -> . conditional
    (44) assignment -> . Identifier Assign expression
    (29) conditional -> . logical_or
    (61) conditional -> . logical_or Question expression Colon conditional
    (30) logical_or -> . logical_and
    (45) logical_or -> . logical_or Or logical_and
    (31) logical_and -> . bit_or
    (46) logical_and -> . logical_and And bit_or
    (32) bit_or -> . xor
    (47) bit_or -> . bit_or BitOr xor
    (33) xor -> . bit_and
    (48) xor -> . xor Xor bit_and
    (34) bit_and -> . equality
    (49) bit_and -> . bit_and BitAnd equality
    (35) equality -> . relational
    (50) equality -> . equality NotEqual relational
    (51) equality -> . equality Equal relational
    (36) relational -> . additive
    (52) relational -> . relational Less additive
    (53) relational -> . relational Greater additive
    (54) relational -> . relational LessEqual additive
    (55) relational -> . relational GreaterEqual additive
    (37) additive -> . multiplicative
    (56) additive -> . additive Plus multiplicative
    (57) additive -> . additive Minus multiplicative
    (38) multiplicative -> . unary
    (58) multiplicative -> . multiplicative Mul unary
    (59) multiplicative -> . multiplicative Div unary
    (60) multiplicative -> . multiplicative Mod unary
    (39) unary -> . postfix
    (41) unary -> . Minus unary
    (42) unary -> . BitNot unary
    (43) unary -> . Not unary
    (40) postfix -> . primary
    (62) primary -> . Integer
    (63) primary -> . Identifier
    (64) primary -> . LParen expression RParen

    Do              shift and go to state 21
    For             shift and go to state 24
    If              shift and go to state 26
    While           shift and go to state 22
    Return          shift and go to state 27
    LBrace          shift and go to state 14
    Break           shift and go to state 28
    Continue        shift and go to state 29
    Int             shift and go to state 4
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    block_item                     shift and go to state 112
    opt_expression                 shift and go to state 25
    statement                      shift and go to state 17
    declaration                    shift and go to state 18
    statement_matched              shift and go to state 19
    statement_unmatched            shift and go to state 20
    expression                     shift and go to state 23
    type                           shift and go to state 11
    empty                          shift and go to state 30
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 90

    (11) statement_matched -> If LParen expression . RParen statement_matched Else statement_matched
    (12) statement_unmatched -> If LParen expression . RParen statement_matched Else statement_unmatched
    (13) statement_unmatched -> If LParen expression . RParen statement

    RParen          shift and go to state 113


state 91

    (18) statement_matched -> Return expression Semi .

    RBrace          reduce using rule 18 (statement_matched -> Return expression Semi .)
    Do              reduce using rule 18 (statement_matched -> Return expression Semi .)
    For             reduce using rule 18 (statement_matched -> Return expression Semi .)
    If              reduce using rule 18 (statement_matched -> Return expression Semi .)
    While           reduce using rule 18 (statement_matched -> Return expression Semi .)
    Return          reduce using rule 18 (statement_matched -> Return expression Semi .)
    LBrace          reduce using rule 18 (statement_matched -> Return expression Semi .)
    Break           reduce using rule 18 (statement_matched -> Return expression Semi .)
    Continue        reduce using rule 18 (statement_matched -> Return expression Semi .)
    Int             reduce using rule 18 (statement_matched -> Return expression Semi .)
    Identifier      reduce using rule 18 (statement_matched -> Return expression Semi .)
    Minus           reduce using rule 18 (statement_matched -> Return expression Semi .)
    BitNot          reduce using rule 18 (statement_matched -> Return expression Semi .)
    Not             reduce using rule 18 (statement_matched -> Return expression Semi .)
    Integer         reduce using rule 18 (statement_matched -> Return expression Semi .)
    LParen          reduce using rule 18 (statement_matched -> Return expression Semi .)
    Semi            reduce using rule 18 (statement_matched -> Return expression Semi .)
    RParen          reduce using rule 18 (statement_matched -> Return expression Semi .)
    Else            reduce using rule 18 (statement_matched -> Return expression Semi .)


state 92

    (61) conditional -> logical_or Question expression . Colon conditional

    Colon           shift and go to state 114


state 93

    (45) logical_or -> logical_or Or logical_and .
    (46) logical_and -> logical_and . And bit_or

    Question        reduce using rule 45 (logical_or -> logical_or Or logical_and .)
    Or              reduce using rule 45 (logical_or -> logical_or Or logical_and .)
    Semi            reduce using rule 45 (logical_or -> logical_or Or logical_and .)
    RParen          reduce using rule 45 (logical_or -> logical_or Or logical_and .)
    Colon           reduce using rule 45 (logical_or -> logical_or Or logical_and .)
    And             shift and go to state 64


state 94

    (46) logical_and -> logical_and And bit_or .
    (47) bit_or -> bit_or . BitOr xor

    And             reduce using rule 46 (logical_and -> logical_and And bit_or .)
    Question        reduce using rule 46 (logical_and -> logical_and And bit_or .)
    Or              reduce using rule 46 (logical_and -> logical_and And bit_or .)
    Semi            reduce using rule 46 (logical_and -> logical_and And bit_or .)
    RParen          reduce using rule 46 (logical_and -> logical_and And bit_or .)
    Colon           reduce using rule 46 (logical_and -> logical_and And bit_or .)
    BitOr           shift and go to state 65


state 95

    (47) bit_or -> bit_or BitOr xor .
    (48) xor -> xor . Xor bit_and

    BitOr           reduce using rule 47 (bit_or -> bit_or BitOr xor .)
    And             reduce using rule 47 (bit_or -> bit_or BitOr xor .)
    Question        reduce using rule 47 (bit_or -> bit_or BitOr xor .)
    Or              reduce using rule 47 (bit_or -> bit_or BitOr xor .)
    Semi            reduce using rule 47 (bit_or -> bit_or BitOr xor .)
    RParen          reduce using rule 47 (bit_or -> bit_or BitOr xor .)
    Colon           reduce using rule 47 (bit_or -> bit_or BitOr xor .)
    Xor             shift and go to state 66


state 96

    (48) xor -> xor Xor bit_and .
    (49) bit_and -> bit_and . BitAnd equality

    Xor             reduce using rule 48 (xor -> xor Xor bit_and .)
    BitOr           reduce using rule 48 (xor -> xor Xor bit_and .)
    And             reduce using rule 48 (xor -> xor Xor bit_and .)
    Question        reduce using rule 48 (xor -> xor Xor bit_and .)
    Or              reduce using rule 48 (xor -> xor Xor bit_and .)
    Semi            reduce using rule 48 (xor -> xor Xor bit_and .)
    RParen          reduce using rule 48 (xor -> xor Xor bit_and .)
    Colon           reduce using rule 48 (xor -> xor Xor bit_and .)
    BitAnd          shift and go to state 67


state 97

    (49) bit_and -> bit_and BitAnd equality .
    (50) equality -> equality . NotEqual relational
    (51) equality -> equality . Equal relational

    BitAnd          reduce using rule 49 (bit_and -> bit_and BitAnd equality .)
    Xor             reduce using rule 49 (bit_and -> bit_and BitAnd equality .)
    BitOr           reduce using rule 49 (bit_and -> bit_and BitAnd equality .)
    And             reduce using rule 49 (bit_and -> bit_and BitAnd equality .)
    Question        reduce using rule 49 (bit_and -> bit_and BitAnd equality .)
    Or              reduce using rule 49 (bit_and -> bit_and BitAnd equality .)
    Semi            reduce using rule 49 (bit_and -> bit_and BitAnd equality .)
    RParen          reduce using rule 49 (bit_and -> bit_and BitAnd equality .)
    Colon           reduce using rule 49 (bit_and -> bit_and BitAnd equality .)
    NotEqual        shift and go to state 68
    Equal           shift and go to state 69


state 98

    (50) equality -> equality NotEqual relational .
    (52) relational -> relational . Less additive
    (53) relational -> relational . Greater additive
    (54) relational -> relational . LessEqual additive
    (55) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 50 (equality -> equality NotEqual relational .)
    Equal           reduce using rule 50 (equality -> equality NotEqual relational .)
    BitAnd          reduce using rule 50 (equality -> equality NotEqual relational .)
    Xor             reduce using rule 50 (equality -> equality NotEqual relational .)
    BitOr           reduce using rule 50 (equality -> equality NotEqual relational .)
    And             reduce using rule 50 (equality -> equality NotEqual relational .)
    Question        reduce using rule 50 (equality -> equality NotEqual relational .)
    Or              reduce using rule 50 (equality -> equality NotEqual relational .)
    Semi            reduce using rule 50 (equality -> equality NotEqual relational .)
    RParen          reduce using rule 50 (equality -> equality NotEqual relational .)
    Colon           reduce using rule 50 (equality -> equality NotEqual relational .)
    Less            shift and go to state 70
    Greater         shift and go to state 71
    LessEqual       shift and go to state 72
    GreaterEqual    shift and go to state 73


state 99

    (51) equality -> equality Equal relational .
    (52) relational -> relational . Less additive
    (53) relational -> relational . Greater additive
    (54) relational -> relational . LessEqual additive
    (55) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 51 (equality -> equality Equal relational .)
    Equal           reduce using rule 51 (equality -> equality Equal relational .)
    BitAnd          reduce using rule 51 (equality -> equality Equal relational .)
    Xor             reduce using rule 51 (equality -> equality Equal relational .)
    BitOr           reduce using rule 51 (equality -> equality Equal relational .)
    And             reduce using rule 51 (equality -> equality Equal relational .)
    Question        reduce using rule 51 (equality -> equality Equal relational .)
    Or              reduce using rule 51 (equality -> equality Equal relational .)
    Semi            reduce using rule 51 (equality -> equality Equal relational .)
    RParen          reduce using rule 51 (equality -> equality Equal relational .)
    Colon           reduce using rule 51 (equality -> equality Equal relational .)
    Less            shift and go to state 70
    Greater         shift and go to state 71
    LessEqual       shift and go to state 72
    GreaterEqual    shift and go to state 73


state 100

    (52) relational -> relational Less additive .
    (56) additive -> additive . Plus multiplicative
    (57) additive -> additive . Minus multiplicative

    Less            reduce using rule 52 (relational -> relational Less additive .)
    Greater         reduce using rule 52 (relational -> relational Less additive .)
    LessEqual       reduce using rule 52 (relational -> relational Less additive .)
    GreaterEqual    reduce using rule 52 (relational -> relational Less additive .)
    NotEqual        reduce using rule 52 (relational -> relational Less additive .)
    Equal           reduce using rule 52 (relational -> relational Less additive .)
    BitAnd          reduce using rule 52 (relational -> relational Less additive .)
    Xor             reduce using rule 52 (relational -> relational Less additive .)
    BitOr           reduce using rule 52 (relational -> relational Less additive .)
    And             reduce using rule 52 (relational -> relational Less additive .)
    Question        reduce using rule 52 (relational -> relational Less additive .)
    Or              reduce using rule 52 (relational -> relational Less additive .)
    Semi            reduce using rule 52 (relational -> relational Less additive .)
    RParen          reduce using rule 52 (relational -> relational Less additive .)
    Colon           reduce using rule 52 (relational -> relational Less additive .)
    Plus            shift and go to state 74
    Minus           shift and go to state 75


state 101

    (53) relational -> relational Greater additive .
    (56) additive -> additive . Plus multiplicative
    (57) additive -> additive . Minus multiplicative

    Less            reduce using rule 53 (relational -> relational Greater additive .)
    Greater         reduce using rule 53 (relational -> relational Greater additive .)
    LessEqual       reduce using rule 53 (relational -> relational Greater additive .)
    GreaterEqual    reduce using rule 53 (relational -> relational Greater additive .)
    NotEqual        reduce using rule 53 (relational -> relational Greater additive .)
    Equal           reduce using rule 53 (relational -> relational Greater additive .)
    BitAnd          reduce using rule 53 (relational -> relational Greater additive .)
    Xor             reduce using rule 53 (relational -> relational Greater additive .)
    BitOr           reduce using rule 53 (relational -> relational Greater additive .)
    And             reduce using rule 53 (relational -> relational Greater additive .)
    Question        reduce using rule 53 (relational -> relational Greater additive .)
    Or              reduce using rule 53 (relational -> relational Greater additive .)
    Semi            reduce using rule 53 (relational -> relational Greater additive .)
    RParen          reduce using rule 53 (relational -> relational Greater additive .)
    Colon           reduce using rule 53 (relational -> relational Greater additive .)
    Plus            shift and go to state 74
    Minus           shift and go to state 75


state 102

    (54) relational -> relational LessEqual additive .
    (56) additive -> additive . Plus multiplicative
    (57) additive -> additive . Minus multiplicative

    Less            reduce using rule 54 (relational -> relational LessEqual additive .)
    Greater         reduce using rule 54 (relational -> relational LessEqual additive .)
    LessEqual       reduce using rule 54 (relational -> relational LessEqual additive .)
    GreaterEqual    reduce using rule 54 (relational -> relational LessEqual additive .)
    NotEqual        reduce using rule 54 (relational -> relational LessEqual additive .)
    Equal           reduce using rule 54 (relational -> relational LessEqual additive .)
    BitAnd          reduce using rule 54 (relational -> relational LessEqual additive .)
    Xor             reduce using rule 54 (relational -> relational LessEqual additive .)
    BitOr           reduce using rule 54 (relational -> relational LessEqual additive .)
    And             reduce using rule 54 (relational -> relational LessEqual additive .)
    Question        reduce using rule 54 (relational -> relational LessEqual additive .)
    Or              reduce using rule 54 (relational -> relational LessEqual additive .)
    Semi            reduce using rule 54 (relational -> relational LessEqual additive .)
    RParen          reduce using rule 54 (relational -> relational LessEqual additive .)
    Colon           reduce using rule 54 (relational -> relational LessEqual additive .)
    Plus            shift and go to state 74
    Minus           shift and go to state 75


state 103

    (55) relational -> relational GreaterEqual additive .
    (56) additive -> additive . Plus multiplicative
    (57) additive -> additive . Minus multiplicative

    Less            reduce using rule 55 (relational -> relational GreaterEqual additive .)
    Greater         reduce using rule 55 (relational -> relational GreaterEqual additive .)
    LessEqual       reduce using rule 55 (relational -> relational GreaterEqual additive .)
    GreaterEqual    reduce using rule 55 (relational -> relational GreaterEqual additive .)
    NotEqual        reduce using rule 55 (relational -> relational GreaterEqual additive .)
    Equal           reduce using rule 55 (relational -> relational GreaterEqual additive .)
    BitAnd          reduce using rule 55 (relational -> relational GreaterEqual additive .)
    Xor             reduce using rule 55 (relational -> relational GreaterEqual additive .)
    BitOr           reduce using rule 55 (relational -> relational GreaterEqual additive .)
    And             reduce using rule 55 (relational -> relational GreaterEqual additive .)
    Question        reduce using rule 55 (relational -> relational GreaterEqual additive .)
    Or              reduce using rule 55 (relational -> relational GreaterEqual additive .)
    Semi            reduce using rule 55 (relational -> relational GreaterEqual additive .)
    RParen          reduce using rule 55 (relational -> relational GreaterEqual additive .)
    Colon           reduce using rule 55 (relational -> relational GreaterEqual additive .)
    Plus            shift and go to state 74
    Minus           shift and go to state 75


state 104

    (56) additive -> additive Plus multiplicative .
    (58) multiplicative -> multiplicative . Mul unary
    (59) multiplicative -> multiplicative . Div unary
    (60) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 56 (additive -> additive Plus multiplicative .)
    Minus           reduce using rule 56 (additive -> additive Plus multiplicative .)
    Less            reduce using rule 56 (additive -> additive Plus multiplicative .)
    Greater         reduce using rule 56 (additive -> additive Plus multiplicative .)
    LessEqual       reduce using rule 56 (additive -> additive Plus multiplicative .)
    GreaterEqual    reduce using rule 56 (additive -> additive Plus multiplicative .)
    NotEqual        reduce using rule 56 (additive -> additive Plus multiplicative .)
    Equal           reduce using rule 56 (additive -> additive Plus multiplicative .)
    BitAnd          reduce using rule 56 (additive -> additive Plus multiplicative .)
    Xor             reduce using rule 56 (additive -> additive Plus multiplicative .)
    BitOr           reduce using rule 56 (additive -> additive Plus multiplicative .)
    And             reduce using rule 56 (additive -> additive Plus multiplicative .)
    Question        reduce using rule 56 (additive -> additive Plus multiplicative .)
    Or              reduce using rule 56 (additive -> additive Plus multiplicative .)
    Semi            reduce using rule 56 (additive -> additive Plus multiplicative .)
    RParen          reduce using rule 56 (additive -> additive Plus multiplicative .)
    Colon           reduce using rule 56 (additive -> additive Plus multiplicative .)
    Mul             shift and go to state 76
    Div             shift and go to state 77
    Mod             shift and go to state 78


state 105

    (57) additive -> additive Minus multiplicative .
    (58) multiplicative -> multiplicative . Mul unary
    (59) multiplicative -> multiplicative . Div unary
    (60) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 57 (additive -> additive Minus multiplicative .)
    Minus           reduce using rule 57 (additive -> additive Minus multiplicative .)
    Less            reduce using rule 57 (additive -> additive Minus multiplicative .)
    Greater         reduce using rule 57 (additive -> additive Minus multiplicative .)
    LessEqual       reduce using rule 57 (additive -> additive Minus multiplicative .)
    GreaterEqual    reduce using rule 57 (additive -> additive Minus multiplicative .)
    NotEqual        reduce using rule 57 (additive -> additive Minus multiplicative .)
    Equal           reduce using rule 57 (additive -> additive Minus multiplicative .)
    BitAnd          reduce using rule 57 (additive -> additive Minus multiplicative .)
    Xor             reduce using rule 57 (additive -> additive Minus multiplicative .)
    BitOr           reduce using rule 57 (additive -> additive Minus multiplicative .)
    And             reduce using rule 57 (additive -> additive Minus multiplicative .)
    Question        reduce using rule 57 (additive -> additive Minus multiplicative .)
    Or              reduce using rule 57 (additive -> additive Minus multiplicative .)
    Semi            reduce using rule 57 (additive -> additive Minus multiplicative .)
    RParen          reduce using rule 57 (additive -> additive Minus multiplicative .)
    Colon           reduce using rule 57 (additive -> additive Minus multiplicative .)
    Mul             shift and go to state 76
    Div             shift and go to state 77
    Mod             shift and go to state 78


state 106

    (58) multiplicative -> multiplicative Mul unary .

    Mul             reduce using rule 58 (multiplicative -> multiplicative Mul unary .)
    Div             reduce using rule 58 (multiplicative -> multiplicative Mul unary .)
    Mod             reduce using rule 58 (multiplicative -> multiplicative Mul unary .)
    Plus            reduce using rule 58 (multiplicative -> multiplicative Mul unary .)
    Minus           reduce using rule 58 (multiplicative -> multiplicative Mul unary .)
    Less            reduce using rule 58 (multiplicative -> multiplicative Mul unary .)
    Greater         reduce using rule 58 (multiplicative -> multiplicative Mul unary .)
    LessEqual       reduce using rule 58 (multiplicative -> multiplicative Mul unary .)
    GreaterEqual    reduce using rule 58 (multiplicative -> multiplicative Mul unary .)
    NotEqual        reduce using rule 58 (multiplicative -> multiplicative Mul unary .)
    Equal           reduce using rule 58 (multiplicative -> multiplicative Mul unary .)
    BitAnd          reduce using rule 58 (multiplicative -> multiplicative Mul unary .)
    Xor             reduce using rule 58 (multiplicative -> multiplicative Mul unary .)
    BitOr           reduce using rule 58 (multiplicative -> multiplicative Mul unary .)
    And             reduce using rule 58 (multiplicative -> multiplicative Mul unary .)
    Question        reduce using rule 58 (multiplicative -> multiplicative Mul unary .)
    Or              reduce using rule 58 (multiplicative -> multiplicative Mul unary .)
    Semi            reduce using rule 58 (multiplicative -> multiplicative Mul unary .)
    RParen          reduce using rule 58 (multiplicative -> multiplicative Mul unary .)
    Colon           reduce using rule 58 (multiplicative -> multiplicative Mul unary .)


state 107

    (59) multiplicative -> multiplicative Div unary .

    Mul             reduce using rule 59 (multiplicative -> multiplicative Div unary .)
    Div             reduce using rule 59 (multiplicative -> multiplicative Div unary .)
    Mod             reduce using rule 59 (multiplicative -> multiplicative Div unary .)
    Plus            reduce using rule 59 (multiplicative -> multiplicative Div unary .)
    Minus           reduce using rule 59 (multiplicative -> multiplicative Div unary .)
    Less            reduce using rule 59 (multiplicative -> multiplicative Div unary .)
    Greater         reduce using rule 59 (multiplicative -> multiplicative Div unary .)
    LessEqual       reduce using rule 59 (multiplicative -> multiplicative Div unary .)
    GreaterEqual    reduce using rule 59 (multiplicative -> multiplicative Div unary .)
    NotEqual        reduce using rule 59 (multiplicative -> multiplicative Div unary .)
    Equal           reduce using rule 59 (multiplicative -> multiplicative Div unary .)
    BitAnd          reduce using rule 59 (multiplicative -> multiplicative Div unary .)
    Xor             reduce using rule 59 (multiplicative -> multiplicative Div unary .)
    BitOr           reduce using rule 59 (multiplicative -> multiplicative Div unary .)
    And             reduce using rule 59 (multiplicative -> multiplicative Div unary .)
    Question        reduce using rule 59 (multiplicative -> multiplicative Div unary .)
    Or              reduce using rule 59 (multiplicative -> multiplicative Div unary .)
    Semi            reduce using rule 59 (multiplicative -> multiplicative Div unary .)
    RParen          reduce using rule 59 (multiplicative -> multiplicative Div unary .)
    Colon           reduce using rule 59 (multiplicative -> multiplicative Div unary .)


state 108

    (60) multiplicative -> multiplicative Mod unary .

    Mul             reduce using rule 60 (multiplicative -> multiplicative Mod unary .)
    Div             reduce using rule 60 (multiplicative -> multiplicative Mod unary .)
    Mod             reduce using rule 60 (multiplicative -> multiplicative Mod unary .)
    Plus            reduce using rule 60 (multiplicative -> multiplicative Mod unary .)
    Minus           reduce using rule 60 (multiplicative -> multiplicative Mod unary .)
    Less            reduce using rule 60 (multiplicative -> multiplicative Mod unary .)
    Greater         reduce using rule 60 (multiplicative -> multiplicative Mod unary .)
    LessEqual       reduce using rule 60 (multiplicative -> multiplicative Mod unary .)
    GreaterEqual    reduce using rule 60 (multiplicative -> multiplicative Mod unary .)
    NotEqual        reduce using rule 60 (multiplicative -> multiplicative Mod unary .)
    Equal           reduce using rule 60 (multiplicative -> multiplicative Mod unary .)
    BitAnd          reduce using rule 60 (multiplicative -> multiplicative Mod unary .)
    Xor             reduce using rule 60 (multiplicative -> multiplicative Mod unary .)
    BitOr           reduce using rule 60 (multiplicative -> multiplicative Mod unary .)
    And             reduce using rule 60 (multiplicative -> multiplicative Mod unary .)
    Question        reduce using rule 60 (multiplicative -> multiplicative Mod unary .)
    Or              reduce using rule 60 (multiplicative -> multiplicative Mod unary .)
    Semi            reduce using rule 60 (multiplicative -> multiplicative Mod unary .)
    RParen          reduce using rule 60 (multiplicative -> multiplicative Mod unary .)
    Colon           reduce using rule 60 (multiplicative -> multiplicative Mod unary .)


state 109

    (26) declaration -> type Identifier Assign expression .

    Semi            reduce using rule 26 (declaration -> type Identifier Assign expression .)


state 110

    (16) statement -> Do statement While LParen . expression RParen
    (27) expression -> . assignment
    (28) assignment -> . conditional
    (44) assignment -> . Identifier Assign expression
    (29) conditional -> . logical_or
    (61) conditional -> . logical_or Question expression Colon conditional
    (30) logical_or -> . logical_and
    (45) logical_or -> . logical_or Or logical_and
    (31) logical_and -> . bit_or
    (46) logical_and -> . logical_and And bit_or
    (32) bit_or -> . xor
    (47) bit_or -> . bit_or BitOr xor
    (33) xor -> . bit_and
    (48) xor -> . xor Xor bit_and
    (34) bit_and -> . equality
    (49) bit_and -> . bit_and BitAnd equality
    (35) equality -> . relational
    (50) equality -> . equality NotEqual relational
    (51) equality -> . equality Equal relational
    (36) relational -> . additive
    (52) relational -> . relational Less additive
    (53) relational -> . relational Greater additive
    (54) relational -> . relational LessEqual additive
    (55) relational -> . relational GreaterEqual additive
    (37) additive -> . multiplicative
    (56) additive -> . additive Plus multiplicative
    (57) additive -> . additive Minus multiplicative
    (38) multiplicative -> . unary
    (58) multiplicative -> . multiplicative Mul unary
    (59) multiplicative -> . multiplicative Div unary
    (60) multiplicative -> . multiplicative Mod unary
    (39) unary -> . postfix
    (41) unary -> . Minus unary
    (42) unary -> . BitNot unary
    (43) unary -> . Not unary
    (40) postfix -> . primary
    (62) primary -> . Integer
    (63) primary -> . Identifier
    (64) primary -> . LParen expression RParen

    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    expression                     shift and go to state 115
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 111

    (14) statement_matched -> While LParen expression RParen . statement_matched
    (15) statement_unmatched -> While LParen expression RParen . statement_unmatched
    (11) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (14) statement_matched -> . While LParen expression RParen statement_matched
    (18) statement_matched -> . Return expression Semi
    (19) statement_matched -> . opt_expression Semi
    (20) statement_matched -> . LBrace block RBrace
    (21) statement_matched -> . Break Semi
    (22) statement_matched -> . Continue Semi
    (12) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (13) statement_unmatched -> . If LParen expression RParen statement
    (15) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (23) opt_expression -> . expression
    (24) opt_expression -> . empty
    (27) expression -> . assignment
    (1) empty -> .
    (28) assignment -> . conditional
    (44) assignment -> . Identifier Assign expression
    (29) conditional -> . logical_or
    (61) conditional -> . logical_or Question expression Colon conditional
    (30) logical_or -> . logical_and
    (45) logical_or -> . logical_or Or logical_and
    (31) logical_and -> . bit_or
    (46) logical_and -> . logical_and And bit_or
    (32) bit_or -> . xor
    (47) bit_or -> . bit_or BitOr xor
    (33) xor -> . bit_and
    (48) xor -> . xor Xor bit_and
    (34) bit_and -> . equality
    (49) bit_and -> . bit_and BitAnd equality
    (35) equality -> . relational
    (50) equality -> . equality NotEqual relational
    (51) equality -> . equality Equal relational
    (36) relational -> . additive
    (52) relational -> . relational Less additive
    (53) relational -> . relational Greater additive
    (54) relational -> . relational LessEqual additive
    (55) relational -> . relational GreaterEqual additive
    (37) additive -> . multiplicative
    (56) additive -> . additive Plus multiplicative
    (57) additive -> . additive Minus multiplicative
    (38) multiplicative -> . unary
    (58) multiplicative -> . multiplicative Mul unary
    (59) multiplicative -> . multiplicative Div unary
    (60) multiplicative -> . multiplicative Mod unary
    (39) unary -> . postfix
    (41) unary -> . Minus unary
    (42) unary -> . BitNot unary
    (43) unary -> . Not unary
    (40) postfix -> . primary
    (62) primary -> . Integer
    (63) primary -> . Identifier
    (64) primary -> . LParen expression RParen

    If              shift and go to state 26
    While           shift and go to state 22
    Return          shift and go to state 27
    LBrace          shift and go to state 14
    Break           shift and go to state 28
    Continue        shift and go to state 29
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    expression                     shift and go to state 23
    statement_matched              shift and go to state 116
    statement_unmatched            shift and go to state 117
    opt_expression                 shift and go to state 25
    empty                          shift and go to state 30
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 112

    (17) statement -> For LParen block_item block_item . opt_expression RParen statement
    (23) opt_expression -> . expression
    (24) opt_expression -> . empty
    (27) expression -> . assignment
    (1) empty -> .
    (28) assignment -> . conditional
    (44) assignment -> . Identifier Assign expression
    (29) conditional -> . logical_or
    (61) conditional -> . logical_or Question expression Colon conditional
    (30) logical_or -> . logical_and
    (45) logical_or -> . logical_or Or logical_and
    (31) logical_and -> . bit_or
    (46) logical_and -> . logical_and And bit_or
    (32) bit_or -> . xor
    (47) bit_or -> . bit_or BitOr xor
    (33) xor -> . bit_and
    (48) xor -> . xor Xor bit_and
    (34) bit_and -> . equality
    (49) bit_and -> . bit_and BitAnd equality
    (35) equality -> . relational
    (50) equality -> . equality NotEqual relational
    (51) equality -> . equality Equal relational
    (36) relational -> . additive
    (52) relational -> . relational Less additive
    (53) relational -> . relational Greater additive
    (54) relational -> . relational LessEqual additive
    (55) relational -> . relational GreaterEqual additive
    (37) additive -> . multiplicative
    (56) additive -> . additive Plus multiplicative
    (57) additive -> . additive Minus multiplicative
    (38) multiplicative -> . unary
    (58) multiplicative -> . multiplicative Mul unary
    (59) multiplicative -> . multiplicative Div unary
    (60) multiplicative -> . multiplicative Mod unary
    (39) unary -> . postfix
    (41) unary -> . Minus unary
    (42) unary -> . BitNot unary
    (43) unary -> . Not unary
    (40) postfix -> . primary
    (62) primary -> . Integer
    (63) primary -> . Identifier
    (64) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    opt_expression                 shift and go to state 118
    expression                     shift and go to state 23
    empty                          shift and go to state 30
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 113

    (11) statement_matched -> If LParen expression RParen . statement_matched Else statement_matched
    (12) statement_unmatched -> If LParen expression RParen . statement_matched Else statement_unmatched
    (13) statement_unmatched -> If LParen expression RParen . statement
    (11) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (14) statement_matched -> . While LParen expression RParen statement_matched
    (18) statement_matched -> . Return expression Semi
    (19) statement_matched -> . opt_expression Semi
    (20) statement_matched -> . LBrace block RBrace
    (21) statement_matched -> . Break Semi
    (22) statement_matched -> . Continue Semi
    (9) statement -> . statement_matched
    (10) statement -> . statement_unmatched
    (16) statement -> . Do statement While LParen expression RParen
    (17) statement -> . For LParen block_item block_item opt_expression RParen statement
    (23) opt_expression -> . expression
    (24) opt_expression -> . empty
    (12) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (13) statement_unmatched -> . If LParen expression RParen statement
    (15) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (27) expression -> . assignment
    (1) empty -> .
    (28) assignment -> . conditional
    (44) assignment -> . Identifier Assign expression
    (29) conditional -> . logical_or
    (61) conditional -> . logical_or Question expression Colon conditional
    (30) logical_or -> . logical_and
    (45) logical_or -> . logical_or Or logical_and
    (31) logical_and -> . bit_or
    (46) logical_and -> . logical_and And bit_or
    (32) bit_or -> . xor
    (47) bit_or -> . bit_or BitOr xor
    (33) xor -> . bit_and
    (48) xor -> . xor Xor bit_and
    (34) bit_and -> . equality
    (49) bit_and -> . bit_and BitAnd equality
    (35) equality -> . relational
    (50) equality -> . equality NotEqual relational
    (51) equality -> . equality Equal relational
    (36) relational -> . additive
    (52) relational -> . relational Less additive
    (53) relational -> . relational Greater additive
    (54) relational -> . relational LessEqual additive
    (55) relational -> . relational GreaterEqual additive
    (37) additive -> . multiplicative
    (56) additive -> . additive Plus multiplicative
    (57) additive -> . additive Minus multiplicative
    (38) multiplicative -> . unary
    (58) multiplicative -> . multiplicative Mul unary
    (59) multiplicative -> . multiplicative Div unary
    (60) multiplicative -> . multiplicative Mod unary
    (39) unary -> . postfix
    (41) unary -> . Minus unary
    (42) unary -> . BitNot unary
    (43) unary -> . Not unary
    (40) postfix -> . primary
    (62) primary -> . Integer
    (63) primary -> . Identifier
    (64) primary -> . LParen expression RParen

    If              shift and go to state 26
    While           shift and go to state 22
    Return          shift and go to state 27
    LBrace          shift and go to state 14
    Break           shift and go to state 28
    Continue        shift and go to state 29
    Do              shift and go to state 21
    For             shift and go to state 24
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    expression                     shift and go to state 23
    statement_matched              shift and go to state 119
    statement_unmatched            shift and go to state 20
    statement                      shift and go to state 120
    opt_expression                 shift and go to state 25
    empty                          shift and go to state 30
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 114

    (61) conditional -> logical_or Question expression Colon . conditional
    (29) conditional -> . logical_or
    (61) conditional -> . logical_or Question expression Colon conditional
    (30) logical_or -> . logical_and
    (45) logical_or -> . logical_or Or logical_and
    (31) logical_and -> . bit_or
    (46) logical_and -> . logical_and And bit_or
    (32) bit_or -> . xor
    (47) bit_or -> . bit_or BitOr xor
    (33) xor -> . bit_and
    (48) xor -> . xor Xor bit_and
    (34) bit_and -> . equality
    (49) bit_and -> . bit_and BitAnd equality
    (35) equality -> . relational
    (50) equality -> . equality NotEqual relational
    (51) equality -> . equality Equal relational
    (36) relational -> . additive
    (52) relational -> . relational Less additive
    (53) relational -> . relational Greater additive
    (54) relational -> . relational LessEqual additive
    (55) relational -> . relational GreaterEqual additive
    (37) additive -> . multiplicative
    (56) additive -> . additive Plus multiplicative
    (57) additive -> . additive Minus multiplicative
    (38) multiplicative -> . unary
    (58) multiplicative -> . multiplicative Mul unary
    (59) multiplicative -> . multiplicative Div unary
    (60) multiplicative -> . multiplicative Mod unary
    (39) unary -> . postfix
    (41) unary -> . Minus unary
    (42) unary -> . BitNot unary
    (43) unary -> . Not unary
    (40) postfix -> . primary
    (62) primary -> . Integer
    (63) primary -> . Identifier
    (64) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 80
    LParen          shift and go to state 13

    logical_or                     shift and go to state 33
    conditional                    shift and go to state 121
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 115

    (16) statement -> Do statement While LParen expression . RParen

    RParen          shift and go to state 122


state 116

    (14) statement_matched -> While LParen expression RParen statement_matched .

    RBrace          reduce using rule 14 (statement_matched -> While LParen expression RParen statement_matched .)
    Do              reduce using rule 14 (statement_matched -> While LParen expression RParen statement_matched .)
    For             reduce using rule 14 (statement_matched -> While LParen expression RParen statement_matched .)
    If              reduce using rule 14 (statement_matched -> While LParen expression RParen statement_matched .)
    While           reduce using rule 14 (statement_matched -> While LParen expression RParen statement_matched .)
    Return          reduce using rule 14 (statement_matched -> While LParen expression RParen statement_matched .)
    LBrace          reduce using rule 14 (statement_matched -> While LParen expression RParen statement_matched .)
    Break           reduce using rule 14 (statement_matched -> While LParen expression RParen statement_matched .)
    Continue        reduce using rule 14 (statement_matched -> While LParen expression RParen statement_matched .)
    Int             reduce using rule 14 (statement_matched -> While LParen expression RParen statement_matched .)
    Identifier      reduce using rule 14 (statement_matched -> While LParen expression RParen statement_matched .)
    Minus           reduce using rule 14 (statement_matched -> While LParen expression RParen statement_matched .)
    BitNot          reduce using rule 14 (statement_matched -> While LParen expression RParen statement_matched .)
    Not             reduce using rule 14 (statement_matched -> While LParen expression RParen statement_matched .)
    Integer         reduce using rule 14 (statement_matched -> While LParen expression RParen statement_matched .)
    LParen          reduce using rule 14 (statement_matched -> While LParen expression RParen statement_matched .)
    Semi            reduce using rule 14 (statement_matched -> While LParen expression RParen statement_matched .)
    RParen          reduce using rule 14 (statement_matched -> While LParen expression RParen statement_matched .)
    Else            reduce using rule 14 (statement_matched -> While LParen expression RParen statement_matched .)


state 117

    (15) statement_unmatched -> While LParen expression RParen statement_unmatched .

    RBrace          reduce using rule 15 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Do              reduce using rule 15 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    For             reduce using rule 15 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    If              reduce using rule 15 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    While           reduce using rule 15 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Return          reduce using rule 15 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    LBrace          reduce using rule 15 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Break           reduce using rule 15 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Continue        reduce using rule 15 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Int             reduce using rule 15 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Identifier      reduce using rule 15 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Minus           reduce using rule 15 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    BitNot          reduce using rule 15 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Not             reduce using rule 15 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Integer         reduce using rule 15 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    LParen          reduce using rule 15 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Semi            reduce using rule 15 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    RParen          reduce using rule 15 (statement_unmatched -> While LParen expression RParen statement_unmatched .)


state 118

    (17) statement -> For LParen block_item block_item opt_expression . RParen statement

    RParen          shift and go to state 123


state 119

    (11) statement_matched -> If LParen expression RParen statement_matched . Else statement_matched
    (12) statement_unmatched -> If LParen expression RParen statement_matched . Else statement_unmatched
    (9) statement -> statement_matched .

    Else            shift and go to state 124
    RBrace          reduce using rule 9 (statement -> statement_matched .)
    Do              reduce using rule 9 (statement -> statement_matched .)
    For             reduce using rule 9 (statement -> statement_matched .)
    If              reduce using rule 9 (statement -> statement_matched .)
    While           reduce using rule 9 (statement -> statement_matched .)
    Return          reduce using rule 9 (statement -> statement_matched .)
    LBrace          reduce using rule 9 (statement -> statement_matched .)
    Break           reduce using rule 9 (statement -> statement_matched .)
    Continue        reduce using rule 9 (statement -> statement_matched .)
    Int             reduce using rule 9 (statement -> statement_matched .)
    Identifier      reduce using rule 9 (statement -> statement_matched .)
    Minus           reduce using rule 9 (statement -> statement_matched .)
    BitNot          reduce using rule 9 (statement -> statement_matched .)
    Not             reduce using rule 9 (statement -> statement_matched .)
    Integer         reduce using rule 9 (statement -> statement_matched .)
    LParen          reduce using rule 9 (statement -> statement_matched .)
    Semi            reduce using rule 9 (statement -> statement_matched .)
    RParen          reduce using rule 9 (statement -> statement_matched .)


state 120

    (13) statement_unmatched -> If LParen expression RParen statement .

    RBrace          reduce using rule 13 (statement_unmatched -> If LParen expression RParen statement .)
    Do              reduce using rule 13 (statement_unmatched -> If LParen expression RParen statement .)
    For             reduce using rule 13 (statement_unmatched -> If LParen expression RParen statement .)
    If              reduce using rule 13 (statement_unmatched -> If LParen expression RParen statement .)
    While           reduce using rule 13 (statement_unmatched -> If LParen expression RParen statement .)
    Return          reduce using rule 13 (statement_unmatched -> If LParen expression RParen statement .)
    LBrace          reduce using rule 13 (statement_unmatched -> If LParen expression RParen statement .)
    Break           reduce using rule 13 (statement_unmatched -> If LParen expression RParen statement .)
    Continue        reduce using rule 13 (statement_unmatched -> If LParen expression RParen statement .)
    Int             reduce using rule 13 (statement_unmatched -> If LParen expression RParen statement .)
    Identifier      reduce using rule 13 (statement_unmatched -> If LParen expression RParen statement .)
    Minus           reduce using rule 13 (statement_unmatched -> If LParen expression RParen statement .)
    BitNot          reduce using rule 13 (statement_unmatched -> If LParen expression RParen statement .)
    Not             reduce using rule 13 (statement_unmatched -> If LParen expression RParen statement .)
    Integer         reduce using rule 13 (statement_unmatched -> If LParen expression RParen statement .)
    LParen          reduce using rule 13 (statement_unmatched -> If LParen expression RParen statement .)
    Semi            reduce using rule 13 (statement_unmatched -> If LParen expression RParen statement .)
    RParen          reduce using rule 13 (statement_unmatched -> If LParen expression RParen statement .)


state 121

    (61) conditional -> logical_or Question expression Colon conditional .

    Semi            reduce using rule 61 (conditional -> logical_or Question expression Colon conditional .)
    RParen          reduce using rule 61 (conditional -> logical_or Question expression Colon conditional .)
    Colon           reduce using rule 61 (conditional -> logical_or Question expression Colon conditional .)


state 122

    (16) statement -> Do statement While LParen expression RParen .

    RBrace          reduce using rule 16 (statement -> Do statement While LParen expression RParen .)
    Do              reduce using rule 16 (statement -> Do statement While LParen expression RParen .)
    For             reduce using rule 16 (statement -> Do statement While LParen expression RParen .)
    If              reduce using rule 16 (statement -> Do statement While LParen expression RParen .)
    While           reduce using rule 16 (statement -> Do statement While LParen expression RParen .)
    Return          reduce using rule 16 (statement -> Do statement While LParen expression RParen .)
    LBrace          reduce using rule 16 (statement -> Do statement While LParen expression RParen .)
    Break           reduce using rule 16 (statement -> Do statement While LParen expression RParen .)
    Continue        reduce using rule 16 (statement -> Do statement While LParen expression RParen .)
    Int             reduce using rule 16 (statement -> Do statement While LParen expression RParen .)
    Identifier      reduce using rule 16 (statement -> Do statement While LParen expression RParen .)
    Minus           reduce using rule 16 (statement -> Do statement While LParen expression RParen .)
    BitNot          reduce using rule 16 (statement -> Do statement While LParen expression RParen .)
    Not             reduce using rule 16 (statement -> Do statement While LParen expression RParen .)
    Integer         reduce using rule 16 (statement -> Do statement While LParen expression RParen .)
    LParen          reduce using rule 16 (statement -> Do statement While LParen expression RParen .)
    Semi            reduce using rule 16 (statement -> Do statement While LParen expression RParen .)
    RParen          reduce using rule 16 (statement -> Do statement While LParen expression RParen .)


state 123

    (17) statement -> For LParen block_item block_item opt_expression RParen . statement
    (9) statement -> . statement_matched
    (10) statement -> . statement_unmatched
    (16) statement -> . Do statement While LParen expression RParen
    (17) statement -> . For LParen block_item block_item opt_expression RParen statement
    (11) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (14) statement_matched -> . While LParen expression RParen statement_matched
    (18) statement_matched -> . Return expression Semi
    (19) statement_matched -> . opt_expression Semi
    (20) statement_matched -> . LBrace block RBrace
    (21) statement_matched -> . Break Semi
    (22) statement_matched -> . Continue Semi
    (12) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (13) statement_unmatched -> . If LParen expression RParen statement
    (15) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (23) opt_expression -> . expression
    (24) opt_expression -> . empty
    (27) expression -> . assignment
    (1) empty -> .
    (28) assignment -> . conditional
    (44) assignment -> . Identifier Assign expression
    (29) conditional -> . logical_or
    (61) conditional -> . logical_or Question expression Colon conditional
    (30) logical_or -> . logical_and
    (45) logical_or -> . logical_or Or logical_and
    (31) logical_and -> . bit_or
    (46) logical_and -> . logical_and And bit_or
    (32) bit_or -> . xor
    (47) bit_or -> . bit_or BitOr xor
    (33) xor -> . bit_and
    (48) xor -> . xor Xor bit_and
    (34) bit_and -> . equality
    (49) bit_and -> . bit_and BitAnd equality
    (35) equality -> . relational
    (50) equality -> . equality NotEqual relational
    (51) equality -> . equality Equal relational
    (36) relational -> . additive
    (52) relational -> . relational Less additive
    (53) relational -> . relational Greater additive
    (54) relational -> . relational LessEqual additive
    (55) relational -> . relational GreaterEqual additive
    (37) additive -> . multiplicative
    (56) additive -> . additive Plus multiplicative
    (57) additive -> . additive Minus multiplicative
    (38) multiplicative -> . unary
    (58) multiplicative -> . multiplicative Mul unary
    (59) multiplicative -> . multiplicative Div unary
    (60) multiplicative -> . multiplicative Mod unary
    (39) unary -> . postfix
    (41) unary -> . Minus unary
    (42) unary -> . BitNot unary
    (43) unary -> . Not unary
    (40) postfix -> . primary
    (62) primary -> . Integer
    (63) primary -> . Identifier
    (64) primary -> . LParen expression RParen

    Do              shift and go to state 21
    For             shift and go to state 24
    If              shift and go to state 26
    While           shift and go to state 22
    Return          shift and go to state 27
    LBrace          shift and go to state 14
    Break           shift and go to state 28
    Continue        shift and go to state 29
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    opt_expression                 shift and go to state 25
    statement                      shift and go to state 125
    statement_matched              shift and go to state 19
    statement_unmatched            shift and go to state 20
    expression                     shift and go to state 23
    empty                          shift and go to state 30
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 124

    (11) statement_matched -> If LParen expression RParen statement_matched Else . statement_matched
    (12) statement_unmatched -> If LParen expression RParen statement_matched Else . statement_unmatched
    (11) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (14) statement_matched -> . While LParen expression RParen statement_matched
    (18) statement_matched -> . Return expression Semi
    (19) statement_matched -> . opt_expression Semi
    (20) statement_matched -> . LBrace block RBrace
    (21) statement_matched -> . Break Semi
    (22) statement_matched -> . Continue Semi
    (12) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (13) statement_unmatched -> . If LParen expression RParen statement
    (15) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (23) opt_expression -> . expression
    (24) opt_expression -> . empty
    (27) expression -> . assignment
    (1) empty -> .
    (28) assignment -> . conditional
    (44) assignment -> . Identifier Assign expression
    (29) conditional -> . logical_or
    (61) conditional -> . logical_or Question expression Colon conditional
    (30) logical_or -> . logical_and
    (45) logical_or -> . logical_or Or logical_and
    (31) logical_and -> . bit_or
    (46) logical_and -> . logical_and And bit_or
    (32) bit_or -> . xor
    (47) bit_or -> . bit_or BitOr xor
    (33) xor -> . bit_and
    (48) xor -> . xor Xor bit_and
    (34) bit_and -> . equality
    (49) bit_and -> . bit_and BitAnd equality
    (35) equality -> . relational
    (50) equality -> . equality NotEqual relational
    (51) equality -> . equality Equal relational
    (36) relational -> . additive
    (52) relational -> . relational Less additive
    (53) relational -> . relational Greater additive
    (54) relational -> . relational LessEqual additive
    (55) relational -> . relational GreaterEqual additive
    (37) additive -> . multiplicative
    (56) additive -> . additive Plus multiplicative
    (57) additive -> . additive Minus multiplicative
    (38) multiplicative -> . unary
    (58) multiplicative -> . multiplicative Mul unary
    (59) multiplicative -> . multiplicative Div unary
    (60) multiplicative -> . multiplicative Mod unary
    (39) unary -> . postfix
    (41) unary -> . Minus unary
    (42) unary -> . BitNot unary
    (43) unary -> . Not unary
    (40) postfix -> . primary
    (62) primary -> . Integer
    (63) primary -> . Identifier
    (64) primary -> . LParen expression RParen

    If              shift and go to state 26
    While           shift and go to state 22
    Return          shift and go to state 27
    LBrace          shift and go to state 14
    Break           shift and go to state 28
    Continue        shift and go to state 29
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    expression                     shift and go to state 23
    statement_matched              shift and go to state 126
    statement_unmatched            shift and go to state 127
    opt_expression                 shift and go to state 25
    empty                          shift and go to state 30
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 125

    (17) statement -> For LParen block_item block_item opt_expression RParen statement .

    RBrace          reduce using rule 17 (statement -> For LParen block_item block_item opt_expression RParen statement .)
    Do              reduce using rule 17 (statement -> For LParen block_item block_item opt_expression RParen statement .)
    For             reduce using rule 17 (statement -> For LParen block_item block_item opt_expression RParen statement .)
    If              reduce using rule 17 (statement -> For LParen block_item block_item opt_expression RParen statement .)
    While           reduce using rule 17 (statement -> For LParen block_item block_item opt_expression RParen statement .)
    Return          reduce using rule 17 (statement -> For LParen block_item block_item opt_expression RParen statement .)
    LBrace          reduce using rule 17 (statement -> For LParen block_item block_item opt_expression RParen statement .)
    Break           reduce using rule 17 (statement -> For LParen block_item block_item opt_expression RParen statement .)
    Continue        reduce using rule 17 (statement -> For LParen block_item block_item opt_expression RParen statement .)
    Int             reduce using rule 17 (statement -> For LParen block_item block_item opt_expression RParen statement .)
    Identifier      reduce using rule 17 (statement -> For LParen block_item block_item opt_expression RParen statement .)
    Minus           reduce using rule 17 (statement -> For LParen block_item block_item opt_expression RParen statement .)
    BitNot          reduce using rule 17 (statement -> For LParen block_item block_item opt_expression RParen statement .)
    Not             reduce using rule 17 (statement -> For LParen block_item block_item opt_expression RParen statement .)
    Integer         reduce using rule 17 (statement -> For LParen block_item block_item opt_expression RParen statement .)
    LParen          reduce using rule 17 (statement -> For LParen block_item block_item opt_expression RParen statement .)
    Semi            reduce using rule 17 (statement -> For LParen block_item block_item opt_expression RParen statement .)
    RParen          reduce using rule 17 (statement -> For LParen block_item block_item opt_expression RParen statement .)


state 126

    (11) statement_matched -> If LParen expression RParen statement_matched Else statement_matched .

    RBrace          reduce using rule 11 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Do              reduce using rule 11 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    For             reduce using rule 11 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    If              reduce using rule 11 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    While           reduce using rule 11 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Return          reduce using rule 11 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    LBrace          reduce using rule 11 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Break           reduce using rule 11 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Continue        reduce using rule 11 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Int             reduce using rule 11 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Identifier      reduce using rule 11 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Minus           reduce using rule 11 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    BitNot          reduce using rule 11 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Not             reduce using rule 11 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Integer         reduce using rule 11 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    LParen          reduce using rule 11 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Semi            reduce using rule 11 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    RParen          reduce using rule 11 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Else            reduce using rule 11 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)


state 127

    (12) statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .

    RBrace          reduce using rule 12 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Do              reduce using rule 12 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    For             reduce using rule 12 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    If              reduce using rule 12 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    While           reduce using rule 12 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Return          reduce using rule 12 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    LBrace          reduce using rule 12 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Break           reduce using rule 12 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Continue        reduce using rule 12 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Int             reduce using rule 12 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Identifier      reduce using rule 12 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Minus           reduce using rule 12 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    BitNot          reduce using rule 12 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Not             reduce using rule 12 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Integer         reduce using rule 12 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    LParen          reduce using rule 12 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Semi            reduce using rule 12 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    RParen          reduce using rule 12 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)

