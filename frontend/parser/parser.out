Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     empty -> <empty>
Rule 2     program -> program function
Rule 3     program -> empty
Rule 4     type -> Int
Rule 5     function -> type Identifier LParen params RParen LBrace block RBrace
Rule 6     params -> params extra_params
Rule 7     params -> type Identifier
Rule 8     params -> empty
Rule 9     extra_params -> Comma type Identifier
Rule 10    postfix -> Identifier LParen argu_params RParen
Rule 11    argu_params -> argu_params extra_argu_params
Rule 12    argu_params -> expression
Rule 13    argu_params -> empty
Rule 14    extra_argu_params -> Comma expression
Rule 15    block -> block block_item
Rule 16    block -> empty
Rule 17    block_item -> statement
Rule 18    block_item -> declaration Semi
Rule 19    statement -> statement_matched
Rule 20    statement -> statement_unmatched
Rule 21    statement_matched -> If LParen expression RParen statement_matched Else statement_matched
Rule 22    statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched
Rule 23    statement_unmatched -> If LParen expression RParen statement
Rule 24    statement_matched -> While LParen expression RParen statement_matched
Rule 25    statement_unmatched -> While LParen expression RParen statement_unmatched
Rule 26    statement -> Do statement While LParen expression RParen
Rule 27    statement -> For LParen block_item block_item opt_expression RParen statement
Rule 28    statement_matched -> Return expression Semi
Rule 29    statement_matched -> opt_expression Semi
Rule 30    statement_matched -> LBrace block RBrace
Rule 31    statement_matched -> Break Semi
Rule 32    statement_matched -> Continue Semi
Rule 33    opt_expression -> expression
Rule 34    opt_expression -> empty
Rule 35    declaration -> type Identifier
Rule 36    declaration -> type Identifier Assign expression
Rule 37    expression -> assignment
Rule 38    assignment -> conditional
Rule 39    conditional -> logical_or
Rule 40    logical_or -> logical_and
Rule 41    logical_and -> bit_or
Rule 42    bit_or -> xor
Rule 43    xor -> bit_and
Rule 44    bit_and -> equality
Rule 45    equality -> relational
Rule 46    relational -> additive
Rule 47    additive -> multiplicative
Rule 48    multiplicative -> unary
Rule 49    unary -> postfix
Rule 50    postfix -> primary
Rule 51    unary -> Minus unary
Rule 52    unary -> BitNot unary
Rule 53    unary -> Not unary
Rule 54    assignment -> Identifier Assign expression
Rule 55    logical_or -> logical_or Or logical_and
Rule 56    logical_and -> logical_and And bit_or
Rule 57    bit_or -> bit_or BitOr xor
Rule 58    xor -> xor Xor bit_and
Rule 59    bit_and -> bit_and BitAnd equality
Rule 60    equality -> equality NotEqual relational
Rule 61    equality -> equality Equal relational
Rule 62    relational -> relational Less additive
Rule 63    relational -> relational Greater additive
Rule 64    relational -> relational LessEqual additive
Rule 65    relational -> relational GreaterEqual additive
Rule 66    additive -> additive Plus multiplicative
Rule 67    additive -> additive Minus multiplicative
Rule 68    multiplicative -> multiplicative Mul unary
Rule 69    multiplicative -> multiplicative Div unary
Rule 70    multiplicative -> multiplicative Mod unary
Rule 71    conditional -> logical_or Question expression Colon conditional
Rule 72    primary -> Integer
Rule 73    primary -> Identifier
Rule 74    primary -> LParen expression RParen

Terminals, with rules where they appear

And                  : 56
Assign               : 36 54
BitAnd               : 59
BitNot               : 52
BitOr                : 57
Break                : 31
Colon                : 71
Comma                : 9 14
Continue             : 32
Div                  : 69
Do                   : 26
Else                 : 21 22
Equal                : 61
For                  : 27
Greater              : 63
GreaterEqual         : 65
Identifier           : 5 7 9 10 35 36 54 73
If                   : 21 22 23
Int                  : 4
Integer              : 72
LBrace               : 5 30
LParen               : 5 10 21 22 23 24 25 26 27 74
Less                 : 62
LessEqual            : 64
Minus                : 51 67
Mod                  : 70
Mul                  : 68
Not                  : 53
NotEqual             : 60
Or                   : 55
Plus                 : 66
Question             : 71
RBrace               : 5 30
RParen               : 5 10 21 22 23 24 25 26 27 74
Return               : 28
Semi                 : 18 28 29 31 32
While                : 24 25 26
Xor                  : 58
error                : 

Nonterminals, with rules where they appear

additive             : 46 62 63 64 65 66 67
argu_params          : 10 11
assignment           : 37
bit_and              : 43 58 59
bit_or               : 41 56 57
block                : 5 15 30
block_item           : 15 27 27
conditional          : 38 71
declaration          : 18
empty                : 3 8 13 16 34
equality             : 44 59 60 61
expression           : 12 14 21 22 23 24 25 26 28 33 36 54 71 74
extra_argu_params    : 11
extra_params         : 6
function             : 2
logical_and          : 40 55 56
logical_or           : 39 55 71
multiplicative       : 47 66 67 68 69 70
opt_expression       : 27 29
params               : 5 6
postfix              : 49
primary              : 50
program              : 2 0
relational           : 45 60 61 62 63 64 65
statement            : 17 23 26 27
statement_matched    : 19 21 21 22 24
statement_unmatched  : 20 22 25
type                 : 5 7 9 35 36
unary                : 48 51 52 53 68 69 70
xor                  : 42 57 58

Parsing method: LALR

state 0

    (0) S' -> . program
    (2) program -> . program function
    (3) program -> . empty
    (1) empty -> .

    Int             reduce using rule 1 (empty -> .)
    $end            reduce using rule 1 (empty -> .)

    program                        shift and go to state 1
    empty                          shift and go to state 2

state 1

    (0) S' -> program .
    (2) program -> program . function
    (5) function -> . type Identifier LParen params RParen LBrace block RBrace
    (4) type -> . Int

    Int             shift and go to state 5

    function                       shift and go to state 3
    type                           shift and go to state 4

state 2

    (3) program -> empty .

    Int             reduce using rule 3 (program -> empty .)
    $end            reduce using rule 3 (program -> empty .)


state 3

    (2) program -> program function .

    Int             reduce using rule 2 (program -> program function .)
    $end            reduce using rule 2 (program -> program function .)


state 4

    (5) function -> type . Identifier LParen params RParen LBrace block RBrace

    Identifier      shift and go to state 6


state 5

    (4) type -> Int .

    Identifier      reduce using rule 4 (type -> Int .)


state 6

    (5) function -> type Identifier . LParen params RParen LBrace block RBrace

    LParen          shift and go to state 7


state 7

    (5) function -> type Identifier LParen . params RParen LBrace block RBrace
    (6) params -> . params extra_params
    (7) params -> . type Identifier
    (8) params -> . empty
    (4) type -> . Int
    (1) empty -> .

    Int             shift and go to state 5
    RParen          reduce using rule 1 (empty -> .)
    Comma           reduce using rule 1 (empty -> .)

    type                           shift and go to state 8
    params                         shift and go to state 9
    empty                          shift and go to state 10

state 8

    (7) params -> type . Identifier

    Identifier      shift and go to state 11


state 9

    (5) function -> type Identifier LParen params . RParen LBrace block RBrace
    (6) params -> params . extra_params
    (9) extra_params -> . Comma type Identifier

    RParen          shift and go to state 12
    Comma           shift and go to state 14

    extra_params                   shift and go to state 13

state 10

    (8) params -> empty .

    RParen          reduce using rule 8 (params -> empty .)
    Comma           reduce using rule 8 (params -> empty .)


state 11

    (7) params -> type Identifier .

    RParen          reduce using rule 7 (params -> type Identifier .)
    Comma           reduce using rule 7 (params -> type Identifier .)


state 12

    (5) function -> type Identifier LParen params RParen . LBrace block RBrace

    LBrace          shift and go to state 15


state 13

    (6) params -> params extra_params .

    RParen          reduce using rule 6 (params -> params extra_params .)
    Comma           reduce using rule 6 (params -> params extra_params .)


state 14

    (9) extra_params -> Comma . type Identifier
    (4) type -> . Int

    Int             shift and go to state 5

    type                           shift and go to state 16

state 15

    (5) function -> type Identifier LParen params RParen LBrace . block RBrace
    (15) block -> . block block_item
    (16) block -> . empty
    (1) empty -> .

    RBrace          reduce using rule 1 (empty -> .)
    Do              reduce using rule 1 (empty -> .)
    For             reduce using rule 1 (empty -> .)
    If              reduce using rule 1 (empty -> .)
    While           reduce using rule 1 (empty -> .)
    Return          reduce using rule 1 (empty -> .)
    LBrace          reduce using rule 1 (empty -> .)
    Break           reduce using rule 1 (empty -> .)
    Continue        reduce using rule 1 (empty -> .)
    Int             reduce using rule 1 (empty -> .)
    Identifier      reduce using rule 1 (empty -> .)
    Minus           reduce using rule 1 (empty -> .)
    BitNot          reduce using rule 1 (empty -> .)
    Not             reduce using rule 1 (empty -> .)
    Integer         reduce using rule 1 (empty -> .)
    LParen          reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)

    block                          shift and go to state 17
    empty                          shift and go to state 18

state 16

    (9) extra_params -> Comma type . Identifier

    Identifier      shift and go to state 19


state 17

    (5) function -> type Identifier LParen params RParen LBrace block . RBrace
    (15) block -> block . block_item
    (17) block_item -> . statement
    (18) block_item -> . declaration Semi
    (19) statement -> . statement_matched
    (20) statement -> . statement_unmatched
    (26) statement -> . Do statement While LParen expression RParen
    (27) statement -> . For LParen block_item block_item opt_expression RParen statement
    (35) declaration -> . type Identifier
    (36) declaration -> . type Identifier Assign expression
    (21) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (24) statement_matched -> . While LParen expression RParen statement_matched
    (28) statement_matched -> . Return expression Semi
    (29) statement_matched -> . opt_expression Semi
    (30) statement_matched -> . LBrace block RBrace
    (31) statement_matched -> . Break Semi
    (32) statement_matched -> . Continue Semi
    (22) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (23) statement_unmatched -> . If LParen expression RParen statement
    (25) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (4) type -> . Int
    (33) opt_expression -> . expression
    (34) opt_expression -> . empty
    (37) expression -> . assignment
    (1) empty -> .
    (38) assignment -> . conditional
    (54) assignment -> . Identifier Assign expression
    (39) conditional -> . logical_or
    (71) conditional -> . logical_or Question expression Colon conditional
    (40) logical_or -> . logical_and
    (55) logical_or -> . logical_or Or logical_and
    (41) logical_and -> . bit_or
    (56) logical_and -> . logical_and And bit_or
    (42) bit_or -> . xor
    (57) bit_or -> . bit_or BitOr xor
    (43) xor -> . bit_and
    (58) xor -> . xor Xor bit_and
    (44) bit_and -> . equality
    (59) bit_and -> . bit_and BitAnd equality
    (45) equality -> . relational
    (60) equality -> . equality NotEqual relational
    (61) equality -> . equality Equal relational
    (46) relational -> . additive
    (62) relational -> . relational Less additive
    (63) relational -> . relational Greater additive
    (64) relational -> . relational LessEqual additive
    (65) relational -> . relational GreaterEqual additive
    (47) additive -> . multiplicative
    (66) additive -> . additive Plus multiplicative
    (67) additive -> . additive Minus multiplicative
    (48) multiplicative -> . unary
    (68) multiplicative -> . multiplicative Mul unary
    (69) multiplicative -> . multiplicative Div unary
    (70) multiplicative -> . multiplicative Mod unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    RBrace          shift and go to state 24
    Do              shift and go to state 30
    For             shift and go to state 33
    If              shift and go to state 35
    While           shift and go to state 31
    Return          shift and go to state 36
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Int             shift and go to state 5
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    type                           shift and go to state 20
    block_item                     shift and go to state 25
    statement                      shift and go to state 26
    declaration                    shift and go to state 27
    statement_matched              shift and go to state 28
    statement_unmatched            shift and go to state 29
    expression                     shift and go to state 32
    opt_expression                 shift and go to state 34
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 18

    (16) block -> empty .

    RBrace          reduce using rule 16 (block -> empty .)
    Do              reduce using rule 16 (block -> empty .)
    For             reduce using rule 16 (block -> empty .)
    If              reduce using rule 16 (block -> empty .)
    While           reduce using rule 16 (block -> empty .)
    Return          reduce using rule 16 (block -> empty .)
    LBrace          reduce using rule 16 (block -> empty .)
    Break           reduce using rule 16 (block -> empty .)
    Continue        reduce using rule 16 (block -> empty .)
    Int             reduce using rule 16 (block -> empty .)
    Identifier      reduce using rule 16 (block -> empty .)
    Minus           reduce using rule 16 (block -> empty .)
    BitNot          reduce using rule 16 (block -> empty .)
    Not             reduce using rule 16 (block -> empty .)
    Integer         reduce using rule 16 (block -> empty .)
    LParen          reduce using rule 16 (block -> empty .)
    Semi            reduce using rule 16 (block -> empty .)


state 19

    (9) extra_params -> Comma type Identifier .

    RParen          reduce using rule 9 (extra_params -> Comma type Identifier .)
    Comma           reduce using rule 9 (extra_params -> Comma type Identifier .)


state 20

    (35) declaration -> type . Identifier
    (36) declaration -> type . Identifier Assign expression

    Identifier      shift and go to state 58


state 21

    (54) assignment -> Identifier . Assign expression
    (10) postfix -> Identifier . LParen argu_params RParen
    (73) primary -> Identifier .

    Assign          shift and go to state 59
    LParen          shift and go to state 60
    Mul             reduce using rule 73 (primary -> Identifier .)
    Div             reduce using rule 73 (primary -> Identifier .)
    Mod             reduce using rule 73 (primary -> Identifier .)
    Plus            reduce using rule 73 (primary -> Identifier .)
    Minus           reduce using rule 73 (primary -> Identifier .)
    Less            reduce using rule 73 (primary -> Identifier .)
    Greater         reduce using rule 73 (primary -> Identifier .)
    LessEqual       reduce using rule 73 (primary -> Identifier .)
    GreaterEqual    reduce using rule 73 (primary -> Identifier .)
    NotEqual        reduce using rule 73 (primary -> Identifier .)
    Equal           reduce using rule 73 (primary -> Identifier .)
    BitAnd          reduce using rule 73 (primary -> Identifier .)
    Xor             reduce using rule 73 (primary -> Identifier .)
    BitOr           reduce using rule 73 (primary -> Identifier .)
    And             reduce using rule 73 (primary -> Identifier .)
    Question        reduce using rule 73 (primary -> Identifier .)
    Or              reduce using rule 73 (primary -> Identifier .)
    Semi            reduce using rule 73 (primary -> Identifier .)
    RParen          reduce using rule 73 (primary -> Identifier .)
    Comma           reduce using rule 73 (primary -> Identifier .)
    Colon           reduce using rule 73 (primary -> Identifier .)


state 22

    (74) primary -> LParen . expression RParen
    (37) expression -> . assignment
    (38) assignment -> . conditional
    (54) assignment -> . Identifier Assign expression
    (39) conditional -> . logical_or
    (71) conditional -> . logical_or Question expression Colon conditional
    (40) logical_or -> . logical_and
    (55) logical_or -> . logical_or Or logical_and
    (41) logical_and -> . bit_or
    (56) logical_and -> . logical_and And bit_or
    (42) bit_or -> . xor
    (57) bit_or -> . bit_or BitOr xor
    (43) xor -> . bit_and
    (58) xor -> . xor Xor bit_and
    (44) bit_and -> . equality
    (59) bit_and -> . bit_and BitAnd equality
    (45) equality -> . relational
    (60) equality -> . equality NotEqual relational
    (61) equality -> . equality Equal relational
    (46) relational -> . additive
    (62) relational -> . relational Less additive
    (63) relational -> . relational Greater additive
    (64) relational -> . relational LessEqual additive
    (65) relational -> . relational GreaterEqual additive
    (47) additive -> . multiplicative
    (66) additive -> . additive Plus multiplicative
    (67) additive -> . additive Minus multiplicative
    (48) multiplicative -> . unary
    (68) multiplicative -> . multiplicative Mul unary
    (69) multiplicative -> . multiplicative Div unary
    (70) multiplicative -> . multiplicative Mod unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 61
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 23

    (30) statement_matched -> LBrace . block RBrace
    (15) block -> . block block_item
    (16) block -> . empty
    (1) empty -> .

    RBrace          reduce using rule 1 (empty -> .)
    Do              reduce using rule 1 (empty -> .)
    For             reduce using rule 1 (empty -> .)
    If              reduce using rule 1 (empty -> .)
    While           reduce using rule 1 (empty -> .)
    Return          reduce using rule 1 (empty -> .)
    LBrace          reduce using rule 1 (empty -> .)
    Break           reduce using rule 1 (empty -> .)
    Continue        reduce using rule 1 (empty -> .)
    Int             reduce using rule 1 (empty -> .)
    Identifier      reduce using rule 1 (empty -> .)
    Minus           reduce using rule 1 (empty -> .)
    BitNot          reduce using rule 1 (empty -> .)
    Not             reduce using rule 1 (empty -> .)
    Integer         reduce using rule 1 (empty -> .)
    LParen          reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)

    block                          shift and go to state 62
    empty                          shift and go to state 18

state 24

    (5) function -> type Identifier LParen params RParen LBrace block RBrace .

    Int             reduce using rule 5 (function -> type Identifier LParen params RParen LBrace block RBrace .)
    $end            reduce using rule 5 (function -> type Identifier LParen params RParen LBrace block RBrace .)


state 25

    (15) block -> block block_item .

    RBrace          reduce using rule 15 (block -> block block_item .)
    Do              reduce using rule 15 (block -> block block_item .)
    For             reduce using rule 15 (block -> block block_item .)
    If              reduce using rule 15 (block -> block block_item .)
    While           reduce using rule 15 (block -> block block_item .)
    Return          reduce using rule 15 (block -> block block_item .)
    LBrace          reduce using rule 15 (block -> block block_item .)
    Break           reduce using rule 15 (block -> block block_item .)
    Continue        reduce using rule 15 (block -> block block_item .)
    Int             reduce using rule 15 (block -> block block_item .)
    Identifier      reduce using rule 15 (block -> block block_item .)
    Minus           reduce using rule 15 (block -> block block_item .)
    BitNot          reduce using rule 15 (block -> block block_item .)
    Not             reduce using rule 15 (block -> block block_item .)
    Integer         reduce using rule 15 (block -> block block_item .)
    LParen          reduce using rule 15 (block -> block block_item .)
    Semi            reduce using rule 15 (block -> block block_item .)


state 26

    (17) block_item -> statement .

    RBrace          reduce using rule 17 (block_item -> statement .)
    Do              reduce using rule 17 (block_item -> statement .)
    For             reduce using rule 17 (block_item -> statement .)
    If              reduce using rule 17 (block_item -> statement .)
    While           reduce using rule 17 (block_item -> statement .)
    Return          reduce using rule 17 (block_item -> statement .)
    LBrace          reduce using rule 17 (block_item -> statement .)
    Break           reduce using rule 17 (block_item -> statement .)
    Continue        reduce using rule 17 (block_item -> statement .)
    Int             reduce using rule 17 (block_item -> statement .)
    Identifier      reduce using rule 17 (block_item -> statement .)
    Minus           reduce using rule 17 (block_item -> statement .)
    BitNot          reduce using rule 17 (block_item -> statement .)
    Not             reduce using rule 17 (block_item -> statement .)
    Integer         reduce using rule 17 (block_item -> statement .)
    LParen          reduce using rule 17 (block_item -> statement .)
    Semi            reduce using rule 17 (block_item -> statement .)
    RParen          reduce using rule 17 (block_item -> statement .)


state 27

    (18) block_item -> declaration . Semi

    Semi            shift and go to state 63


state 28

    (19) statement -> statement_matched .

    RBrace          reduce using rule 19 (statement -> statement_matched .)
    Do              reduce using rule 19 (statement -> statement_matched .)
    For             reduce using rule 19 (statement -> statement_matched .)
    If              reduce using rule 19 (statement -> statement_matched .)
    While           reduce using rule 19 (statement -> statement_matched .)
    Return          reduce using rule 19 (statement -> statement_matched .)
    LBrace          reduce using rule 19 (statement -> statement_matched .)
    Break           reduce using rule 19 (statement -> statement_matched .)
    Continue        reduce using rule 19 (statement -> statement_matched .)
    Int             reduce using rule 19 (statement -> statement_matched .)
    Identifier      reduce using rule 19 (statement -> statement_matched .)
    Minus           reduce using rule 19 (statement -> statement_matched .)
    BitNot          reduce using rule 19 (statement -> statement_matched .)
    Not             reduce using rule 19 (statement -> statement_matched .)
    Integer         reduce using rule 19 (statement -> statement_matched .)
    LParen          reduce using rule 19 (statement -> statement_matched .)
    Semi            reduce using rule 19 (statement -> statement_matched .)
    RParen          reduce using rule 19 (statement -> statement_matched .)


state 29

    (20) statement -> statement_unmatched .

    RBrace          reduce using rule 20 (statement -> statement_unmatched .)
    Do              reduce using rule 20 (statement -> statement_unmatched .)
    For             reduce using rule 20 (statement -> statement_unmatched .)
    If              reduce using rule 20 (statement -> statement_unmatched .)
    While           reduce using rule 20 (statement -> statement_unmatched .)
    Return          reduce using rule 20 (statement -> statement_unmatched .)
    LBrace          reduce using rule 20 (statement -> statement_unmatched .)
    Break           reduce using rule 20 (statement -> statement_unmatched .)
    Continue        reduce using rule 20 (statement -> statement_unmatched .)
    Int             reduce using rule 20 (statement -> statement_unmatched .)
    Identifier      reduce using rule 20 (statement -> statement_unmatched .)
    Minus           reduce using rule 20 (statement -> statement_unmatched .)
    BitNot          reduce using rule 20 (statement -> statement_unmatched .)
    Not             reduce using rule 20 (statement -> statement_unmatched .)
    Integer         reduce using rule 20 (statement -> statement_unmatched .)
    LParen          reduce using rule 20 (statement -> statement_unmatched .)
    Semi            reduce using rule 20 (statement -> statement_unmatched .)
    RParen          reduce using rule 20 (statement -> statement_unmatched .)


state 30

    (26) statement -> Do . statement While LParen expression RParen
    (19) statement -> . statement_matched
    (20) statement -> . statement_unmatched
    (26) statement -> . Do statement While LParen expression RParen
    (27) statement -> . For LParen block_item block_item opt_expression RParen statement
    (21) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (24) statement_matched -> . While LParen expression RParen statement_matched
    (28) statement_matched -> . Return expression Semi
    (29) statement_matched -> . opt_expression Semi
    (30) statement_matched -> . LBrace block RBrace
    (31) statement_matched -> . Break Semi
    (32) statement_matched -> . Continue Semi
    (22) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (23) statement_unmatched -> . If LParen expression RParen statement
    (25) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (33) opt_expression -> . expression
    (34) opt_expression -> . empty
    (37) expression -> . assignment
    (1) empty -> .
    (38) assignment -> . conditional
    (54) assignment -> . Identifier Assign expression
    (39) conditional -> . logical_or
    (71) conditional -> . logical_or Question expression Colon conditional
    (40) logical_or -> . logical_and
    (55) logical_or -> . logical_or Or logical_and
    (41) logical_and -> . bit_or
    (56) logical_and -> . logical_and And bit_or
    (42) bit_or -> . xor
    (57) bit_or -> . bit_or BitOr xor
    (43) xor -> . bit_and
    (58) xor -> . xor Xor bit_and
    (44) bit_and -> . equality
    (59) bit_and -> . bit_and BitAnd equality
    (45) equality -> . relational
    (60) equality -> . equality NotEqual relational
    (61) equality -> . equality Equal relational
    (46) relational -> . additive
    (62) relational -> . relational Less additive
    (63) relational -> . relational Greater additive
    (64) relational -> . relational LessEqual additive
    (65) relational -> . relational GreaterEqual additive
    (47) additive -> . multiplicative
    (66) additive -> . additive Plus multiplicative
    (67) additive -> . additive Minus multiplicative
    (48) multiplicative -> . unary
    (68) multiplicative -> . multiplicative Mul unary
    (69) multiplicative -> . multiplicative Div unary
    (70) multiplicative -> . multiplicative Mod unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    Do              shift and go to state 30
    For             shift and go to state 33
    If              shift and go to state 35
    While           shift and go to state 31
    Return          shift and go to state 36
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    statement                      shift and go to state 64
    expression                     shift and go to state 32
    statement_matched              shift and go to state 28
    statement_unmatched            shift and go to state 29
    opt_expression                 shift and go to state 34
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 31

    (24) statement_matched -> While . LParen expression RParen statement_matched
    (25) statement_unmatched -> While . LParen expression RParen statement_unmatched

    LParen          shift and go to state 65


state 32

    (33) opt_expression -> expression .

    Semi            reduce using rule 33 (opt_expression -> expression .)
    RParen          reduce using rule 33 (opt_expression -> expression .)


state 33

    (27) statement -> For . LParen block_item block_item opt_expression RParen statement

    LParen          shift and go to state 66


state 34

    (29) statement_matched -> opt_expression . Semi

    Semi            shift and go to state 67


state 35

    (21) statement_matched -> If . LParen expression RParen statement_matched Else statement_matched
    (22) statement_unmatched -> If . LParen expression RParen statement_matched Else statement_unmatched
    (23) statement_unmatched -> If . LParen expression RParen statement

    LParen          shift and go to state 68


state 36

    (28) statement_matched -> Return . expression Semi
    (37) expression -> . assignment
    (38) assignment -> . conditional
    (54) assignment -> . Identifier Assign expression
    (39) conditional -> . logical_or
    (71) conditional -> . logical_or Question expression Colon conditional
    (40) logical_or -> . logical_and
    (55) logical_or -> . logical_or Or logical_and
    (41) logical_and -> . bit_or
    (56) logical_and -> . logical_and And bit_or
    (42) bit_or -> . xor
    (57) bit_or -> . bit_or BitOr xor
    (43) xor -> . bit_and
    (58) xor -> . xor Xor bit_and
    (44) bit_and -> . equality
    (59) bit_and -> . bit_and BitAnd equality
    (45) equality -> . relational
    (60) equality -> . equality NotEqual relational
    (61) equality -> . equality Equal relational
    (46) relational -> . additive
    (62) relational -> . relational Less additive
    (63) relational -> . relational Greater additive
    (64) relational -> . relational LessEqual additive
    (65) relational -> . relational GreaterEqual additive
    (47) additive -> . multiplicative
    (66) additive -> . additive Plus multiplicative
    (67) additive -> . additive Minus multiplicative
    (48) multiplicative -> . unary
    (68) multiplicative -> . multiplicative Mul unary
    (69) multiplicative -> . multiplicative Div unary
    (70) multiplicative -> . multiplicative Mod unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 69
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 37

    (31) statement_matched -> Break . Semi

    Semi            shift and go to state 70


state 38

    (32) statement_matched -> Continue . Semi

    Semi            shift and go to state 71


state 39

    (34) opt_expression -> empty .

    Semi            reduce using rule 34 (opt_expression -> empty .)
    RParen          reduce using rule 34 (opt_expression -> empty .)


state 40

    (37) expression -> assignment .

    Semi            reduce using rule 37 (expression -> assignment .)
    RParen          reduce using rule 37 (expression -> assignment .)
    Comma           reduce using rule 37 (expression -> assignment .)
    Colon           reduce using rule 37 (expression -> assignment .)


state 41

    (38) assignment -> conditional .

    Semi            reduce using rule 38 (assignment -> conditional .)
    RParen          reduce using rule 38 (assignment -> conditional .)
    Comma           reduce using rule 38 (assignment -> conditional .)
    Colon           reduce using rule 38 (assignment -> conditional .)


state 42

    (39) conditional -> logical_or .
    (71) conditional -> logical_or . Question expression Colon conditional
    (55) logical_or -> logical_or . Or logical_and

    Semi            reduce using rule 39 (conditional -> logical_or .)
    RParen          reduce using rule 39 (conditional -> logical_or .)
    Comma           reduce using rule 39 (conditional -> logical_or .)
    Colon           reduce using rule 39 (conditional -> logical_or .)
    Question        shift and go to state 72
    Or              shift and go to state 73


state 43

    (40) logical_or -> logical_and .
    (56) logical_and -> logical_and . And bit_or

    Question        reduce using rule 40 (logical_or -> logical_and .)
    Or              reduce using rule 40 (logical_or -> logical_and .)
    Semi            reduce using rule 40 (logical_or -> logical_and .)
    RParen          reduce using rule 40 (logical_or -> logical_and .)
    Comma           reduce using rule 40 (logical_or -> logical_and .)
    Colon           reduce using rule 40 (logical_or -> logical_and .)
    And             shift and go to state 74


state 44

    (41) logical_and -> bit_or .
    (57) bit_or -> bit_or . BitOr xor

    And             reduce using rule 41 (logical_and -> bit_or .)
    Question        reduce using rule 41 (logical_and -> bit_or .)
    Or              reduce using rule 41 (logical_and -> bit_or .)
    Semi            reduce using rule 41 (logical_and -> bit_or .)
    RParen          reduce using rule 41 (logical_and -> bit_or .)
    Comma           reduce using rule 41 (logical_and -> bit_or .)
    Colon           reduce using rule 41 (logical_and -> bit_or .)
    BitOr           shift and go to state 75


state 45

    (42) bit_or -> xor .
    (58) xor -> xor . Xor bit_and

    BitOr           reduce using rule 42 (bit_or -> xor .)
    And             reduce using rule 42 (bit_or -> xor .)
    Question        reduce using rule 42 (bit_or -> xor .)
    Or              reduce using rule 42 (bit_or -> xor .)
    Semi            reduce using rule 42 (bit_or -> xor .)
    RParen          reduce using rule 42 (bit_or -> xor .)
    Comma           reduce using rule 42 (bit_or -> xor .)
    Colon           reduce using rule 42 (bit_or -> xor .)
    Xor             shift and go to state 76


state 46

    (43) xor -> bit_and .
    (59) bit_and -> bit_and . BitAnd equality

    Xor             reduce using rule 43 (xor -> bit_and .)
    BitOr           reduce using rule 43 (xor -> bit_and .)
    And             reduce using rule 43 (xor -> bit_and .)
    Question        reduce using rule 43 (xor -> bit_and .)
    Or              reduce using rule 43 (xor -> bit_and .)
    Semi            reduce using rule 43 (xor -> bit_and .)
    RParen          reduce using rule 43 (xor -> bit_and .)
    Comma           reduce using rule 43 (xor -> bit_and .)
    Colon           reduce using rule 43 (xor -> bit_and .)
    BitAnd          shift and go to state 77


state 47

    (44) bit_and -> equality .
    (60) equality -> equality . NotEqual relational
    (61) equality -> equality . Equal relational

    BitAnd          reduce using rule 44 (bit_and -> equality .)
    Xor             reduce using rule 44 (bit_and -> equality .)
    BitOr           reduce using rule 44 (bit_and -> equality .)
    And             reduce using rule 44 (bit_and -> equality .)
    Question        reduce using rule 44 (bit_and -> equality .)
    Or              reduce using rule 44 (bit_and -> equality .)
    Semi            reduce using rule 44 (bit_and -> equality .)
    RParen          reduce using rule 44 (bit_and -> equality .)
    Comma           reduce using rule 44 (bit_and -> equality .)
    Colon           reduce using rule 44 (bit_and -> equality .)
    NotEqual        shift and go to state 78
    Equal           shift and go to state 79


state 48

    (45) equality -> relational .
    (62) relational -> relational . Less additive
    (63) relational -> relational . Greater additive
    (64) relational -> relational . LessEqual additive
    (65) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 45 (equality -> relational .)
    Equal           reduce using rule 45 (equality -> relational .)
    BitAnd          reduce using rule 45 (equality -> relational .)
    Xor             reduce using rule 45 (equality -> relational .)
    BitOr           reduce using rule 45 (equality -> relational .)
    And             reduce using rule 45 (equality -> relational .)
    Question        reduce using rule 45 (equality -> relational .)
    Or              reduce using rule 45 (equality -> relational .)
    Semi            reduce using rule 45 (equality -> relational .)
    RParen          reduce using rule 45 (equality -> relational .)
    Comma           reduce using rule 45 (equality -> relational .)
    Colon           reduce using rule 45 (equality -> relational .)
    Less            shift and go to state 80
    Greater         shift and go to state 81
    LessEqual       shift and go to state 82
    GreaterEqual    shift and go to state 83


state 49

    (46) relational -> additive .
    (66) additive -> additive . Plus multiplicative
    (67) additive -> additive . Minus multiplicative

    Less            reduce using rule 46 (relational -> additive .)
    Greater         reduce using rule 46 (relational -> additive .)
    LessEqual       reduce using rule 46 (relational -> additive .)
    GreaterEqual    reduce using rule 46 (relational -> additive .)
    NotEqual        reduce using rule 46 (relational -> additive .)
    Equal           reduce using rule 46 (relational -> additive .)
    BitAnd          reduce using rule 46 (relational -> additive .)
    Xor             reduce using rule 46 (relational -> additive .)
    BitOr           reduce using rule 46 (relational -> additive .)
    And             reduce using rule 46 (relational -> additive .)
    Question        reduce using rule 46 (relational -> additive .)
    Or              reduce using rule 46 (relational -> additive .)
    Semi            reduce using rule 46 (relational -> additive .)
    RParen          reduce using rule 46 (relational -> additive .)
    Comma           reduce using rule 46 (relational -> additive .)
    Colon           reduce using rule 46 (relational -> additive .)
    Plus            shift and go to state 84
    Minus           shift and go to state 85


state 50

    (47) additive -> multiplicative .
    (68) multiplicative -> multiplicative . Mul unary
    (69) multiplicative -> multiplicative . Div unary
    (70) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 47 (additive -> multiplicative .)
    Minus           reduce using rule 47 (additive -> multiplicative .)
    Less            reduce using rule 47 (additive -> multiplicative .)
    Greater         reduce using rule 47 (additive -> multiplicative .)
    LessEqual       reduce using rule 47 (additive -> multiplicative .)
    GreaterEqual    reduce using rule 47 (additive -> multiplicative .)
    NotEqual        reduce using rule 47 (additive -> multiplicative .)
    Equal           reduce using rule 47 (additive -> multiplicative .)
    BitAnd          reduce using rule 47 (additive -> multiplicative .)
    Xor             reduce using rule 47 (additive -> multiplicative .)
    BitOr           reduce using rule 47 (additive -> multiplicative .)
    And             reduce using rule 47 (additive -> multiplicative .)
    Question        reduce using rule 47 (additive -> multiplicative .)
    Or              reduce using rule 47 (additive -> multiplicative .)
    Semi            reduce using rule 47 (additive -> multiplicative .)
    RParen          reduce using rule 47 (additive -> multiplicative .)
    Comma           reduce using rule 47 (additive -> multiplicative .)
    Colon           reduce using rule 47 (additive -> multiplicative .)
    Mul             shift and go to state 86
    Div             shift and go to state 87
    Mod             shift and go to state 88


state 51

    (51) unary -> Minus . unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 90
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    unary                          shift and go to state 89
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 52

    (48) multiplicative -> unary .

    Mul             reduce using rule 48 (multiplicative -> unary .)
    Div             reduce using rule 48 (multiplicative -> unary .)
    Mod             reduce using rule 48 (multiplicative -> unary .)
    Plus            reduce using rule 48 (multiplicative -> unary .)
    Minus           reduce using rule 48 (multiplicative -> unary .)
    Less            reduce using rule 48 (multiplicative -> unary .)
    Greater         reduce using rule 48 (multiplicative -> unary .)
    LessEqual       reduce using rule 48 (multiplicative -> unary .)
    GreaterEqual    reduce using rule 48 (multiplicative -> unary .)
    NotEqual        reduce using rule 48 (multiplicative -> unary .)
    Equal           reduce using rule 48 (multiplicative -> unary .)
    BitAnd          reduce using rule 48 (multiplicative -> unary .)
    Xor             reduce using rule 48 (multiplicative -> unary .)
    BitOr           reduce using rule 48 (multiplicative -> unary .)
    And             reduce using rule 48 (multiplicative -> unary .)
    Question        reduce using rule 48 (multiplicative -> unary .)
    Or              reduce using rule 48 (multiplicative -> unary .)
    Semi            reduce using rule 48 (multiplicative -> unary .)
    RParen          reduce using rule 48 (multiplicative -> unary .)
    Comma           reduce using rule 48 (multiplicative -> unary .)
    Colon           reduce using rule 48 (multiplicative -> unary .)


state 53

    (49) unary -> postfix .

    Mul             reduce using rule 49 (unary -> postfix .)
    Div             reduce using rule 49 (unary -> postfix .)
    Mod             reduce using rule 49 (unary -> postfix .)
    Plus            reduce using rule 49 (unary -> postfix .)
    Minus           reduce using rule 49 (unary -> postfix .)
    Less            reduce using rule 49 (unary -> postfix .)
    Greater         reduce using rule 49 (unary -> postfix .)
    LessEqual       reduce using rule 49 (unary -> postfix .)
    GreaterEqual    reduce using rule 49 (unary -> postfix .)
    NotEqual        reduce using rule 49 (unary -> postfix .)
    Equal           reduce using rule 49 (unary -> postfix .)
    BitAnd          reduce using rule 49 (unary -> postfix .)
    Xor             reduce using rule 49 (unary -> postfix .)
    BitOr           reduce using rule 49 (unary -> postfix .)
    And             reduce using rule 49 (unary -> postfix .)
    Question        reduce using rule 49 (unary -> postfix .)
    Or              reduce using rule 49 (unary -> postfix .)
    Semi            reduce using rule 49 (unary -> postfix .)
    RParen          reduce using rule 49 (unary -> postfix .)
    Comma           reduce using rule 49 (unary -> postfix .)
    Colon           reduce using rule 49 (unary -> postfix .)


state 54

    (52) unary -> BitNot . unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 90
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    unary                          shift and go to state 91
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 55

    (53) unary -> Not . unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 90
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    unary                          shift and go to state 92
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 56

    (50) postfix -> primary .

    Mul             reduce using rule 50 (postfix -> primary .)
    Div             reduce using rule 50 (postfix -> primary .)
    Mod             reduce using rule 50 (postfix -> primary .)
    Plus            reduce using rule 50 (postfix -> primary .)
    Minus           reduce using rule 50 (postfix -> primary .)
    Less            reduce using rule 50 (postfix -> primary .)
    Greater         reduce using rule 50 (postfix -> primary .)
    LessEqual       reduce using rule 50 (postfix -> primary .)
    GreaterEqual    reduce using rule 50 (postfix -> primary .)
    NotEqual        reduce using rule 50 (postfix -> primary .)
    Equal           reduce using rule 50 (postfix -> primary .)
    BitAnd          reduce using rule 50 (postfix -> primary .)
    Xor             reduce using rule 50 (postfix -> primary .)
    BitOr           reduce using rule 50 (postfix -> primary .)
    And             reduce using rule 50 (postfix -> primary .)
    Question        reduce using rule 50 (postfix -> primary .)
    Or              reduce using rule 50 (postfix -> primary .)
    Semi            reduce using rule 50 (postfix -> primary .)
    RParen          reduce using rule 50 (postfix -> primary .)
    Comma           reduce using rule 50 (postfix -> primary .)
    Colon           reduce using rule 50 (postfix -> primary .)


state 57

    (72) primary -> Integer .

    Mul             reduce using rule 72 (primary -> Integer .)
    Div             reduce using rule 72 (primary -> Integer .)
    Mod             reduce using rule 72 (primary -> Integer .)
    Plus            reduce using rule 72 (primary -> Integer .)
    Minus           reduce using rule 72 (primary -> Integer .)
    Less            reduce using rule 72 (primary -> Integer .)
    Greater         reduce using rule 72 (primary -> Integer .)
    LessEqual       reduce using rule 72 (primary -> Integer .)
    GreaterEqual    reduce using rule 72 (primary -> Integer .)
    NotEqual        reduce using rule 72 (primary -> Integer .)
    Equal           reduce using rule 72 (primary -> Integer .)
    BitAnd          reduce using rule 72 (primary -> Integer .)
    Xor             reduce using rule 72 (primary -> Integer .)
    BitOr           reduce using rule 72 (primary -> Integer .)
    And             reduce using rule 72 (primary -> Integer .)
    Question        reduce using rule 72 (primary -> Integer .)
    Or              reduce using rule 72 (primary -> Integer .)
    Semi            reduce using rule 72 (primary -> Integer .)
    RParen          reduce using rule 72 (primary -> Integer .)
    Comma           reduce using rule 72 (primary -> Integer .)
    Colon           reduce using rule 72 (primary -> Integer .)


state 58

    (35) declaration -> type Identifier .
    (36) declaration -> type Identifier . Assign expression

    Semi            reduce using rule 35 (declaration -> type Identifier .)
    Assign          shift and go to state 93


state 59

    (54) assignment -> Identifier Assign . expression
    (37) expression -> . assignment
    (38) assignment -> . conditional
    (54) assignment -> . Identifier Assign expression
    (39) conditional -> . logical_or
    (71) conditional -> . logical_or Question expression Colon conditional
    (40) logical_or -> . logical_and
    (55) logical_or -> . logical_or Or logical_and
    (41) logical_and -> . bit_or
    (56) logical_and -> . logical_and And bit_or
    (42) bit_or -> . xor
    (57) bit_or -> . bit_or BitOr xor
    (43) xor -> . bit_and
    (58) xor -> . xor Xor bit_and
    (44) bit_and -> . equality
    (59) bit_and -> . bit_and BitAnd equality
    (45) equality -> . relational
    (60) equality -> . equality NotEqual relational
    (61) equality -> . equality Equal relational
    (46) relational -> . additive
    (62) relational -> . relational Less additive
    (63) relational -> . relational Greater additive
    (64) relational -> . relational LessEqual additive
    (65) relational -> . relational GreaterEqual additive
    (47) additive -> . multiplicative
    (66) additive -> . additive Plus multiplicative
    (67) additive -> . additive Minus multiplicative
    (48) multiplicative -> . unary
    (68) multiplicative -> . multiplicative Mul unary
    (69) multiplicative -> . multiplicative Div unary
    (70) multiplicative -> . multiplicative Mod unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 94
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 60

    (10) postfix -> Identifier LParen . argu_params RParen
    (11) argu_params -> . argu_params extra_argu_params
    (12) argu_params -> . expression
    (13) argu_params -> . empty
    (37) expression -> . assignment
    (1) empty -> .
    (38) assignment -> . conditional
    (54) assignment -> . Identifier Assign expression
    (39) conditional -> . logical_or
    (71) conditional -> . logical_or Question expression Colon conditional
    (40) logical_or -> . logical_and
    (55) logical_or -> . logical_or Or logical_and
    (41) logical_and -> . bit_or
    (56) logical_and -> . logical_and And bit_or
    (42) bit_or -> . xor
    (57) bit_or -> . bit_or BitOr xor
    (43) xor -> . bit_and
    (58) xor -> . xor Xor bit_and
    (44) bit_and -> . equality
    (59) bit_and -> . bit_and BitAnd equality
    (45) equality -> . relational
    (60) equality -> . equality NotEqual relational
    (61) equality -> . equality Equal relational
    (46) relational -> . additive
    (62) relational -> . relational Less additive
    (63) relational -> . relational Greater additive
    (64) relational -> . relational LessEqual additive
    (65) relational -> . relational GreaterEqual additive
    (47) additive -> . multiplicative
    (66) additive -> . additive Plus multiplicative
    (67) additive -> . additive Minus multiplicative
    (48) multiplicative -> . unary
    (68) multiplicative -> . multiplicative Mul unary
    (69) multiplicative -> . multiplicative Div unary
    (70) multiplicative -> . multiplicative Mod unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Comma           reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    argu_params                    shift and go to state 95
    expression                     shift and go to state 96
    empty                          shift and go to state 97
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 61

    (74) primary -> LParen expression . RParen

    RParen          shift and go to state 98


state 62

    (30) statement_matched -> LBrace block . RBrace
    (15) block -> block . block_item
    (17) block_item -> . statement
    (18) block_item -> . declaration Semi
    (19) statement -> . statement_matched
    (20) statement -> . statement_unmatched
    (26) statement -> . Do statement While LParen expression RParen
    (27) statement -> . For LParen block_item block_item opt_expression RParen statement
    (35) declaration -> . type Identifier
    (36) declaration -> . type Identifier Assign expression
    (21) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (24) statement_matched -> . While LParen expression RParen statement_matched
    (28) statement_matched -> . Return expression Semi
    (29) statement_matched -> . opt_expression Semi
    (30) statement_matched -> . LBrace block RBrace
    (31) statement_matched -> . Break Semi
    (32) statement_matched -> . Continue Semi
    (22) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (23) statement_unmatched -> . If LParen expression RParen statement
    (25) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (4) type -> . Int
    (33) opt_expression -> . expression
    (34) opt_expression -> . empty
    (37) expression -> . assignment
    (1) empty -> .
    (38) assignment -> . conditional
    (54) assignment -> . Identifier Assign expression
    (39) conditional -> . logical_or
    (71) conditional -> . logical_or Question expression Colon conditional
    (40) logical_or -> . logical_and
    (55) logical_or -> . logical_or Or logical_and
    (41) logical_and -> . bit_or
    (56) logical_and -> . logical_and And bit_or
    (42) bit_or -> . xor
    (57) bit_or -> . bit_or BitOr xor
    (43) xor -> . bit_and
    (58) xor -> . xor Xor bit_and
    (44) bit_and -> . equality
    (59) bit_and -> . bit_and BitAnd equality
    (45) equality -> . relational
    (60) equality -> . equality NotEqual relational
    (61) equality -> . equality Equal relational
    (46) relational -> . additive
    (62) relational -> . relational Less additive
    (63) relational -> . relational Greater additive
    (64) relational -> . relational LessEqual additive
    (65) relational -> . relational GreaterEqual additive
    (47) additive -> . multiplicative
    (66) additive -> . additive Plus multiplicative
    (67) additive -> . additive Minus multiplicative
    (48) multiplicative -> . unary
    (68) multiplicative -> . multiplicative Mul unary
    (69) multiplicative -> . multiplicative Div unary
    (70) multiplicative -> . multiplicative Mod unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    RBrace          shift and go to state 99
    Do              shift and go to state 30
    For             shift and go to state 33
    If              shift and go to state 35
    While           shift and go to state 31
    Return          shift and go to state 36
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Int             shift and go to state 5
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    block_item                     shift and go to state 25
    statement                      shift and go to state 26
    declaration                    shift and go to state 27
    statement_matched              shift and go to state 28
    statement_unmatched            shift and go to state 29
    expression                     shift and go to state 32
    opt_expression                 shift and go to state 34
    type                           shift and go to state 20
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 63

    (18) block_item -> declaration Semi .

    RBrace          reduce using rule 18 (block_item -> declaration Semi .)
    Do              reduce using rule 18 (block_item -> declaration Semi .)
    For             reduce using rule 18 (block_item -> declaration Semi .)
    If              reduce using rule 18 (block_item -> declaration Semi .)
    While           reduce using rule 18 (block_item -> declaration Semi .)
    Return          reduce using rule 18 (block_item -> declaration Semi .)
    LBrace          reduce using rule 18 (block_item -> declaration Semi .)
    Break           reduce using rule 18 (block_item -> declaration Semi .)
    Continue        reduce using rule 18 (block_item -> declaration Semi .)
    Int             reduce using rule 18 (block_item -> declaration Semi .)
    Identifier      reduce using rule 18 (block_item -> declaration Semi .)
    Minus           reduce using rule 18 (block_item -> declaration Semi .)
    BitNot          reduce using rule 18 (block_item -> declaration Semi .)
    Not             reduce using rule 18 (block_item -> declaration Semi .)
    Integer         reduce using rule 18 (block_item -> declaration Semi .)
    LParen          reduce using rule 18 (block_item -> declaration Semi .)
    Semi            reduce using rule 18 (block_item -> declaration Semi .)
    RParen          reduce using rule 18 (block_item -> declaration Semi .)


state 64

    (26) statement -> Do statement . While LParen expression RParen

    While           shift and go to state 100


state 65

    (24) statement_matched -> While LParen . expression RParen statement_matched
    (25) statement_unmatched -> While LParen . expression RParen statement_unmatched
    (37) expression -> . assignment
    (38) assignment -> . conditional
    (54) assignment -> . Identifier Assign expression
    (39) conditional -> . logical_or
    (71) conditional -> . logical_or Question expression Colon conditional
    (40) logical_or -> . logical_and
    (55) logical_or -> . logical_or Or logical_and
    (41) logical_and -> . bit_or
    (56) logical_and -> . logical_and And bit_or
    (42) bit_or -> . xor
    (57) bit_or -> . bit_or BitOr xor
    (43) xor -> . bit_and
    (58) xor -> . xor Xor bit_and
    (44) bit_and -> . equality
    (59) bit_and -> . bit_and BitAnd equality
    (45) equality -> . relational
    (60) equality -> . equality NotEqual relational
    (61) equality -> . equality Equal relational
    (46) relational -> . additive
    (62) relational -> . relational Less additive
    (63) relational -> . relational Greater additive
    (64) relational -> . relational LessEqual additive
    (65) relational -> . relational GreaterEqual additive
    (47) additive -> . multiplicative
    (66) additive -> . additive Plus multiplicative
    (67) additive -> . additive Minus multiplicative
    (48) multiplicative -> . unary
    (68) multiplicative -> . multiplicative Mul unary
    (69) multiplicative -> . multiplicative Div unary
    (70) multiplicative -> . multiplicative Mod unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 101
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 66

    (27) statement -> For LParen . block_item block_item opt_expression RParen statement
    (17) block_item -> . statement
    (18) block_item -> . declaration Semi
    (19) statement -> . statement_matched
    (20) statement -> . statement_unmatched
    (26) statement -> . Do statement While LParen expression RParen
    (27) statement -> . For LParen block_item block_item opt_expression RParen statement
    (35) declaration -> . type Identifier
    (36) declaration -> . type Identifier Assign expression
    (21) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (24) statement_matched -> . While LParen expression RParen statement_matched
    (28) statement_matched -> . Return expression Semi
    (29) statement_matched -> . opt_expression Semi
    (30) statement_matched -> . LBrace block RBrace
    (31) statement_matched -> . Break Semi
    (32) statement_matched -> . Continue Semi
    (22) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (23) statement_unmatched -> . If LParen expression RParen statement
    (25) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (4) type -> . Int
    (33) opt_expression -> . expression
    (34) opt_expression -> . empty
    (37) expression -> . assignment
    (1) empty -> .
    (38) assignment -> . conditional
    (54) assignment -> . Identifier Assign expression
    (39) conditional -> . logical_or
    (71) conditional -> . logical_or Question expression Colon conditional
    (40) logical_or -> . logical_and
    (55) logical_or -> . logical_or Or logical_and
    (41) logical_and -> . bit_or
    (56) logical_and -> . logical_and And bit_or
    (42) bit_or -> . xor
    (57) bit_or -> . bit_or BitOr xor
    (43) xor -> . bit_and
    (58) xor -> . xor Xor bit_and
    (44) bit_and -> . equality
    (59) bit_and -> . bit_and BitAnd equality
    (45) equality -> . relational
    (60) equality -> . equality NotEqual relational
    (61) equality -> . equality Equal relational
    (46) relational -> . additive
    (62) relational -> . relational Less additive
    (63) relational -> . relational Greater additive
    (64) relational -> . relational LessEqual additive
    (65) relational -> . relational GreaterEqual additive
    (47) additive -> . multiplicative
    (66) additive -> . additive Plus multiplicative
    (67) additive -> . additive Minus multiplicative
    (48) multiplicative -> . unary
    (68) multiplicative -> . multiplicative Mul unary
    (69) multiplicative -> . multiplicative Div unary
    (70) multiplicative -> . multiplicative Mod unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    Do              shift and go to state 30
    For             shift and go to state 33
    If              shift and go to state 35
    While           shift and go to state 31
    Return          shift and go to state 36
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Int             shift and go to state 5
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    block_item                     shift and go to state 102
    opt_expression                 shift and go to state 34
    statement                      shift and go to state 26
    declaration                    shift and go to state 27
    statement_matched              shift and go to state 28
    statement_unmatched            shift and go to state 29
    expression                     shift and go to state 32
    type                           shift and go to state 20
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 67

    (29) statement_matched -> opt_expression Semi .

    RBrace          reduce using rule 29 (statement_matched -> opt_expression Semi .)
    Do              reduce using rule 29 (statement_matched -> opt_expression Semi .)
    For             reduce using rule 29 (statement_matched -> opt_expression Semi .)
    If              reduce using rule 29 (statement_matched -> opt_expression Semi .)
    While           reduce using rule 29 (statement_matched -> opt_expression Semi .)
    Return          reduce using rule 29 (statement_matched -> opt_expression Semi .)
    LBrace          reduce using rule 29 (statement_matched -> opt_expression Semi .)
    Break           reduce using rule 29 (statement_matched -> opt_expression Semi .)
    Continue        reduce using rule 29 (statement_matched -> opt_expression Semi .)
    Int             reduce using rule 29 (statement_matched -> opt_expression Semi .)
    Identifier      reduce using rule 29 (statement_matched -> opt_expression Semi .)
    Minus           reduce using rule 29 (statement_matched -> opt_expression Semi .)
    BitNot          reduce using rule 29 (statement_matched -> opt_expression Semi .)
    Not             reduce using rule 29 (statement_matched -> opt_expression Semi .)
    Integer         reduce using rule 29 (statement_matched -> opt_expression Semi .)
    LParen          reduce using rule 29 (statement_matched -> opt_expression Semi .)
    Semi            reduce using rule 29 (statement_matched -> opt_expression Semi .)
    RParen          reduce using rule 29 (statement_matched -> opt_expression Semi .)
    Else            reduce using rule 29 (statement_matched -> opt_expression Semi .)


state 68

    (21) statement_matched -> If LParen . expression RParen statement_matched Else statement_matched
    (22) statement_unmatched -> If LParen . expression RParen statement_matched Else statement_unmatched
    (23) statement_unmatched -> If LParen . expression RParen statement
    (37) expression -> . assignment
    (38) assignment -> . conditional
    (54) assignment -> . Identifier Assign expression
    (39) conditional -> . logical_or
    (71) conditional -> . logical_or Question expression Colon conditional
    (40) logical_or -> . logical_and
    (55) logical_or -> . logical_or Or logical_and
    (41) logical_and -> . bit_or
    (56) logical_and -> . logical_and And bit_or
    (42) bit_or -> . xor
    (57) bit_or -> . bit_or BitOr xor
    (43) xor -> . bit_and
    (58) xor -> . xor Xor bit_and
    (44) bit_and -> . equality
    (59) bit_and -> . bit_and BitAnd equality
    (45) equality -> . relational
    (60) equality -> . equality NotEqual relational
    (61) equality -> . equality Equal relational
    (46) relational -> . additive
    (62) relational -> . relational Less additive
    (63) relational -> . relational Greater additive
    (64) relational -> . relational LessEqual additive
    (65) relational -> . relational GreaterEqual additive
    (47) additive -> . multiplicative
    (66) additive -> . additive Plus multiplicative
    (67) additive -> . additive Minus multiplicative
    (48) multiplicative -> . unary
    (68) multiplicative -> . multiplicative Mul unary
    (69) multiplicative -> . multiplicative Div unary
    (70) multiplicative -> . multiplicative Mod unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 103
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 69

    (28) statement_matched -> Return expression . Semi

    Semi            shift and go to state 104


state 70

    (31) statement_matched -> Break Semi .

    RBrace          reduce using rule 31 (statement_matched -> Break Semi .)
    Do              reduce using rule 31 (statement_matched -> Break Semi .)
    For             reduce using rule 31 (statement_matched -> Break Semi .)
    If              reduce using rule 31 (statement_matched -> Break Semi .)
    While           reduce using rule 31 (statement_matched -> Break Semi .)
    Return          reduce using rule 31 (statement_matched -> Break Semi .)
    LBrace          reduce using rule 31 (statement_matched -> Break Semi .)
    Break           reduce using rule 31 (statement_matched -> Break Semi .)
    Continue        reduce using rule 31 (statement_matched -> Break Semi .)
    Int             reduce using rule 31 (statement_matched -> Break Semi .)
    Identifier      reduce using rule 31 (statement_matched -> Break Semi .)
    Minus           reduce using rule 31 (statement_matched -> Break Semi .)
    BitNot          reduce using rule 31 (statement_matched -> Break Semi .)
    Not             reduce using rule 31 (statement_matched -> Break Semi .)
    Integer         reduce using rule 31 (statement_matched -> Break Semi .)
    LParen          reduce using rule 31 (statement_matched -> Break Semi .)
    Semi            reduce using rule 31 (statement_matched -> Break Semi .)
    RParen          reduce using rule 31 (statement_matched -> Break Semi .)
    Else            reduce using rule 31 (statement_matched -> Break Semi .)


state 71

    (32) statement_matched -> Continue Semi .

    RBrace          reduce using rule 32 (statement_matched -> Continue Semi .)
    Do              reduce using rule 32 (statement_matched -> Continue Semi .)
    For             reduce using rule 32 (statement_matched -> Continue Semi .)
    If              reduce using rule 32 (statement_matched -> Continue Semi .)
    While           reduce using rule 32 (statement_matched -> Continue Semi .)
    Return          reduce using rule 32 (statement_matched -> Continue Semi .)
    LBrace          reduce using rule 32 (statement_matched -> Continue Semi .)
    Break           reduce using rule 32 (statement_matched -> Continue Semi .)
    Continue        reduce using rule 32 (statement_matched -> Continue Semi .)
    Int             reduce using rule 32 (statement_matched -> Continue Semi .)
    Identifier      reduce using rule 32 (statement_matched -> Continue Semi .)
    Minus           reduce using rule 32 (statement_matched -> Continue Semi .)
    BitNot          reduce using rule 32 (statement_matched -> Continue Semi .)
    Not             reduce using rule 32 (statement_matched -> Continue Semi .)
    Integer         reduce using rule 32 (statement_matched -> Continue Semi .)
    LParen          reduce using rule 32 (statement_matched -> Continue Semi .)
    Semi            reduce using rule 32 (statement_matched -> Continue Semi .)
    RParen          reduce using rule 32 (statement_matched -> Continue Semi .)
    Else            reduce using rule 32 (statement_matched -> Continue Semi .)


state 72

    (71) conditional -> logical_or Question . expression Colon conditional
    (37) expression -> . assignment
    (38) assignment -> . conditional
    (54) assignment -> . Identifier Assign expression
    (39) conditional -> . logical_or
    (71) conditional -> . logical_or Question expression Colon conditional
    (40) logical_or -> . logical_and
    (55) logical_or -> . logical_or Or logical_and
    (41) logical_and -> . bit_or
    (56) logical_and -> . logical_and And bit_or
    (42) bit_or -> . xor
    (57) bit_or -> . bit_or BitOr xor
    (43) xor -> . bit_and
    (58) xor -> . xor Xor bit_and
    (44) bit_and -> . equality
    (59) bit_and -> . bit_and BitAnd equality
    (45) equality -> . relational
    (60) equality -> . equality NotEqual relational
    (61) equality -> . equality Equal relational
    (46) relational -> . additive
    (62) relational -> . relational Less additive
    (63) relational -> . relational Greater additive
    (64) relational -> . relational LessEqual additive
    (65) relational -> . relational GreaterEqual additive
    (47) additive -> . multiplicative
    (66) additive -> . additive Plus multiplicative
    (67) additive -> . additive Minus multiplicative
    (48) multiplicative -> . unary
    (68) multiplicative -> . multiplicative Mul unary
    (69) multiplicative -> . multiplicative Div unary
    (70) multiplicative -> . multiplicative Mod unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    logical_or                     shift and go to state 42
    expression                     shift and go to state 105
    conditional                    shift and go to state 41
    assignment                     shift and go to state 40
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 73

    (55) logical_or -> logical_or Or . logical_and
    (41) logical_and -> . bit_or
    (56) logical_and -> . logical_and And bit_or
    (42) bit_or -> . xor
    (57) bit_or -> . bit_or BitOr xor
    (43) xor -> . bit_and
    (58) xor -> . xor Xor bit_and
    (44) bit_and -> . equality
    (59) bit_and -> . bit_and BitAnd equality
    (45) equality -> . relational
    (60) equality -> . equality NotEqual relational
    (61) equality -> . equality Equal relational
    (46) relational -> . additive
    (62) relational -> . relational Less additive
    (63) relational -> . relational Greater additive
    (64) relational -> . relational LessEqual additive
    (65) relational -> . relational GreaterEqual additive
    (47) additive -> . multiplicative
    (66) additive -> . additive Plus multiplicative
    (67) additive -> . additive Minus multiplicative
    (48) multiplicative -> . unary
    (68) multiplicative -> . multiplicative Mul unary
    (69) multiplicative -> . multiplicative Div unary
    (70) multiplicative -> . multiplicative Mod unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 90
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    logical_and                    shift and go to state 106
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 74

    (56) logical_and -> logical_and And . bit_or
    (42) bit_or -> . xor
    (57) bit_or -> . bit_or BitOr xor
    (43) xor -> . bit_and
    (58) xor -> . xor Xor bit_and
    (44) bit_and -> . equality
    (59) bit_and -> . bit_and BitAnd equality
    (45) equality -> . relational
    (60) equality -> . equality NotEqual relational
    (61) equality -> . equality Equal relational
    (46) relational -> . additive
    (62) relational -> . relational Less additive
    (63) relational -> . relational Greater additive
    (64) relational -> . relational LessEqual additive
    (65) relational -> . relational GreaterEqual additive
    (47) additive -> . multiplicative
    (66) additive -> . additive Plus multiplicative
    (67) additive -> . additive Minus multiplicative
    (48) multiplicative -> . unary
    (68) multiplicative -> . multiplicative Mul unary
    (69) multiplicative -> . multiplicative Div unary
    (70) multiplicative -> . multiplicative Mod unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 90
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    bit_or                         shift and go to state 107
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 75

    (57) bit_or -> bit_or BitOr . xor
    (43) xor -> . bit_and
    (58) xor -> . xor Xor bit_and
    (44) bit_and -> . equality
    (59) bit_and -> . bit_and BitAnd equality
    (45) equality -> . relational
    (60) equality -> . equality NotEqual relational
    (61) equality -> . equality Equal relational
    (46) relational -> . additive
    (62) relational -> . relational Less additive
    (63) relational -> . relational Greater additive
    (64) relational -> . relational LessEqual additive
    (65) relational -> . relational GreaterEqual additive
    (47) additive -> . multiplicative
    (66) additive -> . additive Plus multiplicative
    (67) additive -> . additive Minus multiplicative
    (48) multiplicative -> . unary
    (68) multiplicative -> . multiplicative Mul unary
    (69) multiplicative -> . multiplicative Div unary
    (70) multiplicative -> . multiplicative Mod unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 90
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    xor                            shift and go to state 108
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 76

    (58) xor -> xor Xor . bit_and
    (44) bit_and -> . equality
    (59) bit_and -> . bit_and BitAnd equality
    (45) equality -> . relational
    (60) equality -> . equality NotEqual relational
    (61) equality -> . equality Equal relational
    (46) relational -> . additive
    (62) relational -> . relational Less additive
    (63) relational -> . relational Greater additive
    (64) relational -> . relational LessEqual additive
    (65) relational -> . relational GreaterEqual additive
    (47) additive -> . multiplicative
    (66) additive -> . additive Plus multiplicative
    (67) additive -> . additive Minus multiplicative
    (48) multiplicative -> . unary
    (68) multiplicative -> . multiplicative Mul unary
    (69) multiplicative -> . multiplicative Div unary
    (70) multiplicative -> . multiplicative Mod unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 90
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    bit_and                        shift and go to state 109
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 77

    (59) bit_and -> bit_and BitAnd . equality
    (45) equality -> . relational
    (60) equality -> . equality NotEqual relational
    (61) equality -> . equality Equal relational
    (46) relational -> . additive
    (62) relational -> . relational Less additive
    (63) relational -> . relational Greater additive
    (64) relational -> . relational LessEqual additive
    (65) relational -> . relational GreaterEqual additive
    (47) additive -> . multiplicative
    (66) additive -> . additive Plus multiplicative
    (67) additive -> . additive Minus multiplicative
    (48) multiplicative -> . unary
    (68) multiplicative -> . multiplicative Mul unary
    (69) multiplicative -> . multiplicative Div unary
    (70) multiplicative -> . multiplicative Mod unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 90
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    equality                       shift and go to state 110
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 78

    (60) equality -> equality NotEqual . relational
    (46) relational -> . additive
    (62) relational -> . relational Less additive
    (63) relational -> . relational Greater additive
    (64) relational -> . relational LessEqual additive
    (65) relational -> . relational GreaterEqual additive
    (47) additive -> . multiplicative
    (66) additive -> . additive Plus multiplicative
    (67) additive -> . additive Minus multiplicative
    (48) multiplicative -> . unary
    (68) multiplicative -> . multiplicative Mul unary
    (69) multiplicative -> . multiplicative Div unary
    (70) multiplicative -> . multiplicative Mod unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 90
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    relational                     shift and go to state 111
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 79

    (61) equality -> equality Equal . relational
    (46) relational -> . additive
    (62) relational -> . relational Less additive
    (63) relational -> . relational Greater additive
    (64) relational -> . relational LessEqual additive
    (65) relational -> . relational GreaterEqual additive
    (47) additive -> . multiplicative
    (66) additive -> . additive Plus multiplicative
    (67) additive -> . additive Minus multiplicative
    (48) multiplicative -> . unary
    (68) multiplicative -> . multiplicative Mul unary
    (69) multiplicative -> . multiplicative Div unary
    (70) multiplicative -> . multiplicative Mod unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 90
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    relational                     shift and go to state 112
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 80

    (62) relational -> relational Less . additive
    (47) additive -> . multiplicative
    (66) additive -> . additive Plus multiplicative
    (67) additive -> . additive Minus multiplicative
    (48) multiplicative -> . unary
    (68) multiplicative -> . multiplicative Mul unary
    (69) multiplicative -> . multiplicative Div unary
    (70) multiplicative -> . multiplicative Mod unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 90
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    additive                       shift and go to state 113
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 81

    (63) relational -> relational Greater . additive
    (47) additive -> . multiplicative
    (66) additive -> . additive Plus multiplicative
    (67) additive -> . additive Minus multiplicative
    (48) multiplicative -> . unary
    (68) multiplicative -> . multiplicative Mul unary
    (69) multiplicative -> . multiplicative Div unary
    (70) multiplicative -> . multiplicative Mod unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 90
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    additive                       shift and go to state 114
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 82

    (64) relational -> relational LessEqual . additive
    (47) additive -> . multiplicative
    (66) additive -> . additive Plus multiplicative
    (67) additive -> . additive Minus multiplicative
    (48) multiplicative -> . unary
    (68) multiplicative -> . multiplicative Mul unary
    (69) multiplicative -> . multiplicative Div unary
    (70) multiplicative -> . multiplicative Mod unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 90
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    additive                       shift and go to state 115
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 83

    (65) relational -> relational GreaterEqual . additive
    (47) additive -> . multiplicative
    (66) additive -> . additive Plus multiplicative
    (67) additive -> . additive Minus multiplicative
    (48) multiplicative -> . unary
    (68) multiplicative -> . multiplicative Mul unary
    (69) multiplicative -> . multiplicative Div unary
    (70) multiplicative -> . multiplicative Mod unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 90
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    additive                       shift and go to state 116
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 84

    (66) additive -> additive Plus . multiplicative
    (48) multiplicative -> . unary
    (68) multiplicative -> . multiplicative Mul unary
    (69) multiplicative -> . multiplicative Div unary
    (70) multiplicative -> . multiplicative Mod unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 90
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    multiplicative                 shift and go to state 117
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 85

    (67) additive -> additive Minus . multiplicative
    (48) multiplicative -> . unary
    (68) multiplicative -> . multiplicative Mul unary
    (69) multiplicative -> . multiplicative Div unary
    (70) multiplicative -> . multiplicative Mod unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 90
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    multiplicative                 shift and go to state 118
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 86

    (68) multiplicative -> multiplicative Mul . unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 90
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    unary                          shift and go to state 119
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 87

    (69) multiplicative -> multiplicative Div . unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 90
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    unary                          shift and go to state 120
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 88

    (70) multiplicative -> multiplicative Mod . unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 90
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    unary                          shift and go to state 121
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 89

    (51) unary -> Minus unary .

    Mul             reduce using rule 51 (unary -> Minus unary .)
    Div             reduce using rule 51 (unary -> Minus unary .)
    Mod             reduce using rule 51 (unary -> Minus unary .)
    Plus            reduce using rule 51 (unary -> Minus unary .)
    Minus           reduce using rule 51 (unary -> Minus unary .)
    Less            reduce using rule 51 (unary -> Minus unary .)
    Greater         reduce using rule 51 (unary -> Minus unary .)
    LessEqual       reduce using rule 51 (unary -> Minus unary .)
    GreaterEqual    reduce using rule 51 (unary -> Minus unary .)
    NotEqual        reduce using rule 51 (unary -> Minus unary .)
    Equal           reduce using rule 51 (unary -> Minus unary .)
    BitAnd          reduce using rule 51 (unary -> Minus unary .)
    Xor             reduce using rule 51 (unary -> Minus unary .)
    BitOr           reduce using rule 51 (unary -> Minus unary .)
    And             reduce using rule 51 (unary -> Minus unary .)
    Question        reduce using rule 51 (unary -> Minus unary .)
    Or              reduce using rule 51 (unary -> Minus unary .)
    Semi            reduce using rule 51 (unary -> Minus unary .)
    RParen          reduce using rule 51 (unary -> Minus unary .)
    Comma           reduce using rule 51 (unary -> Minus unary .)
    Colon           reduce using rule 51 (unary -> Minus unary .)


state 90

    (10) postfix -> Identifier . LParen argu_params RParen
    (73) primary -> Identifier .

    LParen          shift and go to state 60
    Mul             reduce using rule 73 (primary -> Identifier .)
    Div             reduce using rule 73 (primary -> Identifier .)
    Mod             reduce using rule 73 (primary -> Identifier .)
    Plus            reduce using rule 73 (primary -> Identifier .)
    Minus           reduce using rule 73 (primary -> Identifier .)
    Less            reduce using rule 73 (primary -> Identifier .)
    Greater         reduce using rule 73 (primary -> Identifier .)
    LessEqual       reduce using rule 73 (primary -> Identifier .)
    GreaterEqual    reduce using rule 73 (primary -> Identifier .)
    NotEqual        reduce using rule 73 (primary -> Identifier .)
    Equal           reduce using rule 73 (primary -> Identifier .)
    BitAnd          reduce using rule 73 (primary -> Identifier .)
    Xor             reduce using rule 73 (primary -> Identifier .)
    BitOr           reduce using rule 73 (primary -> Identifier .)
    And             reduce using rule 73 (primary -> Identifier .)
    Question        reduce using rule 73 (primary -> Identifier .)
    Or              reduce using rule 73 (primary -> Identifier .)
    Semi            reduce using rule 73 (primary -> Identifier .)
    RParen          reduce using rule 73 (primary -> Identifier .)
    Comma           reduce using rule 73 (primary -> Identifier .)
    Colon           reduce using rule 73 (primary -> Identifier .)


state 91

    (52) unary -> BitNot unary .

    Mul             reduce using rule 52 (unary -> BitNot unary .)
    Div             reduce using rule 52 (unary -> BitNot unary .)
    Mod             reduce using rule 52 (unary -> BitNot unary .)
    Plus            reduce using rule 52 (unary -> BitNot unary .)
    Minus           reduce using rule 52 (unary -> BitNot unary .)
    Less            reduce using rule 52 (unary -> BitNot unary .)
    Greater         reduce using rule 52 (unary -> BitNot unary .)
    LessEqual       reduce using rule 52 (unary -> BitNot unary .)
    GreaterEqual    reduce using rule 52 (unary -> BitNot unary .)
    NotEqual        reduce using rule 52 (unary -> BitNot unary .)
    Equal           reduce using rule 52 (unary -> BitNot unary .)
    BitAnd          reduce using rule 52 (unary -> BitNot unary .)
    Xor             reduce using rule 52 (unary -> BitNot unary .)
    BitOr           reduce using rule 52 (unary -> BitNot unary .)
    And             reduce using rule 52 (unary -> BitNot unary .)
    Question        reduce using rule 52 (unary -> BitNot unary .)
    Or              reduce using rule 52 (unary -> BitNot unary .)
    Semi            reduce using rule 52 (unary -> BitNot unary .)
    RParen          reduce using rule 52 (unary -> BitNot unary .)
    Comma           reduce using rule 52 (unary -> BitNot unary .)
    Colon           reduce using rule 52 (unary -> BitNot unary .)


state 92

    (53) unary -> Not unary .

    Mul             reduce using rule 53 (unary -> Not unary .)
    Div             reduce using rule 53 (unary -> Not unary .)
    Mod             reduce using rule 53 (unary -> Not unary .)
    Plus            reduce using rule 53 (unary -> Not unary .)
    Minus           reduce using rule 53 (unary -> Not unary .)
    Less            reduce using rule 53 (unary -> Not unary .)
    Greater         reduce using rule 53 (unary -> Not unary .)
    LessEqual       reduce using rule 53 (unary -> Not unary .)
    GreaterEqual    reduce using rule 53 (unary -> Not unary .)
    NotEqual        reduce using rule 53 (unary -> Not unary .)
    Equal           reduce using rule 53 (unary -> Not unary .)
    BitAnd          reduce using rule 53 (unary -> Not unary .)
    Xor             reduce using rule 53 (unary -> Not unary .)
    BitOr           reduce using rule 53 (unary -> Not unary .)
    And             reduce using rule 53 (unary -> Not unary .)
    Question        reduce using rule 53 (unary -> Not unary .)
    Or              reduce using rule 53 (unary -> Not unary .)
    Semi            reduce using rule 53 (unary -> Not unary .)
    RParen          reduce using rule 53 (unary -> Not unary .)
    Comma           reduce using rule 53 (unary -> Not unary .)
    Colon           reduce using rule 53 (unary -> Not unary .)


state 93

    (36) declaration -> type Identifier Assign . expression
    (37) expression -> . assignment
    (38) assignment -> . conditional
    (54) assignment -> . Identifier Assign expression
    (39) conditional -> . logical_or
    (71) conditional -> . logical_or Question expression Colon conditional
    (40) logical_or -> . logical_and
    (55) logical_or -> . logical_or Or logical_and
    (41) logical_and -> . bit_or
    (56) logical_and -> . logical_and And bit_or
    (42) bit_or -> . xor
    (57) bit_or -> . bit_or BitOr xor
    (43) xor -> . bit_and
    (58) xor -> . xor Xor bit_and
    (44) bit_and -> . equality
    (59) bit_and -> . bit_and BitAnd equality
    (45) equality -> . relational
    (60) equality -> . equality NotEqual relational
    (61) equality -> . equality Equal relational
    (46) relational -> . additive
    (62) relational -> . relational Less additive
    (63) relational -> . relational Greater additive
    (64) relational -> . relational LessEqual additive
    (65) relational -> . relational GreaterEqual additive
    (47) additive -> . multiplicative
    (66) additive -> . additive Plus multiplicative
    (67) additive -> . additive Minus multiplicative
    (48) multiplicative -> . unary
    (68) multiplicative -> . multiplicative Mul unary
    (69) multiplicative -> . multiplicative Div unary
    (70) multiplicative -> . multiplicative Mod unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 122
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 94

    (54) assignment -> Identifier Assign expression .

    Semi            reduce using rule 54 (assignment -> Identifier Assign expression .)
    RParen          reduce using rule 54 (assignment -> Identifier Assign expression .)
    Comma           reduce using rule 54 (assignment -> Identifier Assign expression .)
    Colon           reduce using rule 54 (assignment -> Identifier Assign expression .)


state 95

    (10) postfix -> Identifier LParen argu_params . RParen
    (11) argu_params -> argu_params . extra_argu_params
    (14) extra_argu_params -> . Comma expression

    RParen          shift and go to state 123
    Comma           shift and go to state 125

    extra_argu_params              shift and go to state 124

state 96

    (12) argu_params -> expression .

    RParen          reduce using rule 12 (argu_params -> expression .)
    Comma           reduce using rule 12 (argu_params -> expression .)


state 97

    (13) argu_params -> empty .

    RParen          reduce using rule 13 (argu_params -> empty .)
    Comma           reduce using rule 13 (argu_params -> empty .)


state 98

    (74) primary -> LParen expression RParen .

    Mul             reduce using rule 74 (primary -> LParen expression RParen .)
    Div             reduce using rule 74 (primary -> LParen expression RParen .)
    Mod             reduce using rule 74 (primary -> LParen expression RParen .)
    Plus            reduce using rule 74 (primary -> LParen expression RParen .)
    Minus           reduce using rule 74 (primary -> LParen expression RParen .)
    Less            reduce using rule 74 (primary -> LParen expression RParen .)
    Greater         reduce using rule 74 (primary -> LParen expression RParen .)
    LessEqual       reduce using rule 74 (primary -> LParen expression RParen .)
    GreaterEqual    reduce using rule 74 (primary -> LParen expression RParen .)
    NotEqual        reduce using rule 74 (primary -> LParen expression RParen .)
    Equal           reduce using rule 74 (primary -> LParen expression RParen .)
    BitAnd          reduce using rule 74 (primary -> LParen expression RParen .)
    Xor             reduce using rule 74 (primary -> LParen expression RParen .)
    BitOr           reduce using rule 74 (primary -> LParen expression RParen .)
    And             reduce using rule 74 (primary -> LParen expression RParen .)
    Question        reduce using rule 74 (primary -> LParen expression RParen .)
    Or              reduce using rule 74 (primary -> LParen expression RParen .)
    Semi            reduce using rule 74 (primary -> LParen expression RParen .)
    RParen          reduce using rule 74 (primary -> LParen expression RParen .)
    Comma           reduce using rule 74 (primary -> LParen expression RParen .)
    Colon           reduce using rule 74 (primary -> LParen expression RParen .)


state 99

    (30) statement_matched -> LBrace block RBrace .

    RBrace          reduce using rule 30 (statement_matched -> LBrace block RBrace .)
    Do              reduce using rule 30 (statement_matched -> LBrace block RBrace .)
    For             reduce using rule 30 (statement_matched -> LBrace block RBrace .)
    If              reduce using rule 30 (statement_matched -> LBrace block RBrace .)
    While           reduce using rule 30 (statement_matched -> LBrace block RBrace .)
    Return          reduce using rule 30 (statement_matched -> LBrace block RBrace .)
    LBrace          reduce using rule 30 (statement_matched -> LBrace block RBrace .)
    Break           reduce using rule 30 (statement_matched -> LBrace block RBrace .)
    Continue        reduce using rule 30 (statement_matched -> LBrace block RBrace .)
    Int             reduce using rule 30 (statement_matched -> LBrace block RBrace .)
    Identifier      reduce using rule 30 (statement_matched -> LBrace block RBrace .)
    Minus           reduce using rule 30 (statement_matched -> LBrace block RBrace .)
    BitNot          reduce using rule 30 (statement_matched -> LBrace block RBrace .)
    Not             reduce using rule 30 (statement_matched -> LBrace block RBrace .)
    Integer         reduce using rule 30 (statement_matched -> LBrace block RBrace .)
    LParen          reduce using rule 30 (statement_matched -> LBrace block RBrace .)
    Semi            reduce using rule 30 (statement_matched -> LBrace block RBrace .)
    RParen          reduce using rule 30 (statement_matched -> LBrace block RBrace .)
    Else            reduce using rule 30 (statement_matched -> LBrace block RBrace .)


state 100

    (26) statement -> Do statement While . LParen expression RParen

    LParen          shift and go to state 126


state 101

    (24) statement_matched -> While LParen expression . RParen statement_matched
    (25) statement_unmatched -> While LParen expression . RParen statement_unmatched

    RParen          shift and go to state 127


state 102

    (27) statement -> For LParen block_item . block_item opt_expression RParen statement
    (17) block_item -> . statement
    (18) block_item -> . declaration Semi
    (19) statement -> . statement_matched
    (20) statement -> . statement_unmatched
    (26) statement -> . Do statement While LParen expression RParen
    (27) statement -> . For LParen block_item block_item opt_expression RParen statement
    (35) declaration -> . type Identifier
    (36) declaration -> . type Identifier Assign expression
    (21) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (24) statement_matched -> . While LParen expression RParen statement_matched
    (28) statement_matched -> . Return expression Semi
    (29) statement_matched -> . opt_expression Semi
    (30) statement_matched -> . LBrace block RBrace
    (31) statement_matched -> . Break Semi
    (32) statement_matched -> . Continue Semi
    (22) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (23) statement_unmatched -> . If LParen expression RParen statement
    (25) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (4) type -> . Int
    (33) opt_expression -> . expression
    (34) opt_expression -> . empty
    (37) expression -> . assignment
    (1) empty -> .
    (38) assignment -> . conditional
    (54) assignment -> . Identifier Assign expression
    (39) conditional -> . logical_or
    (71) conditional -> . logical_or Question expression Colon conditional
    (40) logical_or -> . logical_and
    (55) logical_or -> . logical_or Or logical_and
    (41) logical_and -> . bit_or
    (56) logical_and -> . logical_and And bit_or
    (42) bit_or -> . xor
    (57) bit_or -> . bit_or BitOr xor
    (43) xor -> . bit_and
    (58) xor -> . xor Xor bit_and
    (44) bit_and -> . equality
    (59) bit_and -> . bit_and BitAnd equality
    (45) equality -> . relational
    (60) equality -> . equality NotEqual relational
    (61) equality -> . equality Equal relational
    (46) relational -> . additive
    (62) relational -> . relational Less additive
    (63) relational -> . relational Greater additive
    (64) relational -> . relational LessEqual additive
    (65) relational -> . relational GreaterEqual additive
    (47) additive -> . multiplicative
    (66) additive -> . additive Plus multiplicative
    (67) additive -> . additive Minus multiplicative
    (48) multiplicative -> . unary
    (68) multiplicative -> . multiplicative Mul unary
    (69) multiplicative -> . multiplicative Div unary
    (70) multiplicative -> . multiplicative Mod unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    Do              shift and go to state 30
    For             shift and go to state 33
    If              shift and go to state 35
    While           shift and go to state 31
    Return          shift and go to state 36
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Int             shift and go to state 5
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    block_item                     shift and go to state 128
    opt_expression                 shift and go to state 34
    statement                      shift and go to state 26
    declaration                    shift and go to state 27
    statement_matched              shift and go to state 28
    statement_unmatched            shift and go to state 29
    expression                     shift and go to state 32
    type                           shift and go to state 20
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 103

    (21) statement_matched -> If LParen expression . RParen statement_matched Else statement_matched
    (22) statement_unmatched -> If LParen expression . RParen statement_matched Else statement_unmatched
    (23) statement_unmatched -> If LParen expression . RParen statement

    RParen          shift and go to state 129


state 104

    (28) statement_matched -> Return expression Semi .

    RBrace          reduce using rule 28 (statement_matched -> Return expression Semi .)
    Do              reduce using rule 28 (statement_matched -> Return expression Semi .)
    For             reduce using rule 28 (statement_matched -> Return expression Semi .)
    If              reduce using rule 28 (statement_matched -> Return expression Semi .)
    While           reduce using rule 28 (statement_matched -> Return expression Semi .)
    Return          reduce using rule 28 (statement_matched -> Return expression Semi .)
    LBrace          reduce using rule 28 (statement_matched -> Return expression Semi .)
    Break           reduce using rule 28 (statement_matched -> Return expression Semi .)
    Continue        reduce using rule 28 (statement_matched -> Return expression Semi .)
    Int             reduce using rule 28 (statement_matched -> Return expression Semi .)
    Identifier      reduce using rule 28 (statement_matched -> Return expression Semi .)
    Minus           reduce using rule 28 (statement_matched -> Return expression Semi .)
    BitNot          reduce using rule 28 (statement_matched -> Return expression Semi .)
    Not             reduce using rule 28 (statement_matched -> Return expression Semi .)
    Integer         reduce using rule 28 (statement_matched -> Return expression Semi .)
    LParen          reduce using rule 28 (statement_matched -> Return expression Semi .)
    Semi            reduce using rule 28 (statement_matched -> Return expression Semi .)
    RParen          reduce using rule 28 (statement_matched -> Return expression Semi .)
    Else            reduce using rule 28 (statement_matched -> Return expression Semi .)


state 105

    (71) conditional -> logical_or Question expression . Colon conditional

    Colon           shift and go to state 130


state 106

    (55) logical_or -> logical_or Or logical_and .
    (56) logical_and -> logical_and . And bit_or

    Question        reduce using rule 55 (logical_or -> logical_or Or logical_and .)
    Or              reduce using rule 55 (logical_or -> logical_or Or logical_and .)
    Semi            reduce using rule 55 (logical_or -> logical_or Or logical_and .)
    RParen          reduce using rule 55 (logical_or -> logical_or Or logical_and .)
    Comma           reduce using rule 55 (logical_or -> logical_or Or logical_and .)
    Colon           reduce using rule 55 (logical_or -> logical_or Or logical_and .)
    And             shift and go to state 74


state 107

    (56) logical_and -> logical_and And bit_or .
    (57) bit_or -> bit_or . BitOr xor

    And             reduce using rule 56 (logical_and -> logical_and And bit_or .)
    Question        reduce using rule 56 (logical_and -> logical_and And bit_or .)
    Or              reduce using rule 56 (logical_and -> logical_and And bit_or .)
    Semi            reduce using rule 56 (logical_and -> logical_and And bit_or .)
    RParen          reduce using rule 56 (logical_and -> logical_and And bit_or .)
    Comma           reduce using rule 56 (logical_and -> logical_and And bit_or .)
    Colon           reduce using rule 56 (logical_and -> logical_and And bit_or .)
    BitOr           shift and go to state 75


state 108

    (57) bit_or -> bit_or BitOr xor .
    (58) xor -> xor . Xor bit_and

    BitOr           reduce using rule 57 (bit_or -> bit_or BitOr xor .)
    And             reduce using rule 57 (bit_or -> bit_or BitOr xor .)
    Question        reduce using rule 57 (bit_or -> bit_or BitOr xor .)
    Or              reduce using rule 57 (bit_or -> bit_or BitOr xor .)
    Semi            reduce using rule 57 (bit_or -> bit_or BitOr xor .)
    RParen          reduce using rule 57 (bit_or -> bit_or BitOr xor .)
    Comma           reduce using rule 57 (bit_or -> bit_or BitOr xor .)
    Colon           reduce using rule 57 (bit_or -> bit_or BitOr xor .)
    Xor             shift and go to state 76


state 109

    (58) xor -> xor Xor bit_and .
    (59) bit_and -> bit_and . BitAnd equality

    Xor             reduce using rule 58 (xor -> xor Xor bit_and .)
    BitOr           reduce using rule 58 (xor -> xor Xor bit_and .)
    And             reduce using rule 58 (xor -> xor Xor bit_and .)
    Question        reduce using rule 58 (xor -> xor Xor bit_and .)
    Or              reduce using rule 58 (xor -> xor Xor bit_and .)
    Semi            reduce using rule 58 (xor -> xor Xor bit_and .)
    RParen          reduce using rule 58 (xor -> xor Xor bit_and .)
    Comma           reduce using rule 58 (xor -> xor Xor bit_and .)
    Colon           reduce using rule 58 (xor -> xor Xor bit_and .)
    BitAnd          shift and go to state 77


state 110

    (59) bit_and -> bit_and BitAnd equality .
    (60) equality -> equality . NotEqual relational
    (61) equality -> equality . Equal relational

    BitAnd          reduce using rule 59 (bit_and -> bit_and BitAnd equality .)
    Xor             reduce using rule 59 (bit_and -> bit_and BitAnd equality .)
    BitOr           reduce using rule 59 (bit_and -> bit_and BitAnd equality .)
    And             reduce using rule 59 (bit_and -> bit_and BitAnd equality .)
    Question        reduce using rule 59 (bit_and -> bit_and BitAnd equality .)
    Or              reduce using rule 59 (bit_and -> bit_and BitAnd equality .)
    Semi            reduce using rule 59 (bit_and -> bit_and BitAnd equality .)
    RParen          reduce using rule 59 (bit_and -> bit_and BitAnd equality .)
    Comma           reduce using rule 59 (bit_and -> bit_and BitAnd equality .)
    Colon           reduce using rule 59 (bit_and -> bit_and BitAnd equality .)
    NotEqual        shift and go to state 78
    Equal           shift and go to state 79


state 111

    (60) equality -> equality NotEqual relational .
    (62) relational -> relational . Less additive
    (63) relational -> relational . Greater additive
    (64) relational -> relational . LessEqual additive
    (65) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 60 (equality -> equality NotEqual relational .)
    Equal           reduce using rule 60 (equality -> equality NotEqual relational .)
    BitAnd          reduce using rule 60 (equality -> equality NotEqual relational .)
    Xor             reduce using rule 60 (equality -> equality NotEqual relational .)
    BitOr           reduce using rule 60 (equality -> equality NotEqual relational .)
    And             reduce using rule 60 (equality -> equality NotEqual relational .)
    Question        reduce using rule 60 (equality -> equality NotEqual relational .)
    Or              reduce using rule 60 (equality -> equality NotEqual relational .)
    Semi            reduce using rule 60 (equality -> equality NotEqual relational .)
    RParen          reduce using rule 60 (equality -> equality NotEqual relational .)
    Comma           reduce using rule 60 (equality -> equality NotEqual relational .)
    Colon           reduce using rule 60 (equality -> equality NotEqual relational .)
    Less            shift and go to state 80
    Greater         shift and go to state 81
    LessEqual       shift and go to state 82
    GreaterEqual    shift and go to state 83


state 112

    (61) equality -> equality Equal relational .
    (62) relational -> relational . Less additive
    (63) relational -> relational . Greater additive
    (64) relational -> relational . LessEqual additive
    (65) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 61 (equality -> equality Equal relational .)
    Equal           reduce using rule 61 (equality -> equality Equal relational .)
    BitAnd          reduce using rule 61 (equality -> equality Equal relational .)
    Xor             reduce using rule 61 (equality -> equality Equal relational .)
    BitOr           reduce using rule 61 (equality -> equality Equal relational .)
    And             reduce using rule 61 (equality -> equality Equal relational .)
    Question        reduce using rule 61 (equality -> equality Equal relational .)
    Or              reduce using rule 61 (equality -> equality Equal relational .)
    Semi            reduce using rule 61 (equality -> equality Equal relational .)
    RParen          reduce using rule 61 (equality -> equality Equal relational .)
    Comma           reduce using rule 61 (equality -> equality Equal relational .)
    Colon           reduce using rule 61 (equality -> equality Equal relational .)
    Less            shift and go to state 80
    Greater         shift and go to state 81
    LessEqual       shift and go to state 82
    GreaterEqual    shift and go to state 83


state 113

    (62) relational -> relational Less additive .
    (66) additive -> additive . Plus multiplicative
    (67) additive -> additive . Minus multiplicative

    Less            reduce using rule 62 (relational -> relational Less additive .)
    Greater         reduce using rule 62 (relational -> relational Less additive .)
    LessEqual       reduce using rule 62 (relational -> relational Less additive .)
    GreaterEqual    reduce using rule 62 (relational -> relational Less additive .)
    NotEqual        reduce using rule 62 (relational -> relational Less additive .)
    Equal           reduce using rule 62 (relational -> relational Less additive .)
    BitAnd          reduce using rule 62 (relational -> relational Less additive .)
    Xor             reduce using rule 62 (relational -> relational Less additive .)
    BitOr           reduce using rule 62 (relational -> relational Less additive .)
    And             reduce using rule 62 (relational -> relational Less additive .)
    Question        reduce using rule 62 (relational -> relational Less additive .)
    Or              reduce using rule 62 (relational -> relational Less additive .)
    Semi            reduce using rule 62 (relational -> relational Less additive .)
    RParen          reduce using rule 62 (relational -> relational Less additive .)
    Comma           reduce using rule 62 (relational -> relational Less additive .)
    Colon           reduce using rule 62 (relational -> relational Less additive .)
    Plus            shift and go to state 84
    Minus           shift and go to state 85


state 114

    (63) relational -> relational Greater additive .
    (66) additive -> additive . Plus multiplicative
    (67) additive -> additive . Minus multiplicative

    Less            reduce using rule 63 (relational -> relational Greater additive .)
    Greater         reduce using rule 63 (relational -> relational Greater additive .)
    LessEqual       reduce using rule 63 (relational -> relational Greater additive .)
    GreaterEqual    reduce using rule 63 (relational -> relational Greater additive .)
    NotEqual        reduce using rule 63 (relational -> relational Greater additive .)
    Equal           reduce using rule 63 (relational -> relational Greater additive .)
    BitAnd          reduce using rule 63 (relational -> relational Greater additive .)
    Xor             reduce using rule 63 (relational -> relational Greater additive .)
    BitOr           reduce using rule 63 (relational -> relational Greater additive .)
    And             reduce using rule 63 (relational -> relational Greater additive .)
    Question        reduce using rule 63 (relational -> relational Greater additive .)
    Or              reduce using rule 63 (relational -> relational Greater additive .)
    Semi            reduce using rule 63 (relational -> relational Greater additive .)
    RParen          reduce using rule 63 (relational -> relational Greater additive .)
    Comma           reduce using rule 63 (relational -> relational Greater additive .)
    Colon           reduce using rule 63 (relational -> relational Greater additive .)
    Plus            shift and go to state 84
    Minus           shift and go to state 85


state 115

    (64) relational -> relational LessEqual additive .
    (66) additive -> additive . Plus multiplicative
    (67) additive -> additive . Minus multiplicative

    Less            reduce using rule 64 (relational -> relational LessEqual additive .)
    Greater         reduce using rule 64 (relational -> relational LessEqual additive .)
    LessEqual       reduce using rule 64 (relational -> relational LessEqual additive .)
    GreaterEqual    reduce using rule 64 (relational -> relational LessEqual additive .)
    NotEqual        reduce using rule 64 (relational -> relational LessEqual additive .)
    Equal           reduce using rule 64 (relational -> relational LessEqual additive .)
    BitAnd          reduce using rule 64 (relational -> relational LessEqual additive .)
    Xor             reduce using rule 64 (relational -> relational LessEqual additive .)
    BitOr           reduce using rule 64 (relational -> relational LessEqual additive .)
    And             reduce using rule 64 (relational -> relational LessEqual additive .)
    Question        reduce using rule 64 (relational -> relational LessEqual additive .)
    Or              reduce using rule 64 (relational -> relational LessEqual additive .)
    Semi            reduce using rule 64 (relational -> relational LessEqual additive .)
    RParen          reduce using rule 64 (relational -> relational LessEqual additive .)
    Comma           reduce using rule 64 (relational -> relational LessEqual additive .)
    Colon           reduce using rule 64 (relational -> relational LessEqual additive .)
    Plus            shift and go to state 84
    Minus           shift and go to state 85


state 116

    (65) relational -> relational GreaterEqual additive .
    (66) additive -> additive . Plus multiplicative
    (67) additive -> additive . Minus multiplicative

    Less            reduce using rule 65 (relational -> relational GreaterEqual additive .)
    Greater         reduce using rule 65 (relational -> relational GreaterEqual additive .)
    LessEqual       reduce using rule 65 (relational -> relational GreaterEqual additive .)
    GreaterEqual    reduce using rule 65 (relational -> relational GreaterEqual additive .)
    NotEqual        reduce using rule 65 (relational -> relational GreaterEqual additive .)
    Equal           reduce using rule 65 (relational -> relational GreaterEqual additive .)
    BitAnd          reduce using rule 65 (relational -> relational GreaterEqual additive .)
    Xor             reduce using rule 65 (relational -> relational GreaterEqual additive .)
    BitOr           reduce using rule 65 (relational -> relational GreaterEqual additive .)
    And             reduce using rule 65 (relational -> relational GreaterEqual additive .)
    Question        reduce using rule 65 (relational -> relational GreaterEqual additive .)
    Or              reduce using rule 65 (relational -> relational GreaterEqual additive .)
    Semi            reduce using rule 65 (relational -> relational GreaterEqual additive .)
    RParen          reduce using rule 65 (relational -> relational GreaterEqual additive .)
    Comma           reduce using rule 65 (relational -> relational GreaterEqual additive .)
    Colon           reduce using rule 65 (relational -> relational GreaterEqual additive .)
    Plus            shift and go to state 84
    Minus           shift and go to state 85


state 117

    (66) additive -> additive Plus multiplicative .
    (68) multiplicative -> multiplicative . Mul unary
    (69) multiplicative -> multiplicative . Div unary
    (70) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 66 (additive -> additive Plus multiplicative .)
    Minus           reduce using rule 66 (additive -> additive Plus multiplicative .)
    Less            reduce using rule 66 (additive -> additive Plus multiplicative .)
    Greater         reduce using rule 66 (additive -> additive Plus multiplicative .)
    LessEqual       reduce using rule 66 (additive -> additive Plus multiplicative .)
    GreaterEqual    reduce using rule 66 (additive -> additive Plus multiplicative .)
    NotEqual        reduce using rule 66 (additive -> additive Plus multiplicative .)
    Equal           reduce using rule 66 (additive -> additive Plus multiplicative .)
    BitAnd          reduce using rule 66 (additive -> additive Plus multiplicative .)
    Xor             reduce using rule 66 (additive -> additive Plus multiplicative .)
    BitOr           reduce using rule 66 (additive -> additive Plus multiplicative .)
    And             reduce using rule 66 (additive -> additive Plus multiplicative .)
    Question        reduce using rule 66 (additive -> additive Plus multiplicative .)
    Or              reduce using rule 66 (additive -> additive Plus multiplicative .)
    Semi            reduce using rule 66 (additive -> additive Plus multiplicative .)
    RParen          reduce using rule 66 (additive -> additive Plus multiplicative .)
    Comma           reduce using rule 66 (additive -> additive Plus multiplicative .)
    Colon           reduce using rule 66 (additive -> additive Plus multiplicative .)
    Mul             shift and go to state 86
    Div             shift and go to state 87
    Mod             shift and go to state 88


state 118

    (67) additive -> additive Minus multiplicative .
    (68) multiplicative -> multiplicative . Mul unary
    (69) multiplicative -> multiplicative . Div unary
    (70) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 67 (additive -> additive Minus multiplicative .)
    Minus           reduce using rule 67 (additive -> additive Minus multiplicative .)
    Less            reduce using rule 67 (additive -> additive Minus multiplicative .)
    Greater         reduce using rule 67 (additive -> additive Minus multiplicative .)
    LessEqual       reduce using rule 67 (additive -> additive Minus multiplicative .)
    GreaterEqual    reduce using rule 67 (additive -> additive Minus multiplicative .)
    NotEqual        reduce using rule 67 (additive -> additive Minus multiplicative .)
    Equal           reduce using rule 67 (additive -> additive Minus multiplicative .)
    BitAnd          reduce using rule 67 (additive -> additive Minus multiplicative .)
    Xor             reduce using rule 67 (additive -> additive Minus multiplicative .)
    BitOr           reduce using rule 67 (additive -> additive Minus multiplicative .)
    And             reduce using rule 67 (additive -> additive Minus multiplicative .)
    Question        reduce using rule 67 (additive -> additive Minus multiplicative .)
    Or              reduce using rule 67 (additive -> additive Minus multiplicative .)
    Semi            reduce using rule 67 (additive -> additive Minus multiplicative .)
    RParen          reduce using rule 67 (additive -> additive Minus multiplicative .)
    Comma           reduce using rule 67 (additive -> additive Minus multiplicative .)
    Colon           reduce using rule 67 (additive -> additive Minus multiplicative .)
    Mul             shift and go to state 86
    Div             shift and go to state 87
    Mod             shift and go to state 88


state 119

    (68) multiplicative -> multiplicative Mul unary .

    Mul             reduce using rule 68 (multiplicative -> multiplicative Mul unary .)
    Div             reduce using rule 68 (multiplicative -> multiplicative Mul unary .)
    Mod             reduce using rule 68 (multiplicative -> multiplicative Mul unary .)
    Plus            reduce using rule 68 (multiplicative -> multiplicative Mul unary .)
    Minus           reduce using rule 68 (multiplicative -> multiplicative Mul unary .)
    Less            reduce using rule 68 (multiplicative -> multiplicative Mul unary .)
    Greater         reduce using rule 68 (multiplicative -> multiplicative Mul unary .)
    LessEqual       reduce using rule 68 (multiplicative -> multiplicative Mul unary .)
    GreaterEqual    reduce using rule 68 (multiplicative -> multiplicative Mul unary .)
    NotEqual        reduce using rule 68 (multiplicative -> multiplicative Mul unary .)
    Equal           reduce using rule 68 (multiplicative -> multiplicative Mul unary .)
    BitAnd          reduce using rule 68 (multiplicative -> multiplicative Mul unary .)
    Xor             reduce using rule 68 (multiplicative -> multiplicative Mul unary .)
    BitOr           reduce using rule 68 (multiplicative -> multiplicative Mul unary .)
    And             reduce using rule 68 (multiplicative -> multiplicative Mul unary .)
    Question        reduce using rule 68 (multiplicative -> multiplicative Mul unary .)
    Or              reduce using rule 68 (multiplicative -> multiplicative Mul unary .)
    Semi            reduce using rule 68 (multiplicative -> multiplicative Mul unary .)
    RParen          reduce using rule 68 (multiplicative -> multiplicative Mul unary .)
    Comma           reduce using rule 68 (multiplicative -> multiplicative Mul unary .)
    Colon           reduce using rule 68 (multiplicative -> multiplicative Mul unary .)


state 120

    (69) multiplicative -> multiplicative Div unary .

    Mul             reduce using rule 69 (multiplicative -> multiplicative Div unary .)
    Div             reduce using rule 69 (multiplicative -> multiplicative Div unary .)
    Mod             reduce using rule 69 (multiplicative -> multiplicative Div unary .)
    Plus            reduce using rule 69 (multiplicative -> multiplicative Div unary .)
    Minus           reduce using rule 69 (multiplicative -> multiplicative Div unary .)
    Less            reduce using rule 69 (multiplicative -> multiplicative Div unary .)
    Greater         reduce using rule 69 (multiplicative -> multiplicative Div unary .)
    LessEqual       reduce using rule 69 (multiplicative -> multiplicative Div unary .)
    GreaterEqual    reduce using rule 69 (multiplicative -> multiplicative Div unary .)
    NotEqual        reduce using rule 69 (multiplicative -> multiplicative Div unary .)
    Equal           reduce using rule 69 (multiplicative -> multiplicative Div unary .)
    BitAnd          reduce using rule 69 (multiplicative -> multiplicative Div unary .)
    Xor             reduce using rule 69 (multiplicative -> multiplicative Div unary .)
    BitOr           reduce using rule 69 (multiplicative -> multiplicative Div unary .)
    And             reduce using rule 69 (multiplicative -> multiplicative Div unary .)
    Question        reduce using rule 69 (multiplicative -> multiplicative Div unary .)
    Or              reduce using rule 69 (multiplicative -> multiplicative Div unary .)
    Semi            reduce using rule 69 (multiplicative -> multiplicative Div unary .)
    RParen          reduce using rule 69 (multiplicative -> multiplicative Div unary .)
    Comma           reduce using rule 69 (multiplicative -> multiplicative Div unary .)
    Colon           reduce using rule 69 (multiplicative -> multiplicative Div unary .)


state 121

    (70) multiplicative -> multiplicative Mod unary .

    Mul             reduce using rule 70 (multiplicative -> multiplicative Mod unary .)
    Div             reduce using rule 70 (multiplicative -> multiplicative Mod unary .)
    Mod             reduce using rule 70 (multiplicative -> multiplicative Mod unary .)
    Plus            reduce using rule 70 (multiplicative -> multiplicative Mod unary .)
    Minus           reduce using rule 70 (multiplicative -> multiplicative Mod unary .)
    Less            reduce using rule 70 (multiplicative -> multiplicative Mod unary .)
    Greater         reduce using rule 70 (multiplicative -> multiplicative Mod unary .)
    LessEqual       reduce using rule 70 (multiplicative -> multiplicative Mod unary .)
    GreaterEqual    reduce using rule 70 (multiplicative -> multiplicative Mod unary .)
    NotEqual        reduce using rule 70 (multiplicative -> multiplicative Mod unary .)
    Equal           reduce using rule 70 (multiplicative -> multiplicative Mod unary .)
    BitAnd          reduce using rule 70 (multiplicative -> multiplicative Mod unary .)
    Xor             reduce using rule 70 (multiplicative -> multiplicative Mod unary .)
    BitOr           reduce using rule 70 (multiplicative -> multiplicative Mod unary .)
    And             reduce using rule 70 (multiplicative -> multiplicative Mod unary .)
    Question        reduce using rule 70 (multiplicative -> multiplicative Mod unary .)
    Or              reduce using rule 70 (multiplicative -> multiplicative Mod unary .)
    Semi            reduce using rule 70 (multiplicative -> multiplicative Mod unary .)
    RParen          reduce using rule 70 (multiplicative -> multiplicative Mod unary .)
    Comma           reduce using rule 70 (multiplicative -> multiplicative Mod unary .)
    Colon           reduce using rule 70 (multiplicative -> multiplicative Mod unary .)


state 122

    (36) declaration -> type Identifier Assign expression .

    Semi            reduce using rule 36 (declaration -> type Identifier Assign expression .)


state 123

    (10) postfix -> Identifier LParen argu_params RParen .

    Mul             reduce using rule 10 (postfix -> Identifier LParen argu_params RParen .)
    Div             reduce using rule 10 (postfix -> Identifier LParen argu_params RParen .)
    Mod             reduce using rule 10 (postfix -> Identifier LParen argu_params RParen .)
    Plus            reduce using rule 10 (postfix -> Identifier LParen argu_params RParen .)
    Minus           reduce using rule 10 (postfix -> Identifier LParen argu_params RParen .)
    Less            reduce using rule 10 (postfix -> Identifier LParen argu_params RParen .)
    Greater         reduce using rule 10 (postfix -> Identifier LParen argu_params RParen .)
    LessEqual       reduce using rule 10 (postfix -> Identifier LParen argu_params RParen .)
    GreaterEqual    reduce using rule 10 (postfix -> Identifier LParen argu_params RParen .)
    NotEqual        reduce using rule 10 (postfix -> Identifier LParen argu_params RParen .)
    Equal           reduce using rule 10 (postfix -> Identifier LParen argu_params RParen .)
    BitAnd          reduce using rule 10 (postfix -> Identifier LParen argu_params RParen .)
    Xor             reduce using rule 10 (postfix -> Identifier LParen argu_params RParen .)
    BitOr           reduce using rule 10 (postfix -> Identifier LParen argu_params RParen .)
    And             reduce using rule 10 (postfix -> Identifier LParen argu_params RParen .)
    Question        reduce using rule 10 (postfix -> Identifier LParen argu_params RParen .)
    Or              reduce using rule 10 (postfix -> Identifier LParen argu_params RParen .)
    Semi            reduce using rule 10 (postfix -> Identifier LParen argu_params RParen .)
    RParen          reduce using rule 10 (postfix -> Identifier LParen argu_params RParen .)
    Comma           reduce using rule 10 (postfix -> Identifier LParen argu_params RParen .)
    Colon           reduce using rule 10 (postfix -> Identifier LParen argu_params RParen .)


state 124

    (11) argu_params -> argu_params extra_argu_params .

    RParen          reduce using rule 11 (argu_params -> argu_params extra_argu_params .)
    Comma           reduce using rule 11 (argu_params -> argu_params extra_argu_params .)


state 125

    (14) extra_argu_params -> Comma . expression
    (37) expression -> . assignment
    (38) assignment -> . conditional
    (54) assignment -> . Identifier Assign expression
    (39) conditional -> . logical_or
    (71) conditional -> . logical_or Question expression Colon conditional
    (40) logical_or -> . logical_and
    (55) logical_or -> . logical_or Or logical_and
    (41) logical_and -> . bit_or
    (56) logical_and -> . logical_and And bit_or
    (42) bit_or -> . xor
    (57) bit_or -> . bit_or BitOr xor
    (43) xor -> . bit_and
    (58) xor -> . xor Xor bit_and
    (44) bit_and -> . equality
    (59) bit_and -> . bit_and BitAnd equality
    (45) equality -> . relational
    (60) equality -> . equality NotEqual relational
    (61) equality -> . equality Equal relational
    (46) relational -> . additive
    (62) relational -> . relational Less additive
    (63) relational -> . relational Greater additive
    (64) relational -> . relational LessEqual additive
    (65) relational -> . relational GreaterEqual additive
    (47) additive -> . multiplicative
    (66) additive -> . additive Plus multiplicative
    (67) additive -> . additive Minus multiplicative
    (48) multiplicative -> . unary
    (68) multiplicative -> . multiplicative Mul unary
    (69) multiplicative -> . multiplicative Div unary
    (70) multiplicative -> . multiplicative Mod unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 131
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 126

    (26) statement -> Do statement While LParen . expression RParen
    (37) expression -> . assignment
    (38) assignment -> . conditional
    (54) assignment -> . Identifier Assign expression
    (39) conditional -> . logical_or
    (71) conditional -> . logical_or Question expression Colon conditional
    (40) logical_or -> . logical_and
    (55) logical_or -> . logical_or Or logical_and
    (41) logical_and -> . bit_or
    (56) logical_and -> . logical_and And bit_or
    (42) bit_or -> . xor
    (57) bit_or -> . bit_or BitOr xor
    (43) xor -> . bit_and
    (58) xor -> . xor Xor bit_and
    (44) bit_and -> . equality
    (59) bit_and -> . bit_and BitAnd equality
    (45) equality -> . relational
    (60) equality -> . equality NotEqual relational
    (61) equality -> . equality Equal relational
    (46) relational -> . additive
    (62) relational -> . relational Less additive
    (63) relational -> . relational Greater additive
    (64) relational -> . relational LessEqual additive
    (65) relational -> . relational GreaterEqual additive
    (47) additive -> . multiplicative
    (66) additive -> . additive Plus multiplicative
    (67) additive -> . additive Minus multiplicative
    (48) multiplicative -> . unary
    (68) multiplicative -> . multiplicative Mul unary
    (69) multiplicative -> . multiplicative Div unary
    (70) multiplicative -> . multiplicative Mod unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 132
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 127

    (24) statement_matched -> While LParen expression RParen . statement_matched
    (25) statement_unmatched -> While LParen expression RParen . statement_unmatched
    (21) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (24) statement_matched -> . While LParen expression RParen statement_matched
    (28) statement_matched -> . Return expression Semi
    (29) statement_matched -> . opt_expression Semi
    (30) statement_matched -> . LBrace block RBrace
    (31) statement_matched -> . Break Semi
    (32) statement_matched -> . Continue Semi
    (22) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (23) statement_unmatched -> . If LParen expression RParen statement
    (25) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (33) opt_expression -> . expression
    (34) opt_expression -> . empty
    (37) expression -> . assignment
    (1) empty -> .
    (38) assignment -> . conditional
    (54) assignment -> . Identifier Assign expression
    (39) conditional -> . logical_or
    (71) conditional -> . logical_or Question expression Colon conditional
    (40) logical_or -> . logical_and
    (55) logical_or -> . logical_or Or logical_and
    (41) logical_and -> . bit_or
    (56) logical_and -> . logical_and And bit_or
    (42) bit_or -> . xor
    (57) bit_or -> . bit_or BitOr xor
    (43) xor -> . bit_and
    (58) xor -> . xor Xor bit_and
    (44) bit_and -> . equality
    (59) bit_and -> . bit_and BitAnd equality
    (45) equality -> . relational
    (60) equality -> . equality NotEqual relational
    (61) equality -> . equality Equal relational
    (46) relational -> . additive
    (62) relational -> . relational Less additive
    (63) relational -> . relational Greater additive
    (64) relational -> . relational LessEqual additive
    (65) relational -> . relational GreaterEqual additive
    (47) additive -> . multiplicative
    (66) additive -> . additive Plus multiplicative
    (67) additive -> . additive Minus multiplicative
    (48) multiplicative -> . unary
    (68) multiplicative -> . multiplicative Mul unary
    (69) multiplicative -> . multiplicative Div unary
    (70) multiplicative -> . multiplicative Mod unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    If              shift and go to state 35
    While           shift and go to state 31
    Return          shift and go to state 36
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 32
    statement_matched              shift and go to state 133
    statement_unmatched            shift and go to state 134
    opt_expression                 shift and go to state 34
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 128

    (27) statement -> For LParen block_item block_item . opt_expression RParen statement
    (33) opt_expression -> . expression
    (34) opt_expression -> . empty
    (37) expression -> . assignment
    (1) empty -> .
    (38) assignment -> . conditional
    (54) assignment -> . Identifier Assign expression
    (39) conditional -> . logical_or
    (71) conditional -> . logical_or Question expression Colon conditional
    (40) logical_or -> . logical_and
    (55) logical_or -> . logical_or Or logical_and
    (41) logical_and -> . bit_or
    (56) logical_and -> . logical_and And bit_or
    (42) bit_or -> . xor
    (57) bit_or -> . bit_or BitOr xor
    (43) xor -> . bit_and
    (58) xor -> . xor Xor bit_and
    (44) bit_and -> . equality
    (59) bit_and -> . bit_and BitAnd equality
    (45) equality -> . relational
    (60) equality -> . equality NotEqual relational
    (61) equality -> . equality Equal relational
    (46) relational -> . additive
    (62) relational -> . relational Less additive
    (63) relational -> . relational Greater additive
    (64) relational -> . relational LessEqual additive
    (65) relational -> . relational GreaterEqual additive
    (47) additive -> . multiplicative
    (66) additive -> . additive Plus multiplicative
    (67) additive -> . additive Minus multiplicative
    (48) multiplicative -> . unary
    (68) multiplicative -> . multiplicative Mul unary
    (69) multiplicative -> . multiplicative Div unary
    (70) multiplicative -> . multiplicative Mod unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    opt_expression                 shift and go to state 135
    expression                     shift and go to state 32
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 129

    (21) statement_matched -> If LParen expression RParen . statement_matched Else statement_matched
    (22) statement_unmatched -> If LParen expression RParen . statement_matched Else statement_unmatched
    (23) statement_unmatched -> If LParen expression RParen . statement
    (21) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (24) statement_matched -> . While LParen expression RParen statement_matched
    (28) statement_matched -> . Return expression Semi
    (29) statement_matched -> . opt_expression Semi
    (30) statement_matched -> . LBrace block RBrace
    (31) statement_matched -> . Break Semi
    (32) statement_matched -> . Continue Semi
    (19) statement -> . statement_matched
    (20) statement -> . statement_unmatched
    (26) statement -> . Do statement While LParen expression RParen
    (27) statement -> . For LParen block_item block_item opt_expression RParen statement
    (33) opt_expression -> . expression
    (34) opt_expression -> . empty
    (22) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (23) statement_unmatched -> . If LParen expression RParen statement
    (25) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (37) expression -> . assignment
    (1) empty -> .
    (38) assignment -> . conditional
    (54) assignment -> . Identifier Assign expression
    (39) conditional -> . logical_or
    (71) conditional -> . logical_or Question expression Colon conditional
    (40) logical_or -> . logical_and
    (55) logical_or -> . logical_or Or logical_and
    (41) logical_and -> . bit_or
    (56) logical_and -> . logical_and And bit_or
    (42) bit_or -> . xor
    (57) bit_or -> . bit_or BitOr xor
    (43) xor -> . bit_and
    (58) xor -> . xor Xor bit_and
    (44) bit_and -> . equality
    (59) bit_and -> . bit_and BitAnd equality
    (45) equality -> . relational
    (60) equality -> . equality NotEqual relational
    (61) equality -> . equality Equal relational
    (46) relational -> . additive
    (62) relational -> . relational Less additive
    (63) relational -> . relational Greater additive
    (64) relational -> . relational LessEqual additive
    (65) relational -> . relational GreaterEqual additive
    (47) additive -> . multiplicative
    (66) additive -> . additive Plus multiplicative
    (67) additive -> . additive Minus multiplicative
    (48) multiplicative -> . unary
    (68) multiplicative -> . multiplicative Mul unary
    (69) multiplicative -> . multiplicative Div unary
    (70) multiplicative -> . multiplicative Mod unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    If              shift and go to state 35
    While           shift and go to state 31
    Return          shift and go to state 36
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Do              shift and go to state 30
    For             shift and go to state 33
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 32
    statement_matched              shift and go to state 136
    statement_unmatched            shift and go to state 29
    statement                      shift and go to state 137
    opt_expression                 shift and go to state 34
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 130

    (71) conditional -> logical_or Question expression Colon . conditional
    (39) conditional -> . logical_or
    (71) conditional -> . logical_or Question expression Colon conditional
    (40) logical_or -> . logical_and
    (55) logical_or -> . logical_or Or logical_and
    (41) logical_and -> . bit_or
    (56) logical_and -> . logical_and And bit_or
    (42) bit_or -> . xor
    (57) bit_or -> . bit_or BitOr xor
    (43) xor -> . bit_and
    (58) xor -> . xor Xor bit_and
    (44) bit_and -> . equality
    (59) bit_and -> . bit_and BitAnd equality
    (45) equality -> . relational
    (60) equality -> . equality NotEqual relational
    (61) equality -> . equality Equal relational
    (46) relational -> . additive
    (62) relational -> . relational Less additive
    (63) relational -> . relational Greater additive
    (64) relational -> . relational LessEqual additive
    (65) relational -> . relational GreaterEqual additive
    (47) additive -> . multiplicative
    (66) additive -> . additive Plus multiplicative
    (67) additive -> . additive Minus multiplicative
    (48) multiplicative -> . unary
    (68) multiplicative -> . multiplicative Mul unary
    (69) multiplicative -> . multiplicative Div unary
    (70) multiplicative -> . multiplicative Mod unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 90
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    logical_or                     shift and go to state 42
    conditional                    shift and go to state 138
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 131

    (14) extra_argu_params -> Comma expression .

    RParen          reduce using rule 14 (extra_argu_params -> Comma expression .)
    Comma           reduce using rule 14 (extra_argu_params -> Comma expression .)


state 132

    (26) statement -> Do statement While LParen expression . RParen

    RParen          shift and go to state 139


state 133

    (24) statement_matched -> While LParen expression RParen statement_matched .

    RBrace          reduce using rule 24 (statement_matched -> While LParen expression RParen statement_matched .)
    Do              reduce using rule 24 (statement_matched -> While LParen expression RParen statement_matched .)
    For             reduce using rule 24 (statement_matched -> While LParen expression RParen statement_matched .)
    If              reduce using rule 24 (statement_matched -> While LParen expression RParen statement_matched .)
    While           reduce using rule 24 (statement_matched -> While LParen expression RParen statement_matched .)
    Return          reduce using rule 24 (statement_matched -> While LParen expression RParen statement_matched .)
    LBrace          reduce using rule 24 (statement_matched -> While LParen expression RParen statement_matched .)
    Break           reduce using rule 24 (statement_matched -> While LParen expression RParen statement_matched .)
    Continue        reduce using rule 24 (statement_matched -> While LParen expression RParen statement_matched .)
    Int             reduce using rule 24 (statement_matched -> While LParen expression RParen statement_matched .)
    Identifier      reduce using rule 24 (statement_matched -> While LParen expression RParen statement_matched .)
    Minus           reduce using rule 24 (statement_matched -> While LParen expression RParen statement_matched .)
    BitNot          reduce using rule 24 (statement_matched -> While LParen expression RParen statement_matched .)
    Not             reduce using rule 24 (statement_matched -> While LParen expression RParen statement_matched .)
    Integer         reduce using rule 24 (statement_matched -> While LParen expression RParen statement_matched .)
    LParen          reduce using rule 24 (statement_matched -> While LParen expression RParen statement_matched .)
    Semi            reduce using rule 24 (statement_matched -> While LParen expression RParen statement_matched .)
    RParen          reduce using rule 24 (statement_matched -> While LParen expression RParen statement_matched .)
    Else            reduce using rule 24 (statement_matched -> While LParen expression RParen statement_matched .)


state 134

    (25) statement_unmatched -> While LParen expression RParen statement_unmatched .

    RBrace          reduce using rule 25 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Do              reduce using rule 25 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    For             reduce using rule 25 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    If              reduce using rule 25 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    While           reduce using rule 25 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Return          reduce using rule 25 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    LBrace          reduce using rule 25 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Break           reduce using rule 25 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Continue        reduce using rule 25 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Int             reduce using rule 25 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Identifier      reduce using rule 25 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Minus           reduce using rule 25 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    BitNot          reduce using rule 25 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Not             reduce using rule 25 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Integer         reduce using rule 25 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    LParen          reduce using rule 25 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Semi            reduce using rule 25 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    RParen          reduce using rule 25 (statement_unmatched -> While LParen expression RParen statement_unmatched .)


state 135

    (27) statement -> For LParen block_item block_item opt_expression . RParen statement

    RParen          shift and go to state 140


state 136

    (21) statement_matched -> If LParen expression RParen statement_matched . Else statement_matched
    (22) statement_unmatched -> If LParen expression RParen statement_matched . Else statement_unmatched
    (19) statement -> statement_matched .

    Else            shift and go to state 141
    RBrace          reduce using rule 19 (statement -> statement_matched .)
    Do              reduce using rule 19 (statement -> statement_matched .)
    For             reduce using rule 19 (statement -> statement_matched .)
    If              reduce using rule 19 (statement -> statement_matched .)
    While           reduce using rule 19 (statement -> statement_matched .)
    Return          reduce using rule 19 (statement -> statement_matched .)
    LBrace          reduce using rule 19 (statement -> statement_matched .)
    Break           reduce using rule 19 (statement -> statement_matched .)
    Continue        reduce using rule 19 (statement -> statement_matched .)
    Int             reduce using rule 19 (statement -> statement_matched .)
    Identifier      reduce using rule 19 (statement -> statement_matched .)
    Minus           reduce using rule 19 (statement -> statement_matched .)
    BitNot          reduce using rule 19 (statement -> statement_matched .)
    Not             reduce using rule 19 (statement -> statement_matched .)
    Integer         reduce using rule 19 (statement -> statement_matched .)
    LParen          reduce using rule 19 (statement -> statement_matched .)
    Semi            reduce using rule 19 (statement -> statement_matched .)
    RParen          reduce using rule 19 (statement -> statement_matched .)


state 137

    (23) statement_unmatched -> If LParen expression RParen statement .

    RBrace          reduce using rule 23 (statement_unmatched -> If LParen expression RParen statement .)
    Do              reduce using rule 23 (statement_unmatched -> If LParen expression RParen statement .)
    For             reduce using rule 23 (statement_unmatched -> If LParen expression RParen statement .)
    If              reduce using rule 23 (statement_unmatched -> If LParen expression RParen statement .)
    While           reduce using rule 23 (statement_unmatched -> If LParen expression RParen statement .)
    Return          reduce using rule 23 (statement_unmatched -> If LParen expression RParen statement .)
    LBrace          reduce using rule 23 (statement_unmatched -> If LParen expression RParen statement .)
    Break           reduce using rule 23 (statement_unmatched -> If LParen expression RParen statement .)
    Continue        reduce using rule 23 (statement_unmatched -> If LParen expression RParen statement .)
    Int             reduce using rule 23 (statement_unmatched -> If LParen expression RParen statement .)
    Identifier      reduce using rule 23 (statement_unmatched -> If LParen expression RParen statement .)
    Minus           reduce using rule 23 (statement_unmatched -> If LParen expression RParen statement .)
    BitNot          reduce using rule 23 (statement_unmatched -> If LParen expression RParen statement .)
    Not             reduce using rule 23 (statement_unmatched -> If LParen expression RParen statement .)
    Integer         reduce using rule 23 (statement_unmatched -> If LParen expression RParen statement .)
    LParen          reduce using rule 23 (statement_unmatched -> If LParen expression RParen statement .)
    Semi            reduce using rule 23 (statement_unmatched -> If LParen expression RParen statement .)
    RParen          reduce using rule 23 (statement_unmatched -> If LParen expression RParen statement .)


state 138

    (71) conditional -> logical_or Question expression Colon conditional .

    Semi            reduce using rule 71 (conditional -> logical_or Question expression Colon conditional .)
    RParen          reduce using rule 71 (conditional -> logical_or Question expression Colon conditional .)
    Comma           reduce using rule 71 (conditional -> logical_or Question expression Colon conditional .)
    Colon           reduce using rule 71 (conditional -> logical_or Question expression Colon conditional .)


state 139

    (26) statement -> Do statement While LParen expression RParen .

    RBrace          reduce using rule 26 (statement -> Do statement While LParen expression RParen .)
    Do              reduce using rule 26 (statement -> Do statement While LParen expression RParen .)
    For             reduce using rule 26 (statement -> Do statement While LParen expression RParen .)
    If              reduce using rule 26 (statement -> Do statement While LParen expression RParen .)
    While           reduce using rule 26 (statement -> Do statement While LParen expression RParen .)
    Return          reduce using rule 26 (statement -> Do statement While LParen expression RParen .)
    LBrace          reduce using rule 26 (statement -> Do statement While LParen expression RParen .)
    Break           reduce using rule 26 (statement -> Do statement While LParen expression RParen .)
    Continue        reduce using rule 26 (statement -> Do statement While LParen expression RParen .)
    Int             reduce using rule 26 (statement -> Do statement While LParen expression RParen .)
    Identifier      reduce using rule 26 (statement -> Do statement While LParen expression RParen .)
    Minus           reduce using rule 26 (statement -> Do statement While LParen expression RParen .)
    BitNot          reduce using rule 26 (statement -> Do statement While LParen expression RParen .)
    Not             reduce using rule 26 (statement -> Do statement While LParen expression RParen .)
    Integer         reduce using rule 26 (statement -> Do statement While LParen expression RParen .)
    LParen          reduce using rule 26 (statement -> Do statement While LParen expression RParen .)
    Semi            reduce using rule 26 (statement -> Do statement While LParen expression RParen .)
    RParen          reduce using rule 26 (statement -> Do statement While LParen expression RParen .)


state 140

    (27) statement -> For LParen block_item block_item opt_expression RParen . statement
    (19) statement -> . statement_matched
    (20) statement -> . statement_unmatched
    (26) statement -> . Do statement While LParen expression RParen
    (27) statement -> . For LParen block_item block_item opt_expression RParen statement
    (21) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (24) statement_matched -> . While LParen expression RParen statement_matched
    (28) statement_matched -> . Return expression Semi
    (29) statement_matched -> . opt_expression Semi
    (30) statement_matched -> . LBrace block RBrace
    (31) statement_matched -> . Break Semi
    (32) statement_matched -> . Continue Semi
    (22) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (23) statement_unmatched -> . If LParen expression RParen statement
    (25) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (33) opt_expression -> . expression
    (34) opt_expression -> . empty
    (37) expression -> . assignment
    (1) empty -> .
    (38) assignment -> . conditional
    (54) assignment -> . Identifier Assign expression
    (39) conditional -> . logical_or
    (71) conditional -> . logical_or Question expression Colon conditional
    (40) logical_or -> . logical_and
    (55) logical_or -> . logical_or Or logical_and
    (41) logical_and -> . bit_or
    (56) logical_and -> . logical_and And bit_or
    (42) bit_or -> . xor
    (57) bit_or -> . bit_or BitOr xor
    (43) xor -> . bit_and
    (58) xor -> . xor Xor bit_and
    (44) bit_and -> . equality
    (59) bit_and -> . bit_and BitAnd equality
    (45) equality -> . relational
    (60) equality -> . equality NotEqual relational
    (61) equality -> . equality Equal relational
    (46) relational -> . additive
    (62) relational -> . relational Less additive
    (63) relational -> . relational Greater additive
    (64) relational -> . relational LessEqual additive
    (65) relational -> . relational GreaterEqual additive
    (47) additive -> . multiplicative
    (66) additive -> . additive Plus multiplicative
    (67) additive -> . additive Minus multiplicative
    (48) multiplicative -> . unary
    (68) multiplicative -> . multiplicative Mul unary
    (69) multiplicative -> . multiplicative Div unary
    (70) multiplicative -> . multiplicative Mod unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    Do              shift and go to state 30
    For             shift and go to state 33
    If              shift and go to state 35
    While           shift and go to state 31
    Return          shift and go to state 36
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    opt_expression                 shift and go to state 34
    statement                      shift and go to state 142
    statement_matched              shift and go to state 28
    statement_unmatched            shift and go to state 29
    expression                     shift and go to state 32
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 141

    (21) statement_matched -> If LParen expression RParen statement_matched Else . statement_matched
    (22) statement_unmatched -> If LParen expression RParen statement_matched Else . statement_unmatched
    (21) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (24) statement_matched -> . While LParen expression RParen statement_matched
    (28) statement_matched -> . Return expression Semi
    (29) statement_matched -> . opt_expression Semi
    (30) statement_matched -> . LBrace block RBrace
    (31) statement_matched -> . Break Semi
    (32) statement_matched -> . Continue Semi
    (22) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (23) statement_unmatched -> . If LParen expression RParen statement
    (25) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (33) opt_expression -> . expression
    (34) opt_expression -> . empty
    (37) expression -> . assignment
    (1) empty -> .
    (38) assignment -> . conditional
    (54) assignment -> . Identifier Assign expression
    (39) conditional -> . logical_or
    (71) conditional -> . logical_or Question expression Colon conditional
    (40) logical_or -> . logical_and
    (55) logical_or -> . logical_or Or logical_and
    (41) logical_and -> . bit_or
    (56) logical_and -> . logical_and And bit_or
    (42) bit_or -> . xor
    (57) bit_or -> . bit_or BitOr xor
    (43) xor -> . bit_and
    (58) xor -> . xor Xor bit_and
    (44) bit_and -> . equality
    (59) bit_and -> . bit_and BitAnd equality
    (45) equality -> . relational
    (60) equality -> . equality NotEqual relational
    (61) equality -> . equality Equal relational
    (46) relational -> . additive
    (62) relational -> . relational Less additive
    (63) relational -> . relational Greater additive
    (64) relational -> . relational LessEqual additive
    (65) relational -> . relational GreaterEqual additive
    (47) additive -> . multiplicative
    (66) additive -> . additive Plus multiplicative
    (67) additive -> . additive Minus multiplicative
    (48) multiplicative -> . unary
    (68) multiplicative -> . multiplicative Mul unary
    (69) multiplicative -> . multiplicative Div unary
    (70) multiplicative -> . multiplicative Mod unary
    (49) unary -> . postfix
    (51) unary -> . Minus unary
    (52) unary -> . BitNot unary
    (53) unary -> . Not unary
    (10) postfix -> . Identifier LParen argu_params RParen
    (50) postfix -> . primary
    (72) primary -> . Integer
    (73) primary -> . Identifier
    (74) primary -> . LParen expression RParen

    If              shift and go to state 35
    While           shift and go to state 31
    Return          shift and go to state 36
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 32
    statement_matched              shift and go to state 143
    statement_unmatched            shift and go to state 144
    opt_expression                 shift and go to state 34
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 142

    (27) statement -> For LParen block_item block_item opt_expression RParen statement .

    RBrace          reduce using rule 27 (statement -> For LParen block_item block_item opt_expression RParen statement .)
    Do              reduce using rule 27 (statement -> For LParen block_item block_item opt_expression RParen statement .)
    For             reduce using rule 27 (statement -> For LParen block_item block_item opt_expression RParen statement .)
    If              reduce using rule 27 (statement -> For LParen block_item block_item opt_expression RParen statement .)
    While           reduce using rule 27 (statement -> For LParen block_item block_item opt_expression RParen statement .)
    Return          reduce using rule 27 (statement -> For LParen block_item block_item opt_expression RParen statement .)
    LBrace          reduce using rule 27 (statement -> For LParen block_item block_item opt_expression RParen statement .)
    Break           reduce using rule 27 (statement -> For LParen block_item block_item opt_expression RParen statement .)
    Continue        reduce using rule 27 (statement -> For LParen block_item block_item opt_expression RParen statement .)
    Int             reduce using rule 27 (statement -> For LParen block_item block_item opt_expression RParen statement .)
    Identifier      reduce using rule 27 (statement -> For LParen block_item block_item opt_expression RParen statement .)
    Minus           reduce using rule 27 (statement -> For LParen block_item block_item opt_expression RParen statement .)
    BitNot          reduce using rule 27 (statement -> For LParen block_item block_item opt_expression RParen statement .)
    Not             reduce using rule 27 (statement -> For LParen block_item block_item opt_expression RParen statement .)
    Integer         reduce using rule 27 (statement -> For LParen block_item block_item opt_expression RParen statement .)
    LParen          reduce using rule 27 (statement -> For LParen block_item block_item opt_expression RParen statement .)
    Semi            reduce using rule 27 (statement -> For LParen block_item block_item opt_expression RParen statement .)
    RParen          reduce using rule 27 (statement -> For LParen block_item block_item opt_expression RParen statement .)


state 143

    (21) statement_matched -> If LParen expression RParen statement_matched Else statement_matched .

    RBrace          reduce using rule 21 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Do              reduce using rule 21 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    For             reduce using rule 21 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    If              reduce using rule 21 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    While           reduce using rule 21 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Return          reduce using rule 21 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    LBrace          reduce using rule 21 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Break           reduce using rule 21 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Continue        reduce using rule 21 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Int             reduce using rule 21 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Identifier      reduce using rule 21 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Minus           reduce using rule 21 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    BitNot          reduce using rule 21 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Not             reduce using rule 21 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Integer         reduce using rule 21 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    LParen          reduce using rule 21 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Semi            reduce using rule 21 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    RParen          reduce using rule 21 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Else            reduce using rule 21 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)


state 144

    (22) statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .

    RBrace          reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Do              reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    For             reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    If              reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    While           reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Return          reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    LBrace          reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Break           reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Continue        reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Int             reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Identifier      reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Minus           reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    BitNot          reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Not             reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Integer         reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    LParen          reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Semi            reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    RParen          reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)

